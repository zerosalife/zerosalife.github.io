#    -*- mode: org -*-


Archived entries from file /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org


* Some thoughts on Attack of the Friday Monsters       :review:3DS:mechanics:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 14:59
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
categories:
- review
- 3DS
- mechanics

It's hard to say anything new about Attack of the Friday Monsters, a
game that splashed on the scene months ago.  The work of its creator
was lovingly lauded by [[https://twitter.com/rdbaaa][Ray Barnholt]]--a noted /[[http://en.wikipedia.org/wiki/Boku_no_Natsuyasumi][Boku no Natsuyami]]/
fanatic--in such a reverent way in his [[http://scroll.vg/issues/10][SCROLL magazine]] that it's
almost sacrilegious to try to write more.  So instead of doing a
point-by-point review, I'll mention some details that stand out to me,
personally.

I played through most of Attack of the Friday Monsters on a flight the
day after I watched Miyazaki's [[http://en.wikipedia.org/wiki/Arrietty][Secret World of Arrietty]].  Sure one had
beautiful water colors and amazing visual tricks mimicking real
camerawork and the other used pre-rendered backgrounds with blocky
polygonal actors on the stage, but these art styles complimented one
another.  They didn't clash.

[[http:///images/aotfm.JPG][{% img center /images/aotfm.JPG 320 320 %}]]

I was struck by the ambient sounds that bring the pre-rendered
backgrounds and polygonal characters to life. The periodic train
sounds, presaging the arrival of an in-engine rendered train--sort of
quirky and quaint with today's game engines powerful enough to render
both background and foreground objects--remind me of a previous
exposure to Japanese culture: the first time I watched [[http://en.wikipedia.org/wiki/Neon_Genesis_Evangelion][Neon Genesis
Evangelion]] as a teenager.  There are the ubiquitous cricket or cicada
sounds that were also present in Eva, but for me, they hearken back to
a youth spent in the rural South.  The drone of cicadas in the sticky
summer heat reminds me of falling asleep in a Mississippi home, of
walking into cool woods after standing in a sunny meadow.

The whole game engine is full of quirks and reminders of the PS1 era
of gaming.  But one of the mechanics seems rather novel, an addition
seemingly for its own sake, with little influence on actual plot or
gameplay.  I'm talking about the spell casting mechanic, reminiscent
of games children used to play in 70s Japan, the time in which Attack
of the Friday Monsters takes place.

If you win the sometimes annoying, somewhat forgettable,
rock-paper-scissors card game, fueled by collectibles strewn
throughout the world, you gain the ability to cast spells on your
buddies, knocking them down.  It has no bearing on the outcome of the
story.  The spell system is simply decoration that deepens the story
by providing a more complete world, accurately capturing what it feels
like to grow up as a child in Japan during the 70s.

You are allowed to pick, and reorder, the phrases of the spell your
character speaks.  This type of cosmetic customization is typical in
modern games, and in Attack of the Friday Monsters it's nothing more
than cosmetic, but it could have been used in surprising ways.

I realized the potential depth of this mechanic during a phone
conversation with my brother. As I told him about the spell casting,
he mentioned a Kickstarted pen and paper RPG called [[http://www.magiciansrpg.com/][Magicians]].
Magicians uses spells spoken in another language as both an impulse
toward learning the language and a mechanic for determining the
success or failure of an action. The game my brother described
involved a Harry Potter-esque international school for magicians in
Korea.

To use magic, the characters, and thus the players, have to correctly
speak Korean words--at least accurately enough to satisfy the
voice-recognition system of an online translation service.  This sets
up the potential for a rather clever scenario in which characters'
/[[http://en.wikipedia.org/wiki/Bildungsroman][Bildungsroman]]/ stories are echoed by the players' acquisition of the
language.

At present, on the 3DS, the kind of voice recognition required for
this sort of is [[http://www.gamefaqs.com/boards/997781-/58911600][immature]].  But it's certainly possible on more
powerful platforms.

One way to exploit the 3DS, and other devices with touch interfaces,
involves learning written language, such as Japanese /[[http://en.wikipedia.org/wiki/Hiragana][hiragana]]/ or
/[[http://en.wikipedia.org/wiki/Katakana][katakana/]].  I can imagine a magic mechanic that involves correctly
writing scrolls, where the fidelity of the player's calligraphic
strokes determines the strength and efficacy of the scrolls.

Another possible approach is to build up language comprehension by
constructing words out of syllables.  Given several options, one would
choose the correct syllable to complete the necessary word, in order
to perform an action or cast a spell.  A similar sort of approach
would work for learning syntax, completing or building a sentence with
the appropriate words.

Attack of the Friday Monsters is a quick experience, but the depth of
its design has made it a memorable one.  If you'd like to learn more
about the game and its creator, you can check out [[http://scroll.vg/extras/summer-vacation-confidential/#a][this interview]] by
Ray Barnholt, which covers Attack of the Friday Monsters and other
games by creator, Kaz Ayabe.

* An entity component system for Pygame :design:python:pygame:entity:component:ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:00
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:

* An in-depth tour of Tetris                                        :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
categories:
- AI
- design
- mechanics
- NES

{% img center
http://upload.wikimedia.org/wikipedia/en/a/ae/Tetris_NES_play.png %}
Image from [[http://en.wikipedia.org/wiki/Tetris][wikipedia.org]].

This week I've spent quite some time reading [[http://meatfighter.com/nintendotetrisai/][this article]] on
[[http://meatfighter.com/][MeatFighter.com]].  The article reverse engineers the inner-workings of
[[http://en.wikipedia.org/wiki/Tetris#NES][NES Tetris]].  With great visual aids, the author, [o__1] [1], surveys
the mechanics and data structures used to implement Tetris on the NES.
Then o__1 designs and implements an AI script to play Tetris with
super-human speed and precision.  o__1 even describes how to try it at
home, providing instructions and the necessary Lua scripts to run the
AI on your own copy of Tetris.

I hope to see more articles looking back on classic games with this
tremendous attention to detail.  An older [[http://home.comcast.net/~jpittman2/pacman/pacmandossier.html][article looking at Pac-man
AI]] shows similar obsessive depth.  Articles like these help supplement
our appreciation of these games as works of art by documenting the
essential technical complexities underlying these games.  I think
that's a good thing for everyone from hobby developers to professional
developers, as well as designers and fans.

[1]: I'm referring to the author by the contact email listed on the
website.

* Bunnies Don't Surf [[http://itch.io/jam/flappyjam][#flappyjam]]                                     :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
Categories:
- design
- python
- pygame
- game

{% img center https://github.com/zerosalife/bunnies-dont-surf/blob/master/screenshot.png %}

Here's a WIP FlappyBird-like game prototype for [[http://itch.io/jam/flappyjam][#flappyjam]]: [[https://github.com/zerosalife/bunnies-dont-surf][Bunnies
Don't Surf]].  You are an unfortunate rabbit whose warren is being
flooded by a passing thunderstorm.  You have to navigate the
tunnels of the warren, propelled by the wave of water flooding
your home.  There's only one problem: Bunnies Don't Surf.  So you're
stuck hopping up and down in a futile attempt to survive.

Bunnies Don't Surf requires [[http://www.python.org/][Python]] and [[http://pygame.org/news.html][pygame]] ([[http://pygame.org/download.shtml][version 1.9.1]]) to play.

Tap =space= to hop. That's about all there is to say about the
controls.

As I'm sure you can see, the game is in dire need of art assets, sound
assets, and some sort of high score system.  I'll do my best to add
these, once time allows. If anyone has feedback or art design ideas,
please let me know in the comments section or on Twitter.  I'd love to
hear it.

I'll post updates as the game progresses, and officially submit it to
#flappyjam  if it's done before the jam ends on February 24.

* What's in a name?                                                 :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
Growing up, the seemingly interminable school-week gave way to an
anxious car drive home from the rental store with the weekend's score.
You remember those, right?

Usually the rental would include the instruction manual.  On the ride
home, I'd pour over the manual, trying to glean useful information to
supplement my Nintendo Power-fueled strategies to maximize my fun in
the limited time I had with the game.  Often I'd get so engrossed with
the manual, learning the universe for the game, I'd let my brother or
a friend play the game first.

The looming question, not covered in the manual, was always: When will
my turn end?  When will my brother run out of lives, so I can get a
turn?

We developed a vocabulary to deal with the count down to game over. On
your first play-through it was unclear whether the last life was when
your stock counter read 1 or 0.  If you had one life left, you could
play extra hard, using a rush of adrenaline to try to stay alive
longer.

Sometimes, it was game over when the stock counter ticked over from 1
to 0.  In other games, when the stock counter reads 0, zero is a life.

The name of this blog comes from that reassuring sense that you have
an extra chance.  "Don't worry, zero's a life."

* Setting up Emacs-like key bindings in MonoDevelop                 :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
Categories:
- tools

I'm playing around with Unity to try to learn how it works.  Shout out
to Infinite Ammo for the excellent video tutorials. Since I don't know
much about Unity, I'm reluctantly using their included MonoDevelop
IDE.  While I heard that Emacs-like key bindings were included, in the
build I installed they weren't present.

MonoDevelop does not make it easy to import new key binding schemes
(the blog post linked here suggests submitting a bug report to suggest
new key bindings...).  So, I did a little digging around on github and
found the [[https://github.com/mono/monodevelop/blob/master/main/src/core/MonoDevelop.Ide/options/KeyBindingSchemeEmacs.xml][default emacs key binding scheme]] that I imagine should have
been included in the MonoDevelop build I installed.

There was no way to add this key binding scheme to my available key
bindings in MonoDevelop, so I hacked my Custom key binding file
located at =~/Library/MonoDevelop-Unity-4.0/KeyBindings/Custom.mac-kb.xml=.

I started with some simple copypasta.  But then I found some useful
navigation features were lacking.  So, I added key binds that
immediately came to mind, like =Alt-f= for moving forward one word and
=Alt-b= for backward word.  Yes, I know these are =M-f= in Emacs, but
I'm using MonoDevelop's syntax here.

My key bindings are available in the gist below.  I'll update this
gist when I add key bindings, to keep a current working version
available.

{% gist 9096788 %}

* Cut it all right in two: bisect to find bugs                      :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- algorithm
- tools

Imagine there's a lion in a desert.  You need to cage the lion or you
will be eaten.  In this example the desert is your code and the lion
is a bug that you're having a hard time pinning down.

There are many ways to trap a lion.  Here's one.

Build a fence dividing the desert in half going North to South.
Assuming the lion is not in the South section, divide the North
section in half with a fence going East to West.  Repeat the process
until your fence is arbitrarily small and has become a cage trapping
the lion.

But how does this relate to code?

Say you have a relatively large file that executes fine, but
introduces a bug into your larger system.  You suspect that something
has gone wrong with the large file, but you're not getting an error
implicating a specific line.

Cut it all right in two.

Comment out half the code in your large file and try to reproduce the
bug.  If you reproduce the bug, repeat the process as necessary until
you isolate the line producing the problem.

I learned about this approach for bugsleuthing from the [[https://gist.github.com/stardiviner/8109774#file-temp-txt-L26][bot in #emacs
on freenode]].  It's particularly useful for tracking down bugs in large
configuration files.  There's a list of humorous lion-trapping
algorithm examples [[http://faculty.smu.edu/yzhou/humor/lion.htm][here]].

* Upgrading to Mavericks                                            :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- tools
- OS X

This week I upgraded to [[https://www.apple.com/osx/][Mac OS X 10.9 Mavericks]].  To keep [[http://octopress.org/][octopress]]
working, I had to uninstall and reinstall [[https://www.ruby-lang.org/][Ruby]].

Upon trying a =rake generate= task, I saw errors in the Ruby gems for
processing [[http://www.yaml.org/][YAML]].  I assume this is due to the fact that I built them
on the older OS X install.

Interestingly, [[https://rvm.io/][RVM]] survived the upgrade and seems to be working just
fine.

I followed the instructions [[https://gist.github.com/imathis/1104557][here]] to uninstall and reinstall Ruby, the
bundler, and all bundled gems for my octopress install.  The
instructions mention a specific problem for OS X Lion, but these steps
solved the problem for me.

* ICE ICE Baby                                                      :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- game
- cyberpunk
- cyberpunkjam
- review
- twine

[[http://www.thegia.com/author/avestal/][Andrew Vestal]] of [[http://www.thegia.com/][the GIA]] wrote a [[http://twinery.org/][Twine]] game for [[http://itch.io/jam/cyberpunk-jam][#cyberpunkjam]] called
[[http://www.thegia.com/avestal/iceicebaby.html][ICE ICE Baby]].  It's playable in a quick ten minutes.  Parts of the
game remind me of the sorts imagination games I would play growing
up. This is quite a nice conceit for a text adventure, and it works
well here.  I especially like the use of color to mark the transitions
between meatspace and cyberspace.

[[http://www.thegia.com/author/nmaragos/][Nich Maragos]] wrote more thorough [[http://www.thegia.com/2014/03/05/appetite-for-destruction-ice-ice-baby/][critical review]] on the GIA.

* A Twine Tutorial in Twine                                         :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- game
- twine
- tutorial
- tools

[[http://ryanscasey.com/][Ryan S. Casey]] incepted a Twine tutorial in a Twine game.  Awesome.
Take a look at it [[http://ryanscasey.com/twine/][here]].

* Don't Fear Lack of Content                                        :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
Don't Fear Lack of Content - Wisdom from @bengrue
- design
- mechanics

Came across a [[http://www.egometry.com/gruedorf/a-penny-for-your-thoughts-a-hundred-for-your-life/][nice article]] on [[http://www.egometry.com/][Ben McGraw's blog, Egometry]]. Using Super
Mario Bros. as a model, Ben explains why merely increasing content
quantity is less desirable than increasing content substance.  The
title of this post is lifted from a quote in his article.

Sometimes exercising a bit of restraint, keeping the focus of your
content simple, can still allow for an interesting and engaging player
experience.

* The Fate of Adventure Games                                       :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- adventure games
- design

Zoyə Street wrote a [[https://medium.com/p/3e3c1e20cfd0][summary]] of an interesting [[http://www.omnsh.org/ressources/527/histoire-formelle-du-jeu-daventure-sur-ordinateur-le-cas-de-lamerique-du-nord-de-1976][PhD thesis by Jonathan
Lessard]].  Lessard examines the history of adventure games, to see
whence they've come and where they've gone.  Like Street, I think this
approach to thinking about video game design and genre provides useful
perspective.

Lessard concludes that the adventure game genre didn't vanish, it
sublimated into, and was subsumed by, other modern multi-genre
games.

For example, consider 3d RPGs incorporating first-person shooter
perspective and playstyle.  I could be describing Skyrim or Titanfall,
two dramatically different games.

Lessard and Street argue, convincingly, that these sorts of games have
all the hallmarks of adventure games, while evolving new forms and
structures of play.

* styx_ebooks                                                       :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- design
- mechanics
- procedural generation
- game

And now for something completely different: a [[http://en.wikipedia.org/wiki/Markov_chain#Markov_text_generators][markov chain text
generation]] twitter bot.  Styx_ebooks tweets random text generated from
a corpus of Bangsian fantasy novels.  Its name comes from [[http://en.wikipedia.org/wiki/John_Kendrick_Bangs][John
Kendrick Bangs]]' novel /[[http://en.wikipedia.org/wiki/A_House-Boat_on_the_Styx][A House-boat on the Styx]]/ and the general
[[http://knowyourmeme.com/memes/horse_ebooks][twitter ebooks meme]].

I forked it from an earlier project by [[https://github.com/jiko][@jiko]], [[https://github.com/jiko/lovecraft_ebooks][lovecraft_ebooks]].  There
were some minor implementation hurdles, mainly related to Twitter's
API and oauth.  Reading the [[https://pypi.python.org/pypi/twitter][python =twitter= package]] =twitter.oauth=
docstring set me straight.  You can check out the code in [[https://github.com/zerosalife/styx_ebooks][my fork on
github]].

This sort of text generation algorithm isn't just useful for making
annoying twitter bots.  You could alter some of the in-game text or
dialog based on a corpus fed into a markov chain text generator.
Especially in the case of a Lovecraftian horror game, I can see how
this text could serve a thematic purpose in the story.

Say you've got a Lovecraftian horror game in which the player is an
investigator who is trying to figure out what is happening to citizens
of Innsmouth.  By interacting with NPCs, the player encounters hand
written dialog, with occasional markov-generated gibberish thrown in.
The amount of gibberish depends on how corrupted the individual
denizens of Innsmouth are becoming.  If the player is not clever
enough to determine who is corrupt, the player will be killed.  If the
player determines the source of the corruption, the player wins.

Along the same line of reasoning, the concept I'm describing here
mimics the game [[http://www.newgrounds.com/portal/view/634905][ALZ]], a touching short, playable in 2 or 3 minutes,
which uses glitchy graphics to convey a sense of what it's like to
live with Alzheimer's disease to the player.  I came across Dylan
Carter's ALZ in a [[http://www.animalnewyork.com/2014/making-alz-glitch-fueled-game-alzheimers/][post on the ANIMAL blog]].  This approach of literally
altering the player's experience of the game world to mimic the
subjective experience of characters in the game is ripe for
exploration.  I'd love to hear about more examples.

You can check out my bot, [[https://twitter.com/styx_ebooks][@styx_ebooks]], on twitter, happily tweeting
the day away.

* Clojure Rhizome Labeled Edge Tutorial                             :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- algorithm
- tutorial
- design
- tools
- Clojure

I'm using the [[https://github.com/ztellman/rhizome][Rhizome package]] for Clojure to rapidly prototype the
dependency graph for a crafting system.  It's nice to be able to add
and remove components while generating visualizations on-the-fly.
Clojure's simple, composable syntax, aided by paredit, makes shuffling
around key-value pairs, and even whole dictionaries, quick and easy.

The existing Rhizome documentation shows simple examples for labeling
the nodes of a directed graph.  In order to show the relationship
between nodes on the graph, I'd like to also label the edges, or the
arrows connecting the nodes.

Rhizome provides a keyword argument =:edge->descriptor= to most of its
functions.  Consulting the source code and the tests for the Rhizome
package, I learned that the functions expect =:edge->descriptor= to be
a function accepting two arguments for each edge: =src=, the source
node, and =dst=, the destination node.  In order to label the edges,
the anonymous function I'm binding to =:edge->descriptor= will return
a dictionary containing the key =:label= and the value for the edge's
label.

Here's an example using the simple graph from the Rhizome
documentation:

#+BEGIN_SRC clojure
  (use 'rhizome.viz)

  (def g
      {:a [:b :c]
       :b [:c]
       :c [:a]})

  (view-graph (keys g) g
              :node->descriptor (fn [n] {:label n}))

#+END_SRC

{% img graph-unlabeled-edges.png %}

Now, I'll use a dictionary of dictionaries to associate the source and
destination nodes with a label for each edge.

#+BEGIN_SRC clojure
  (def g-edges
    {:a {:b :makes
         :c :takes}
     :b {:c :takes}
     :c {:a :makes}})

  (view-graph (keys g) g
              :node->descriptor (fn [n] {:label n})
              :edge->descriptor (fn [src dst] {:label (dst (src g-edges))}))

#+END_SRC

{% img graph-labeled-edges.png %}

I've submitted a [[https://github.com/ztellman/rhizome/pull/8][pull request]] to Rhizome to add this example to the
documentation.

* Why are caves central to so many games?                           :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
My 2¢ in response to @psysal's question: Why are caves central to so
many games?
- design


On twitter, [[https://twitter.com/psysal][@psysal]] posed this question to the game dev community:

{% tweet https://twitter.com/psysal/statuses/456314611428372480 %}

You can see all the responses by following the link to the original
tweet.

The consensus is that caves are essential features for games for three
reasons.

1) Linearity
2) Repeatability of composition
3) Curiosity

<!--more-->

** Caves are linear

In terms of their schematic representation in the design of a game,
caves can boil down to one enclosed 'area' or room with a single
entrance.  This doesn't account for some of the amazing environments
in intricately designed games like [[http://en.wikipedia.org/wiki/Super_Metroid][Super Metroid]], recently broken down
by [[https://twitter.com/gamespite][@gamespite]] in [[http://www.anatomyofgames.com/2013/12/08/the-anatomy-of-super-metroid-01-moving-pictures/][the Anatomy of Games series]].

But, at the most basic level, a cave must have a mouth, or an
entrance, and at least one room.  This simplifies the representation
of the critical path of play, because once the cave has been fully
explored there are no possible branches that the player could have
taken to leave the cave.  The single entrance is also a single exit.
Even if there are many internal rooms, this representation holds true,
as long as there are ultimately no 'back doors' out of the cave.

The designer can rely on the fact that once the player has received
any rewards for exploring the cave, the player can reasonably be
expected to pop out of the entrance of the cave looking for the next
available challenge surmountable with any freshly acquired toys.

** Caves offer repeatable composition

For whatever atavistic significance they hold in our psyches, caves do
not have to rely on realistic representations in game design.  Any old
hole in some rock will almost invariably create a believable sense of
cave-ness.  Yeah, I said cave-ness. You know cave-ocity, general
cave-itude.

Since we don't spend much time in caves, day-to-day, we don't hold
them to the same level of fidelity to which we would hold, say,
buildings or automobiles.  The same architectural details necessary to
represent a house in a video game can be painted in broad strokes to
represent a cave.

In tile-based games, this means that a designer can reuse tiles over
and over again to craft a general shape without worrying too much
about players noticing, or being bothered by, the similarities.  Caves
are thus more defined by the space created rather than the graphics
used to define them.  This sense of space is what drives the third
essential feature of caves in game design, a sense of curiosity, the
drive to explore.

** Caves are inherently curious

I'm not sure I buy the argument that we have some evolutionary
instinct that drives us to explore caves, but the fact remains.
Something about caves begs exploration.

Call it the /Will to Spelunk/.

Once a space has been created, the player wants to explore every nook
and cranny for collectible power ups or items.  Certainly the rewards
are powerful motivators.  But there is something to the exploration
for exploration's sake.  Simply completing one's mental map of the
space becomes a goal in itself.

** Coda

It's intriguing that caves are such a fixture in the established
vocabulary of game design.  The three features highlighted in this
post make it clear that caves remain a useful game design pattern
because they serve an essential purpose in the ludic lexicon of games.

* Follow-up to the centrality of caves                              :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- design


My [[/blog/2014/05/03/why-are-caves-central-to-so-many-games/][post last week]] about caves struck a nerve.  I received a lot of
encouraging retweets and favorites.  I also received some great
feedback.

Paul Diaz points out one design constraint granted by caves that I
hadn't considered.

{% tweet https://twitter.com/sleepytearyeyed/status/462624220447391744 %}

I think Paul is right, that this falls within the scope of caves'
linearity.  I've been thinking a bit about a possible taxonomy of cave
environments in games, but for the purposes of these posts I'll keep
it more general.  A cave is a cave, right?  [[http://en.wikipedia.org/wiki/I_know_it_when_I_see_it][We know it when we see
it.]]

Any old screen in a game can be cave-like in the way its environmental
design constraints fit into the game world.  Here I'm using 'screen'
to refer to a room in a metroid-like game or a level in other sorts of
games--some arbitrary atomic unit of division of the game environment
constituting a discrete area.

For the purpose of argument, Paul's point forces us to think of the
most cave-y of caves, which I think was the intent behind the original
question in the first place.  Because caves are dark environments,
dank environments, /interior/ environments, they lack the uniform
lighting that typically characterizes the exterior 'overworld' in
games.  As Paul states, lighting cues can serve as guideposts for the
player, directing attention toward the critical path.

I view this example as a manifestation of the fundamental reduction in
degrees of freedom of play achieved by the interiority, and thus,
linearity of caves.  The fact that there are more walls, and therefore
fewer possible places for the player to go, allows for the designer,
using careful construction, to communicate intent to the player
through the environment itself.  I don't mean to say here that such
communication is impossible outside of caves, just that caves are one
simple and straightforward way to achieve this constrained,
communicative sort of design.  This vocabulary of design showed up
early on in the history of games, it worked, and it has persisted.

Thanks and shout outs to [[https://twitter.com/sleepytearyeyed][Paul Diaz]], whose feedback inspired this
follow-up post.

* .gitignore for Unity projects                                     :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- Unity
- git
- version control

I found a solution on the [[http://answers.unity3d.com/questions/369755/unity-on-github.html][Unity website]] that pointed me toward [[http://t-machine.org/index.php/2012/07/03/unity-git-source-control-a-basic-gitignore/][this
blogpost]].  But a better solution is out there.  The Double Fine Game
Club's Bad Golf Community Edition [[https://github.com/Double-Fine-Game-Club/bad-golf-community-edition/blob/master/.gitignore][.gitignore]] looks like this:

#+BEGIN_ASCII
[Ll]ibrary/
[Tt]emp/
[Oo]bj/
build_Data/

# Autogenerated VS/MD solution and project files
*.csproj
*.unityproj
*.sln
*.exe
*.userprefs

# OS generated files #
######################
.DS_Store
.DS_Store?
._*
.[Ss]potlight-V100
.[Tt]rashes
[Ee]hthumbs.db
[Tt]humbs.db
*~
*#*
#+END_ASCII

This is the =.gitignore= I'm currently using in my projects.

* Quarries of Scred Roadmap                                         :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
[[http://www.indiedb.com/games/quarries-of-scred/news/quarries-of-scred-rolling-down-the-roadmap]]

The [[http://darkestkale.itch.io/quarries-of-scred][Quarries of Scred]] [[https://twitter.com/darkestkale][developer]] released an image showing the overview
of Scred's 14-day game development.  I find it informative for a
couple of reasons.  First it's not limited to the core features of the
game, Kale's also included public relations and marketing information.
Second, the fact that it's incomplete shows how Kale's prioritized
critical elements of the game.

Rather than blatantly stealing the [[http://www.indiedb.com/games/quarries-of-scred/images/quarries-of-scred-roadmap-2013-11-28-01][roadmap for Quarries of Scred]], I'll
give you a few seconds to go and capture an eidetic mental image.  Got
it?  Great.  I guess all you cheaters who opened it another tab can
follow along too.

<!--more-->

** Core Gameplay
Looking at the presumably completed 'green light' items, Core Gameplay
is almost finished.  And it should be.  Without Core Gameplay, there's
not much game to be played.

It looks like they have not included actual aspects of the core
mechanic implementation on this roadmap.  However, they're using the
roadmap as a method of cataloging oft-overlooked features that add
polish to the final game.

They have a milestone for implementing a persistent high score system.
This hurdle is easy to imagine, since we see it in almost every game
we play.  But it can be tricky to implement in a robust and efficient
manner.

Several elements of UI are included on the roadmap.  They could be
neglected in a prototype, these UI elements can make a finished game
welcoming for new players and compelling enough to replay.  Info
screens can clarify the world for tyros and explicitly show unique
challenge states to experienced players.  Death information, like
gravestones in Nethack, provides potentially entertaining feedback for
the players attempting to hone their skills at the game.

I'm not sure whether they finished implementing rocket ship building
gameplay in Quarries of Scred, but this should be a goal for every
game.

** PR
Marketing is an aspect of game development that is easy to overlook as
an inexperienced indie or hobby gamedev with a few gamejams under your
belt.  The pressure to simply finish a game, any shippable game,
overshadows what to do with it once it's released.

Setting up an IndieDB page to track the progress is a great idea.
And, since it doesn't necessarily require a finished product, it can
be done early on in the development process.  The priorities of
creating an IndieDB Icon, Header Image, and Preview Image show Kale's
clearly interested in branding Scred as a marketable indie title.

I can confirm that a [[https://www.youtube.com/watch?v%3DBrZ_POiKJO4][Trailer]], [[http://darkestkale.itch.io/quarries-of-scred][Website]], and [[http://img.itch.io/aW1hZ2UvODc0LzQ0MTIucG5n/original/Npan5L.png][Box Art]] came along in due
time.  The inclusion of Box Art in a download only indie title is
particularly charming, even in an atmosphere awash with these things,
the art for Scred's box is fun and quaint, in a good way.

** Further Content
Further Content looks like features that would directly build on those
already implemented in the game.  Rather than being classified as
Fluff, these extra features would complement the content and features
already implemented in the game.

It's important to have the courage to 'kill your darlings' in cases
like this.  Some of the items under Fluff like pretty important to
making a good game, but if they are too demanding to fit in the
schedule allotted to create the game, they have to go.

One of the buildings has made it in.  And I think the second building
is in the final game. Not sure whether the Rare Flower survived.

** Bookending
The Bookending category looks like a lot of the UI improvements I
talked about above.  They certainly improve players' experience, but
they may not be absolutely necessary to get the game out the door.

I can only speculate that configurable keys are highlighted in gray
because it would be silly not to include them.  For that matter,
everything except troubleshooting info adds delicious spice to the
well-seasoned dish that the Core Gameplay milestones create.

** Fluff
It looks like the Fluff category represents additional features that
aren't required to make a working game.  The ability to select a seed
is probably a new system that requires designing and implementing,
much like the UI stuff in the Bookending category.  New Sprites and
Death Animation are probably a similar story.

You may argue that music and sound are critical for a completed game.
But if you are not a musically inclined person, the shear amount of
work required to get something that sounds like the death-throes of a
thousand Gameboys (note: this is not a good thing) could double your
production time.  The New Sprites mentioned in the previous paragraph
are probably a similar case of requiring too much time that could be
more productively devoted elsewhere in the project.

** Closing Thoughts
This kind of frank openness about game design is unusual to get prior
to the publication of a game.  It's really great to see the design
documents behind a game, even if it comes out years after release.
It's especially informative to see an in-progress version where the
developer is unafraid to lay the goals out there, to show where the
project succeeds and possibly falls short.

* Hammock driven creativity                                         :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- design
- algorithm
- tools

In 2010, [[https://twitter.com/richhickey][Rich Hickey]] spoke at Clojure Conj about [[http://www.youtube.com/watch?v%3Df84n5oFoZBc]['Hammock Driven
Development']].  Hickey was talking about the benefit of down-time for
noodling about software design.  Specifically, Hickey means using
down-time after considerably 'loading up' your mind with aspects of
the problem, in order to leverage background offline processes to
solve those difficult problems.

Hickey's advice is to wait for it.  Wait overnight.  Get good rest and
make sure that you are sleeping well.  Then you will be able to think
about the clearly on the next day.  If you are lucky perhaps you will
receive inspiration from a dream and wake up with the problem solved.
This sort of inspiration is what Hickey means by leveraging background
processing.

Hickey mentions working on more than one project.  By having multiple
projects, you avoid the problems of creative block, or writer's block.
You can be productive simply by working on another project.  One
drawback is that frantically flitting from project to project can lead
to problems finishing any single project.  I am often guilty of this.

I plan on writing about properly scoping projects to make it possible
to get them to a finished state later.  One method that works for me
is getting something to the point that I can write a blog post about
it.  Even if it's not 'finished' finished, I get some satisfaction
with putting it out there in a relatively thought out and complete
form.

My solution is to *record, record, record*.  I keep lots of notes,
both in more structured form on this blog and in more sketchy form in
files on my computer.  I also draw out visual design ideas in a
notebook.  Sometimes I will set up skeleton game projects simply to
test out an idea.  If I have some sudden insight into a problem, then
all of these ideas are available later.

Hickey says to avoid being stuck, switch.  That is why having multiple
projects can help.  Hickey also mentions a great suggestion of talking
about design hiccups and problems with other people.  Tweet about your
design roadblocks.  Write a blog post about them.  Telepathically
communicate about them before you go to sleep, so magical dream elves
can come and solve them for you.

Unless you are Rich Hickey or--I dunno--Gary Gygax, simply thinking
about a problem /a priori/ will not result in a great game.  There is
still something to be said for getting your hands dirty and iterating
on a design.  However the techniques highlighted in Hickey's talk can
be useful when you are stuck on a design problem.

Hit me up in the comments or on the [[https://twitter.com/zerosalife][tweet tweet]] if you have any great
Hammock Driven Design tips that I haven't covered here.

* Why you should start simple                                       :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
My thoughts about a long-read from @hobbygamedev on why you should
start simple.

- design
- mechanics

[[http://twitter.com/hobbygamedev][@HobbyGameDev's]] long-read [[http://www.hobbygamedev.com/beg/incremental-learning/]["Reasons for Modest First Projects and
Incremental Learning"]] tells the tragic tale of overambitious novice
developers.

In a response to a doubting tweeter, HGD advocates starting modestly
to slowly build skills, so that you can tackle more complicated
projects later on.  Avoiding overambitious projects that are way
outside of your comfort zone is one of the stumbling points for novice
and hobby game developers, like myself.

In the [[{%25%20post_url%202014-05-031-hammock-driven-creativity%20%25}][previous post about Hammock Driven Creativity]], I highlighted
Rich Hickey's suggestion to keep multiple projects going in order to
avoid stagnation.  While I agree with this, it's important to judge
the scope of those projects with a critical eye.

Far too often, my ideas start, at least in my mind, with ambitious
artwork, animation, and multiple complex combinations of mechanics.  I
am neither talented nor skilled enough to pull these projects off.  So
it's easy to get stuck.

I often find myself implementing some ad-hoc animation system,
spending time reinventing the frame-based or skeletal wheel, as it
were.  Animation shouldn't take priority, especially considering that
my best artwork is derivative and possibly one step above programmer
art.  I should focus on creating compelling prototypes, and worry
about polish later.

To build your skillset, HGD suggests starting out by remaking
historical games.  By implementing tried-and-true mechanics that are
necessarily simple in scope given their ancient hardware, you can
confront the problems involved in creating a full game rather than a
half-finished proof-of-concept.

By half-finished, I'm thinking of a time where I completely abandoned
a concept because I was hung-up on optimizing a tile-based room
system.  Rather than making the actual gameplay fun and complete, I
was focusing all of my time figuring out how to make walls.  Walls are
nice in a finished game, and you could make the case that they are
required constraints to achieve good gameplay, but they are not where
the fun is.  As HGD and my previous post point out, you can keep
trying to work on these overly ambitious projects, but your
productivity will suffer.

Best to reap the rewards that come from continued productivity and, as
HGD says, pick a fight you can win.

* Playable Call For Papers                                          :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
My thoughts on the playful "needlessly interactive" CFP from @mtrc.

- design

[[http://www.twitter.com/mtrc][Michael Cook]] made a "needlessly interactive" [[http://www.exag.org/playablecfp/][playable call for papers]]
for the [[http://www.exag.org/][Experimental AI in Games conference]], taking place in October
in Raleigh, NC.  It's a minimally expressive Twine story, with really
one simple interactive experience of role-playing the interaction a
recipient feels upon receiving yet another CFP email, /click/.

It's a tricky thing to get right.  While it makes sense for a
game-related conference to have a text adventure announcement, I don't
want to have to play a game of Frogger to purchase movie tickets from
the automated kiosk at the movie theater.  It would be nice if the
playable CFP included prominent and consistent links to exit the game,
in order to read the ordinary CFP on the conference website.

I believe the motivating idea is sound.  Turning banal daily routine
into a playful interactive experience is a worthy goal for game
design.  It has the ability to startle the player into paying more
attention to mundane activities, which I think is the intended goal,
for a CFP to stand out from piles of other CFP emails.

Let me know if you've come across games in strange places.  I don't
mean finding a boxed copy of Mario Kart at the flea market--I mean
conceptually strange places.  Hit me up on twitter if you've got ideas
like this to discuss, because I think this approach of creating small
play experiences to "gamify" mundane tasks is an emerging theme of
design.

* The Strength of the Pitch: Jodorowsky's Dune                      :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- design
- collaboration


I was fortunate enough to catch a screening of /[[http://jodorowskysdune.com/][Jodorowsky's Dune]]/,
the documentary about [[http://en.wikipedia.org/wiki/Alejandro_Jodorowsky][visionary director Alejandro Jodorowsky's]] failed
attempt to adapt the science fiction novel /[[http://en.wikipedia.org/wiki/Dune_(novel)][Dune]]/ to the silver screen.
Having seen a similar [[http://www.imdb.com/title/tt0308514/][documentary about Terry Gilliam's attempt at
adapting Don Quixote]], I consider myself a fan of the genre, despite
its niche appeal.

One quick note before we go on.  It looks like /Jodorowsky's Dune/ has
hit Netflix on DVD, and seems a likely candidate to be available for
streaming.  So you can check it out for yourself to see if you agree
with my take.

<!--more-->

** Pitching
Jodorowsky looks back, with good-natured humor, on a massively
overambitious project for its time.  Aside from the amazing concept
art and avant-garde stylings, I took away two messages from the
documentary that I would like to share.  The first deals with the art
of pitching your ideas and the second with locating oneself in close
to proximity to the best and the brightest potential collaborators.

Jodorowsky set out to create a huge book--more of a cinder block.
It's probably what we could call a design bible today, which would be
delivered to production companies in order to secure funding.  By
creating a book of storyboards and character designs, Jodorowsky
wanted to show that the project was large in scope but feasible,
because it had been so intricately planned.

Jodorowsky reached out to a variety of concept artists to help with
the design of the movie.  To visual and technical artists, Jodorowsky
made impassioned pitches, claiming that they would become "spiritual
warriors" for their collective vision, and implored them to come live
and work (for little or no pay) in Paris.

What stands out is the strength of Jodorowsky's pitch.  At a time when
artists like [[http://www.chrisfossart.com/][Chris Foss]], [[http://en.wikipedia.org/wiki/Jean_Giraud][Moebius]], and [[http://www.hrgiger.com/][H.R. Giger]] were each becoming
established in their own rights, Jodorowsky was able, through the
sheer strength of an imagined story, to convince them to devote years
of effort to the project.  That takes a lot of gumption.  It didn't
hurt that Jodorowsky had a strong track record of visually and
thematically impressive avant-garde cinema.  Even still, Jodorowsky is
great at selling the idea, and that is something that game designers
must do, to communicate ideas to others in order to capitalize on the
individual talents and assemble a great team.

** Placement
The second message I took away deals with putting yourself into the
right place at the right time.  It's also about leveraging that
placement to connect and collaborate.

The documentary showed a curious problem of the movie's mid-Seventies
inception.  How do you find people to collaborate with, or even people
at all, before the Internet?

The solution: go to Paris.  That's where all the intelligentsia
congregate.  This was more or less true for several hundred years
before the Internet.

If you want [[http://en.wikipedia.org/wiki/Salvador_Dal%25C3%25AD][Salvador Dali]] in your movie, playing the [[http://dune.wikia.com/wiki/Padishah_Emperor][Emperor of the
Known Universe]], go to Paris and you'll probably run into Dali.

Now we all live in our decentralized [[http://en.wikipedia.org/wiki/Temporary_Autonomous_Zone][temporary autonomous zones]].  But
for as much as they can fragment, social media have the ability to
connect disparate artists and thinkers.

I think that Twitter is a platform that serves as a modern Paris, for
like-minded people to seek each other out and communicate.  Go
congregate with the intelligentsia and let your ideas speak for
themselves.  Hit me up on the proverbial tweets, and let me hear your
ideas and pitches.  I'm constantly working on mine--writing here,
trying to refine my skills.  Maybe we are both looking for the talents
that we can provide.

* Space Is Read                                                     :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
Space Is Red, a #spacecowboygamejam entry by @todluk made me think
about interactivity in visual novels as a genre and media at large.

- game
- review
- mechanics
- design

[[http://tdlk.itch.io/space-is-red][Space Is Red]] is not so much a game as it is a visual novel.  Out of
the games I tried from the [[http://itch.io/jam/space-cowboy-jam][#spacecowboygamejam]], it's one that sticks
with me.

On the spectrum of play, these sorts of games are loosely analogous to
Choose Your Own Adventure books.  Just as a Choose Your Own Adventure
book expects the player to turn to a given page according to the rules
laid out at the bottom of the pages to proceed in a consistent,
logical fashion, the tropes of a visual novel require the player to
interact with the game in order for the story to proceed.  A novel
will proceed with the only 'player' interaction consisting of turning
to the next page.  I'm oversimplifying the difference between /real
choices/, as I would argue, Choose Your Own Adventure Books allow, and
/mere interactivity/, like turning the page of a novel, but you get
what I mean.

Visual novels can have real choices and interactivity.  In this case,
I'd argue that Space Is Red is only interactive.  There are no real
choices, short of figuring out the next bit to tap on in order to move
the story along.  For me, it's the music that makes the experience gel
as something more than an animated e-book.

I don't mean to be presumptuous in my analysis of Space Is Red's
gameplay, don't get me wrong.  I'm not interested in arguments about
merit simply based on A *is* a game but B *isn't*, so A is better.  I
just think it's important to think about these sorts of things when
considering the underlying design.

I left the game looping [[https://soundcloud.com/postpre][PostPre's]] driving soundtrack for 15 minutes,
even though my first play-through lasted only 2 or 3.  Maybe that's
the benefit of interactivity and choices, to extend and prolong the
mindshare of some experience or product with the player.  I don't
necessarily mean that in a cynical way, although the typical model of
play can be subverted for more manipulative means (and, of course, it
is!).

For me, Space Is Red hit all the right notes and left me with
something to think about.  That is what I call a successful gamejam
game.  You can see Space Is Red and the other #spacecowboygamejam
entries [[http://itch.io/jam/space-cowboy-jam][here]].  If you're interested in learning more about Space Is
Red's creator [[http://toddluke.com/][Todd Luke]], you can find an interview [[http://www.gamasutra.com/blogs/TalhaKaya/20140711/220825/Finding_Beauty_in_Imperfection_Interview_with_Todd_Luke.php][here]].

* Static and Dynamic Colliders in Unity                             :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
Summarizing what I've learned about Colliders in Unity based on a
tutorial by @clapollo.

- Unity
- mechanics

According to the [[http://www.raywenderlich.com/70344/unity-2d-tutorial-physics-and-screen-sizes][Ray Wenderlich Unity 2D tutorial]] by [[http://www.raywenderlich.com/u/clapollo][Christopher
LaPollo]], Unity's physics engine builds a simulation based on the
[[http://docs.unity3d.com/Manual/CollidersOverview.html][Colliders]] present in a scene.  If some those =Colliders= are declared
to be =static=, then the entire simulation is rebuilt when those
colliders move.  Of course, rebuilding a physics simulation when it's
unnecessary is inefficient.  By declaring objects to have =dynamic=
=Colliders=, the physics engine does not have to rebuild the
simulation at runtime, that is to say when the game is running.

As with a lot of things in Unity, it is not immediately apparent how
you should go about declaring a collider to be =static= or =dynamic=.
It would be great if there were just a checkbox in the =Collider=
component.  But there isn't.  It appears that there are some complex
things going on under the hood that preclude a simple declaration.

By default a =GameObject= with a =Collider= component attached is
treated as =static= by Unity's physics engine.  This would work for a
non-moving wall or impassable bit of scenery, but for moving objects
like enemies we need to mark them as =dynamic=.  In order for a
=GameObject='s =Collider= to qualify as =dynamic= it requires a
[[http://docs.unity3d.com/Manual/class-Rigidbody.html][=Rigidbody= component]].  If you don't want the normal features of the
=Rigidbody=, i.e. conferring control of the =GameObject='s position to
the physics system, then you can check the =Is Kinematic= checkbox.  A
kinematic object's position is under the control of the attached
scripts, rather than the physics system.

One other trick from the [[http://www.raywenderlich.com/70344/unity-2d-tutorial-physics-and-screen-sizes][tutorial]] is to set the =Collider= component's
=isTrigger= property to =true=.  This prevents the =Collider= from
being treated as a solid object in the physics simulation, which could
lead to unintended bumping and pushing among various =Colliders= in a
scene.

* Persistent Data in Unity                                          :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
I'm interested in having some data remain available, even though I'm
switching Scenes in Unity.

- Unity3d
- design
- C#

I'm interested in having some data remain available, even though I'm
switching Scenes in Unity.  In other words, I want this data to remain
persistent.  As you'll see below I was tempted to use =PlayerPrefs= to
store the data, but, according to [[https://www.youtube.com/watch?v%3DJ6FfcJpbPXE][this Unity Live Training on Data
Persistence]], =PlayerPrefs= is not the best way to make data persist
over multiple Scenes.  =PlayerPrefs= is an okay place to store
non-critical data, like the audio volume, window size, full-screen
state--you know preferences.  I'll go ahead and show what I believe to
be the correct way to store persistent data before talking about
=PlayerPrefs= later.

** Persistent data
To safely and reliably store persistent data, the Unity tutorials
suggest that you need to assign a "kinda" Singleton design patterny
script to an empty =GameObject= that will persist across Scenes.

#+BEGIN_SRC csharp
  using UnityEngine;
  using System.Collections;

  public class GameControl: MonoBehaviour {
    public static GameControl control;

    public float health;
    public float experience;

    void Awake() {
      if(control == null){
        DontDestroyOnLoad(gameObject);
        control = this;
      } else if(control != this) {
        // There can be only one!
        Destroy(gameObject);
      }
    }
  }

#+END_SRC

The =static= reference means that we can just access the values in the
=GameControl= script.

** How to access data in the GameController.
#+BEGIN_SRC csharp
  GameController.control.health = 100;

#+END_SRC

** Writing persistent data to a binary file
The persistent data that's under the control of the =GameController=
is perfectly happy hanging out when your application is running.  It
will persist between Scenes when other data is wiped out by Unity's
garbage collection.  But what if you want to maintain persistent data
when the application is closed.

Ah hah!  Finally, an answer to my nagging question about writing
persistent data to plain text files, like =PlayerPrefs= or simply a
file in a local directory.  Wouldn't a player be able to modify the
data?

Enter the binary format:

#+BEGIN_SRC csharp
  // Add two more libraries
  using System;
  using System.Runtime.Serialzation.Formatters.Binary;

#+END_SRC

Where do we save it?  The persistent data path:
=Application.persistentDataPath=.  We'll need one more library to do
some input and output to files:

#+BEGIN_SRC csharp
  // Requires one more library and we're ready to get cooking with some
  // methods
  using System.IO;

  public void Save() {
    BinaryFormatter bf = new BinaryFormatter();
    FileStream file = File.Open(Application.persistentDataPath + "/gameInfo.dat",
                                FileMode.Open);

    PlayerData data = new PlayerData();
    data.experiencePoints = experiencePoints;
    data.playerLevel = playerLevel;

    bf.Serialize(file, data);
    file.Close();
  }

  public void Load() {
    if(File.Exists(Application.persistentDataPath + "/gameInfo.dat")) {
      BinaryFormatter bf = new BinaryFormatter();
      FileStream file = File.Open(Application.persistentDataPath + "/gameInfo.dat",
                                  FileMode.Open);
      PlayerData data = (PlayerData)bf.Deserialize(file);
      file.Close();

      experiencePoints = data.experiencePoints;
      playerLevel = data.playerLevel;
    }
  }

#+END_SRC

Now we need to make the =PlayerData= class that we will tag with
=[Serializable]= so Unity will know that we want to write this to a
binary file at some point in the future.  This affects how Unity
stores the data internally, but it doesn't really change how we
interact with it.

#+BEGIN_SRC csharp
  [Serializable]
  class PlayerData {
    // TODO: see about making gets and sets.
    // TODO: automate the generation of this data structure.  See:
    // http://forums.devx.com/showthread.php?170650-How-to-dynamically-add-property-to

    // Add new variables for loading and saving here.
    public int experiencePoints;
    public int playerLevel;
  }

#+END_SRC

After writing up this article, I came across an older, possibly better
article on Unity Gems.  Please check out that write-up and all of the
great content on the site.  [[http://unitygems.com/saving-data-1-remember-me/]]

My full =GameController= data persistence Singleton script is
available in [[https://gist.github.com/zerosalife/6f6e811b27761d287ea5][this gist]].

So, that's the best solution I've found to date for having persistent
data across scenes and play sessions.  I've included my rough first
stabs at the problem below.  Keep in mind that anything following this
point is just included just to make my notes available, and it's not
meant to be a guide.

** Old notes: PlayerPrefs
In order to have persistent data between Scenes, I was previously
going to make use of Unity's =PlayerPrefs=, a class that implements
persistent data storage for =ints=, =floats=, and =strings=.  Notably
absent are useful data types like =Vector3= to maintain, for example,
=transform= data between Scenes.  Some of the solutions I found may
still be helpful for more storing complex data types in =PlayerPrefs=.

One potential solution is to simply set a =GameObject='s
=transform.position= to some constant =Vector3= value in the freshly
loaded Scene.  While this is possible in some applications, I'm going
to assume that eventually you'll want to transfer some dynamic
position information between Scenes.

Here are two potentially helpful sources to achieve this:

[[http://www.theappguruz.com/tutorial/store-vector3-data-easily-using-json-parsing-possible-using-playerprefs/]],
based on work by Mehta Dakshil.   While JSON parsing looks
interesting, it requires an external =.dll=, =JsonFx.Json.dll=.  And
I'm not interested in external dependencies here.  It may work great
for you.

[[http://wiki.unity3d.com/index.php?title%3DArrayPrefs][http://wiki.unity3d.com/index.php?title=ArrayPrefs]], based on work by
Mario Madureiera Fontes and Daniel P. Rossi.  (Note: since
=GetVector3= depends on =GetFloatArray=, there could be some error due
to =GetFloatArray= casting strings to floats.  But the error
introduce in the resulting =Vector3= is unlikely to be noticeable.)

Actually, see a more updated version here:
[[http://wiki.unity3d.com/index.php/ArrayPrefs2]], which is based on work
by Eric Haines.

According to the text, the script should be placed in the =Standard
Assets= directory, so that it can be accessed from both =C#= and =Boo=
scripts.

To see a faster implementation for mobile devices, where the data to
be saved in PlayerPrefs is cached in memory, see:
[[http://www.previewlabs.com/writing-playerprefs-fast/]].

* One Tap Quest: a pachinko RPG                                     :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
A review of One Tap Quest, a game by @shimage_net

- design
- mechanics
- review
- game

[[http://shimage.net/one-tap-quest/]]

I recently played /[[http://shimage.net/one-tap-quest/][One Tap Quest]]/, a game in which you tap to place an
RPG character who marches upward, gaining levels by bumping into
enemies, to tackle bigger and badder foes.  What's interesting to me,
if you'll bear with me, is that this is a game that amounts to a
pachinko RPG.  I'll start by talking about what I liked about /One Tap
Quest/.  [[http://zerosalife.github.io/blog/2014/08/23/designing-a-pachinko-rpg/][Next week]], I'll get into what I mean by a pachinko RPG.

It's rare that I come to a new gameplay experience completely naive
these days. The only way I feel I can effectively spend my time with a
game is typically after having read some sort of guide because my time
is extremely limited.

What the /One Tap Quest/ accomplished so well for me was going from
barely being able to read the screen to beating the game over the
course of 10 minutes.  Admittedly it's a very short and simple game.
But I felt a sense of accomplishment every time my understanding of
the mechanics grew.

Oh, these little critters are stronger than these other little
critters, better avoid them.  Oh these are power ups, not critters,
better aim for them.  With these skills under my belt it only took a
little luck to send my character on a march toward victory.

The place where this idea shines is in the power-ups.  I'm not sure
whether I've encountered all of them, but they range from simple buffs
that grant free levels to expanding your party into a 3-character-wide
enemy-wrecking plow.  For what it's worth, the power-ups were deep
enough to keep me interested over 10 minutes of gameplay.  If I were
going to engage with this experience over a longer term, I would
suggest adding more depth to the power-ups and the enemies, which are
as far as I can tell simply harder to kill, and possibly bigger,
versions of the puny slimes that move back and forth.  Some of the
enemies have variations on the simple random walk style movement of
the slimes, but a richer variety of movement and behavior from the
enemies would increase the required skill to play the game, and add to
replayability.

I think the power-up mechanics add a level of depth and strategy to
what otherwise would be a hands-off luck-of-the-draw game.  By aiming
for power-ups you have a sense of agency in the action, just like
turning the knob controls the velocity at which pachinko balls are
launched.  It makes cheering for your lemming-like character(s) more
enjoyable: if they could just get a little closer and grab the
power-up you aimed at--no.  Nope, they died.

Go give this great little game a try.  Hopefully it will pique your
interest like it piqued mine.  Quirky variations on RPGs seem to be
part of the /Zeitgeist/, with /[[http://www.atlus.com/rollers/][Rollers of the Realm]]/ and /[[http://zh.monst.wikia.com/wiki/Monster_Strike_%E7%BB%B4%E5%9F%BA][Monster
Strike]]/ combining pinball and console genre gameplay with the
potential synergy /[[http://en.wikipedia.org/wiki/Sonic_the_Hedgehog_Spinball][Sonic Spinball]]/ never achieved.

* Designing a pachinko RPG                                          :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- design
- mechanics

What would make a pachinko RPG?  [[http://zerosalife.github.io/blog/2014/08/16/one-tap-quest-a-pachinko-rpg/][Last week]], I wrote about how I'm sort
of enamored with /[[http://shimage.net/one-tap-quest/][One Tap Quest's]]/ tap-and-let-them-go interaction,
which I think mirrors the play-style of pachinko.  In pachinko, you
have some control over launching the little metal balls, but once
they're in play, they're on their own.  This mechanism stands in
contrast to pinball, where you interact with a single or multiple
pinballs with the paddles, and cue sports (especially bumper pool),
where you launch a billiard ball repeatedly with a cue.

As I said last week, I think the basic gameplay in /One Tap Quest/ is
interesting enough for a 10-minute session.  But I'd like to take this
concept and run with it, if you'll let me.  What follows are some
concepts that, I think, extend the /One Tap Quest/ pachinko RPG model.

** Player characters
As I conceive of it, a pachinko RPG is sort of like /[[http://en.wikipedia.org/wiki/The_Wonderful_101][Wonderful 101]]/.
A changing stock of characters go up against an overwhelming group of
enemies.  Just like pachinko rewards players with more pachinko balls,
worth real money, a pachinko RPG would need to reward the player with
ever more--and ever more interesting--characters to bolster the stock
and the player's score.  A given character can gain levels when
unleashed on the board, a little more unique than generic pachinko
balls.  Perhaps characters added to the stock later in the game come
at a higher starting level, sort of like characters recruited in later
sections of /[[http://en.wikipedia.org/wiki/Final_Fantasy_Tactics][Final Fantasy Tactics]]/ or /[[http://en.wikipedia.org/wiki/Ogre_Battle:_The_March_of_the_Black_Queen][Ogre Battle]]/.

** Environment
Procedurally generated "boards" could make a game interesting.
Presenting a variable layout of enemies, terrain, and power-ups can
challenge players who are already familiar with the basic gameplay.  I
don't think that using roguelike elements, such as varying the effects
of power-ups like potions in /[[http://www.nethack.org/][Nethack]]/ would work very well.  However,
incorporating a quest or narrative adventure framework above the level
of boards could be engaging.  Here I'm using the word level to refer
to a conceptual level of hierarchical relationships, rather than an
experience level or a stage in a game.  I'm talking about the approach
that /[[http://www.ftlgame.com/][FTL]]/ and the built-in 3DS RPG, /[[http://nintendo.wikia.com/wiki/Find_Mii_(3DS)][Find Mii]]/, take.  Each "board"
is a gameplay experience in itself, and the "boards" have a larger (in
terms of conceptual scope) map that ties them together and gives the
player a sense of progression or quest completion.

Obstacles on the "boards" that impair the movement of either player
characters or enemies could add another layer of strategy.  In effect
these terrain elements could construct a puzzle that they player has
to solve by starting their player character down the correct "lane",
and being lucky enough to gain the required number of levels to beat
the "board".

This approach to using obstacles to make puzzles would require some
clever level design.  A puzzle where there is a single right way to
complete it would be boring, once you find it you simply wait until
you get the required number of levels through sheer luck--pointless
repetition without interesting choices.  However puzzles where there
are (or seem to be) multiple routes to complete the "board" can be
interesting.

** Interaction
I think it might be cool to maintain control over the character after
you launch.  In a sense you would be an invisible hand, maintaining
control over the pachinko ball as it rolls through the machine.  This
game would be sort of like an inverted bullet-hell shoot 'em up.
Rather than dodging enemies, you would guide your character toward
them.  It is probably worth iterating on this mechanic, because
/[[http://zh.monst.wikia.com/wiki/Monster_Strike_%E7%BB%B4%E5%9F%BA][Monster Strike]]/ seems to use it with relative success.  But I think
maintaining control over the character would block out the
cheering-your-character-on-from-the-sidelines aspect that I enjoyed in
One Tap Quest, and would like to emulate.

** Enemies
As I mentioned previously, added depth of enemy behavior and power-ups
could prolong the experience.  I'm not sure exactly what this would
entail at this point, but I think iterating on the basic concepts laid
out in /One Tap Quest/ could lead to some interesting variation.  That
sentence pretty much sums up my take on what would make an interesting
pachinko RPG.  Thanks for letting me spew some thoughts that are
little more than design notes.

*  Automating blog deployment with Octopress                        :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- tools
- Octopress
- Make
- Makefile

Based on Kevin van Zonneveld's ([[https://twitter.com/kvz][@kvz]]) [[http://kvz.io/blog/2012/09/25/blog-with-octopress/][article]] on setting up Octopress,
I've adapted a =Makefile= to make building my blog easier... with
[[http://www.gnu.org/software/make/][make]].  The following =Makefile= allows me to build and deploy my blog
by typing =make blog= at the command prompt.

<!--more-->

#+BEGIN_SRC makefile
  all: blog

  preview:
          bundle exec rake generate && bundle exec rake preview

  blog:
          git pull && \
          bundle install && \
          bundle exec rake integrate && \
          bundle exec rake generate && \
          bundle exec rake deploy && \
          git add .; \
          git commit -am "blog update $$(date +%Y-%m-%d)"; \
          git push origin source

  .PHONY: blog                   # Force blog to run regardless of the changes to the files.

#+END_SRC
** Additional Notes
*** rake build didn't work for me
I think this is because I haven't written any tasks that use =rake
build=.
*** Remote for the source of my blog
I push the source code of my blog to a branch named =source= rather
than =master=.
*** The percent symbol screwed everything up
Not sure exactly why, but including the =%= after blog on the line
=.PHONY: blog%= gave me an error saying =make: `blog' is up to date.=.
Removing the =%= allowed me to run =make blog= as expected.

* Text encoding: further improvements to using git for Unity projects :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- Unity
- Unity3D
- tools
- git
- version control

Brief note here.  Following a Summer of travel and visitors, posts
should be returning to a more regular schedule soon.  It's great when
I can post here regularly, but I'm not going to get bent out of shape
when I have other commitments.  So, if there are unannounced,
prolonged absences, you can assume that it has something to do with
spending my weekends traveling or socializing, which is undoubtedly a
good thing.

I recently came across [[http://stackoverflow.com/questions/18225126/how-to-use-git-for-unity3d-source-control][this stackoverflow answer]] introducing git for
version control in Unity projects.  Note, the question specifically
refers to Unity3D, but this will work for Unity2D as well.

I've [[http://zerosalife.github.io/blog/2014/05/17/dot-gitignore-for-unity-projects/][already written]] about setting up a =.gitignore= file.  Here are
some steps you can take to optimize the way Unity stores information,
so git can track it.

Git was built to work by =diffing= large files containing text,
specifically code.  Git works just fine with binary files, but it
defaults to a less efficient method to =diff= those files, which can
result in bloated git repositories.  Nobody wants a bloated git
repository.

Here I'll summarize two of the steps from the answer that I found
helpful, using Unity v4.5+.  It's worth noting that these steps will
increase the size of your project--although I'm unsure whether they
affect the size of any deployed binaries.

So if the size of the project on your development machine is a
critical issue, you may want to think about keeping the default
settings.  The project I tried the steps on went from 86.7 MB on disk
(including its bloated git repository) to 86.9 MB, so it's probably
not going to create an appreciable change in most projects.

** Switch to Visible Meta Files
Switch to =Visible Meta Files= in the Edit → Project Settings → Editor
→ Version Control Mode Menu.

If the =Visible Meta Files= option is turned on, the =.meta= files
associated with parts of your project will have textual information
rather than binary.

** Switch to Force Text
Switch to =Force Text= in the Edit → Project Settings → Editor
→ Version Control Menu.

If you choose =Force Text= this will cause Unity to use text to
serialize assets that it would normally store as binary files.

** Save
Save the Scene and project for these changes to take effect.

* Do ethics matter in game design?                                  :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- design
- ethics

I reached out on twitter in a somewhat misguided appeal to #gamedev,
asking whether devs consider ethics when designing games.  Apparently
there is so much traffic on #gamedev that any tweet will be lost in a
deluge of announcements and automated bot retweets.  Oh well, I
thought, I'll go it alone.  Given the [[http://bits.blogs.nytimes.com/2014/10/02/intel-pulls-ads-from-site-after-gamergate-boycott/][recent tone in the communities
surrounding games]], I feel the need to examine this question: *Do
ethics matter in game design?*

<!--more-->

I'm interested in the question of whether game designers should
consider the ethical and moral implications of the game, product, or
artifact that they are creating.

Full disclosure: I should state here that I'm not smart enough of or
trained well enough to think about these sorts of things.  So I've
appealed to [[http://innovate.ucsb.edu/wp-content/uploads/2010/02/Winner-Do-Artifacts-Have-Politics-1980.pdf][an article by Langdon Winner called /Do Artifacts Have
Politics?/]], which I will summarize here.

My overall thesis is that the things that game designers create carry
intentional messages that should reflect the morals and ethics with
which the game designers are comfortable.  In other words, I'm arguing
that game design should be conducted in an ethical manner.  I don't
always think that this should necessarily *restrict* design, but I do
think this easily neglected aspect of design matters.

Let's be clear here, art and artifacts that are designed are still
art, and I'm not advocating for some sort of restriction on artistic
ideaspace and expression.  What I am trying to do is increase
awareness, without necessarily coming to prescriptive conclusions.

** Do Artifacts Have Politics?
According to the article "there is no idea more provocative than the
notion that technical things have political qualities."  The main
focus of the article is whether "machines, structures, and systems of
modern material culture," the *artifacts* in question, should be
"judged not only for their contributions of efficiency and
productivity...but also for the ways in which they can embody specific
forms of power and authority."  Winner deals primarily with the
environmental and public health issues from rapid modernization and
industrialization in the 20th century, challenging the assumption that
development and innovation (especially that of scientific
investigation) will drive inexorably toward improved circumstance.

I'm not as interested in the focus of the article as I am in the
thesis it applies.  I'd like to argue, with help from Langdon Winner,
that games, objects of art designed by game designers, do embody, and
in fact reinforce, specific types of power and authority.  As far as
the prescriptive moral obligations I outlined in my earlier thesis
statement, we'll have to see about that when we get there.  Offering
guidelines may be out of the scope of this blog post.

Before you press the submit button on a hasty naysaying screed, Winner
acknowledges, "We all know that people have politics, not things."
Although, I would argue that in the age of Citizens United, fewer
people would be so quick to judge the contention that constructed
objects have politics as mistaken.

Winner highlights an overt case of expressing politics through
technological systems in which the master builder of roads in a New
York city designed overpasses that were too low to allow public
transit buses to pass.  Winner cites evidence from a biography of the
designer, indicating that these designs were predicated on
"social-class bias and racial prejudice."  Here we see an example of a
technology that on the surface appears designed, albeit poorly, in a
neutral manner.  However, when the underlying motivations are
revealed, it becomes clear that the design technological system had an
express political purpose and political consequences.

So, it's clear that any technological system can, in Winner's words,
"be used in ways that enhance the power, authority, and privilege of
some over others".  These underlying politics of the system can
produce a particular set of consequences without any particular user
imposing a set of ideals through the application of the technology.
Winner sums up the need to consider these underlying politics well in
the following excerpt:

#+BEGIN_QUOTE
If our moral and political language for evaluating technology includes
only categories having to do with tools and uses, if it does not
include attention to the meaning of the designs and arrangements of
our artifacts, then we will be blinded to much that is intellectually
and practically crucial.
#+END_QUOTE

** Consequences of design
When creating a technological thing, Winner identifies two sets of
choices that confront the designer with regard to how the technology
"can affect the relative distribution of power, authority, and
privilege in a community".  First is simply do or don't: will you
design the thing or won't you?  Second, how will you design specific
aspects of the technology?

Winner highlights specific technologies that arguably may have been
better for the social fabric had they not been designed.  It's
difficult to support Winner's argument here in a general sense, but I
see one important lesson for the designer.  Winner talks about
criticisms about designers attempting to design politically just
systems as idealistic: "Whatever claims one may wish to make on behalf
of liberty, justice, or equality can be immediately neutralized when
confronted with arguments to the effect: 'Fine, but that's no way to
run a railroad' (or a steel mill, or airline, or communications
system, and so on)."  I'll add here, superfluously, that of course
this applies to video games as well.

** Own your art
Like Winner, I hesitate to draw any hard and fast prescriptive
conclusions on what should or shouldn't be designed.  There will
always be subjective opinion on the political nature of the things
that game designers design.

The important thing is for you as the designer of a thing to be aware
of the choices, implicit and explicit, that surround your creation.
That sounds kind of [[https://www.youtube.com/watch?v%3Dxos2MnVxe-c][Frankenstein-ish]], doesn't it?  What I mean is, *own
your art*.  Design things that you feel comfortable with.

When the designers of [[http://kotaku.com/ubisoft-responds-to-assassins-creed-female-character-co-1589413130][a triple-A game]] say they can't implement a
female 3d model for the main character, they avow a political position
in the design of their technological thing.  They should own up to the
consequences of that design choice, including all of the ethical and
political ramifications.

* Betting in Super Smash Bros. spectator mode                       :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
Betting strategy in Super Smash Bros. #3DS #SSB4 spectator mode.

- 3DS
- Super Smash Bros.

Today I'd like to look at how to bet in the spectatore mode of /Super
Smash Bros. on 3DS/.  I'm surprised by how much I enjoy /Super Smash
Bros.'/ spectator mode.  It adds the thrill of a horse race alongside
an already great game.  Here are some of the betting strategies I've
found useful:

- Always bet the full amount
- Always bet your earnings
- Bet the odds
- Don't be afraid to take your money and run
- Know the metagame
- Know the good players, you may see them again.
- Set limits
- Trust your judgment

<!--more-->

** Always bet the full amount
Any winnings will offset your losses from betting the full amount.
You stand to multiply your winnings if you bet your earnings.  And
the larger your initial bet, the larger your potential winnngs will be
at the end of three rounds.

** Always bet your earnings
Betting your earnings allows you to place a bet that is larger than
the normal cap of 100 gold.  Keep in mind that you only stand to lose
your initial 100 gold bet from your cash reserve, so this is a pretty
good deal.

I tend to play the odds more conservatively when betting my earnings,
but I'm not sure it's completely necessary.  Again, you only stand to
lose 100 from your cash reserves, so there's little risk associated
with these bets.

** Bet the odds
The payout odds shown next to a gold coin above the character
portraits are there for a reason.  The odds vary from 2.0 to 10.0,
meaning that you will receive 200 to 1000 gold payout for a 100 gold
bet.  The favored player, that is to say the player with the lowest
payout multiplier, is likely to win a given match.

** Don't be afraid to take your money and run
It's a good idea to bet your earnings, but you shouldn't let that
persuade you to make a bad bet.  If you're on a winning streak and you
come across a match with no obvious good bet, hit B to take your money
and run.  You can always bet on a different match.  It's not worth
risking all of the winnings from a streak on a relatively even match.
I've lost a lot of gold this way, not from my reserve gold, mind you,
but still a lot of winnings.

** Know the metagame
The game just came out, so the metagame is likely still forming.  But
there is still useful information available.  For example consider
Conquest, the in-game periodic match up between characters recording
the win-loss record of nearly everyone who plays them.  Character
choice may trump the odds of there is a significant influence of the
meta game. In other words, some characters are just OP especially
relative to specific other characters.  The Conquest match ups are
good indicators that certain characters are OP compared to others.

For the record, Duck Hunt seems pretty OP.

*** Know the good players, you may see them again

Pay attention to the names of the players in the matches you bet on.
You may see the same player, and even the same match ups, popping up
again and again.  If a player seems to be highly skilled, go with that
player on subsequent matches.

** Set limits
Set a loss floor and a win ceiling.  Take breaks when you reach those
limits.  [[http://www.ncbi.nlm.nih.gov/pubmed/21915653][Fatigue can affect your judgment]].  (Don't worry, I don't have
access to the Journal of Gambling Studies either--the abstract sums up
what you need to know).  And anyway, it's good to keep a nestegg so
you have a bankroll for your future bets.

** Trust your judgment

If you have a hunch that goes against the odds that the game presents
you go for it.  If you're following the rule of setting limits, your
judgment should be fresh and not fatigued, and you will not go too
deep into the hole when taking risks.  The only time when I would not
advocate risky bets is when continuing bets--there's too much to lose
on a risky bet.

** Conclusion
These are just my thoughts on betting strategy in /Super Smash
Bros. for 3DS/.  These strategies have worked for me, but of course,
your mileage may vary.

I'm interested in starting a dialog about these and other strategies
because I find the spectator mode deeply compelling.  So if you agree,
disagree, or have other strategies that work for you, feel free to
contact me either by leaving a comment on the post or hitting me up on
twitter.

* Play balance for party vs in-depth fighting games                 :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
I look at play balance in #TowerFall and #SmashBros discussions by
@MattThorson @DamianSommer @Sonic9jct and @whatisian among others

- TowerFall
- Super Smash Bros.
- mechanics
- design
- balance


Here I'm drawing a comparison between games that are subjectively
perceived as party games and games that are more in-depth.  I'm
avoiding using loaded terms like casual and hardcore, but I think the
distinction is likely the same.  Both types of games can be complex,
but subtle balancing issues can affect the subjective sense of fun
when playing these games.

For discussion I'm going to focus on relatively advanced moves in
/[[http://www.smashbros.com][Super Smash Bros.]]/ and /[[http://www.towerfall-game.com/][TowerFall]]/: L-canceling and dodge canceling,
respectively.  I was inspired to examine this balance issue by a
recent tweet by /TowerFall/ creator, and, in the interest of full
disclosure, my close personal 3DS friend, [[https://twitter.com/MattThorson][@MattThorson]].

<blockquote class="twitter-tweet" lang="en"><p>L-cancelling was actually my model of what to avoid with dodge cancelling in TowerFall</p>&mdash; Matt Thorson (@MattThorson) <a href="[[https://twitter.com/MattThorson/status/519576823533801472]]">October 7, 2014</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<!--more-->

Thorson previously pointed out an interesting [[https://twitter.com/DamianSommer/status/519537228582633473][discussion]] on the
mechanic of L-canceling by [[https://twitter.com/DamianSommer/status/519537228582633473][@DamianSommer]] among others. Sommer wants to
focus on how the L-canceling mechanic reflects the design intent of
the creators of /Super Smash Bros./

<blockquote class="twitter-tweet" lang="en"><p>I&#39;m of the opinion that it creates an unnecessary disparity between low and high-skill players because there&#39;s no reason to not L-cancel.</p>&mdash; Demon Summoner (@DamianSommer) <a href="https://twitter.com/DamianSommer/status/519537749754658816">October 7, 2014</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

[[https://twitter.com/Sonic9jct][@Sonic9jct]] highlights the dichotomy that I am exploring here.

<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p><a href="https://twitter.com/DamianSommer">@DamianSommer</a> I always imagined the first 3 Smashes were designed and balanced as party games, especially Brawl, as opposed to fighting...</p>&mdash; John-Chocula Holmes (@Sonic9jct) <a href="https://twitter.com/Sonic9jct/status/519538190764343296">October 7, 2014</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

[[http://supersmashbros.wikia.com/wiki/L-canceling][L-canceling]] requires extremely precise timing of inputs when the
character is in a particular state, you must press L within 6 frames
of landing on the ground while performing an [[http://supersmashbros.wikia.com/wiki/Aerial_attack][aerial attack]].  Since
/Super Smash Bros./ runs at 60 frames per second, this requires you to
press the button within 100 milliseconds of hitting the ground.  To
put this in perspective, the average human reaction time is about 250
milliseconds.

[[https://twitter.com/whatisian][@whatisian]] brilliantly captures the distinction in design that makes
this a more difficult, in-depth, technically demanding mechanic.  If
there is no drawback, then the execution of the L-cancel is
practically mandatory at high levels of play.

<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p><a href="https://twitter.com/DamianSommer">@DamianSommer</a> if L-Cancelling is never detrimental, then it&#39;s execution is a measure of dexterity, not cleverness.</p>&mdash; ❧ Demon Cider (@whatisian) <a href="https://twitter.com/whatisian/status/519555442012217344">October 7, 2014</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

Let's look at how this differs from [[http://steamcommunity.com/sharedfiles/filedetails/?id%3D250779585][dodge canceling]] in /TowerFall/ a
game that Thorson intentionally designed to be welcoming to new
players, while still keeping them competitive with skilled players.

Dodge canceling requires similarly herculean inputs to pull off, to
perform a dodge cancel you must press the dodge button a second time
after initiating a dodge maneuver.  The dodge lasts 367 milliseconds
or 22 frames at 60 fps.  This seems like a lot of time to perform the
dodge cancel compared to the scant 6 frames for an L-cancel, but
there's a catch.  In order to get the most momentum, to carry the most
speed through the dodge cancel, you must perform the move on exactly
the right frame.

Sounds pretty tough, right?  If you think this would require some
impressive technical skills to pull it off, you're right.  But there's
a catch, turning or firing from the dodge cancel reduces the
character's speed, making the character an easier target.

Thorson's mechanic provides a similar advantage to L-canceling with
the addition of the risk of failure.  Dodge cancels could allow the
player to zing around the level at will, firing arrows every which
way, but Thorson decided to introduce drawbacks for imprecise play
that create risks for more advanced players to put them closer to
parity with less skilled players.

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/then00b">@then00b</a> I wanted it to provide an advantage, but to also have risk associated with it, and I think it does :)</p>&mdash; Matt Thorson (@MattThorson) <a href="https://twitter.com/MattThorson/status/519634020561203200">October 7, 2014</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

These are just my thoughts on this interesting discussion.  I'm not a
high-level player of either of these games, so I may have missed some
of the subtleties to which Thorson or others refer.  If you think I'm
off the mark, or you just want to weigh in on the merits of designing
for "party" vs. "fighting" games, drop me a line in the comments or on
[[https://twitter.com/zerosalife][twitter]].

* Procjam                                                           :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
** Announcement on the blog
State intention to participate, coverage, possible hiccups.  Intend to
release at least one project on November 8th, and possibly, time
allowing a second on the 15th.  Intend to cover talks with writeups or
responses to follow up.  Also intend to cover entries with writeups or
responses.


Make things that make things: #procjam 2014.

A motivational post psyching myself up for #procjam.

- #procjam

I'm thrilled to announce that I'm going to participate in the
[[http://itch.io/jam/procjam][upcoming procedural game jam called
#procjam]].  #procjam is a global game jam and a live-streamed
conference in London focused on making things that make things. You
can keep up to date by following the jam tumblr
[[http://procjam.tumblr.com/][procjam.tumblr.com]]. There's already a [[http://procjam.tumblr.com/post/99689402659/procedural-generation-tutorials-getting-started][handy list of procedural
generation tutorials available on the tumblug]].

In addition to submitting one or two projects I've been working on,
I'd like to cover the content of the talks with perspective and
reactions, and to check out the contest entries after it's finished
[[http://zerosalife.github.io/blog/2014/07/26/space-is-read/][like I did for /Space Is Red/ from #spacecowboyjam]].

Needless to say this will be a month-long endeavor, what with my
weekly (ish) blogging schedule.  With one or two posts focused on
submissions, I think four blog posts may be conservative, so I'll keep
writing as long as I'm interested.

To make it easier to follow along, I'll tag up all the posts with the
#procjam category and I'll try to do the same for the tweet
announcements, even if it's out of style because the jam was weeks
ago.  That's how committed I am to making this happen.

If you get the sense that I'm trying to psych myself up for this, I
am.

The next couple of months will be very busy in my life.  I'll be
traveling and attending conferences, activities that have
traditionally consumed my precious blogging time like so many Frito
pies.

I may be setting the bar high, but if anything the purpose for aiming
high is success.  All too often I hear about jams in the middle when
everyone is tweeting out cool prototypes and in the thick of design,
or I'll hear about a jam when the contest is long over because someone
pointed out that the winning entry was amazing.  Through dumb luck and
exquisite taste in following [[https://twitter.com/mtrc][@mtrc on twitter]], I heard about this
gamejam with enough lead time to mark it on my calendar.

Even if I don't produce anything interesting or important, by gum, I'm
going to participate in and cover this gamejam.  I'm not going to let
another really cool gamejam slip under the radar.

** Procjam submission

* Patchwerk                                                         :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
Announcing Patchwerk: a quilt pattern generator.  #procjam

- procjam
- Clojure
- Quil

** Procjam updates
I've spent the week at a couple of major international conferences
sponsored to some degree by old dead-tree journals.  I was struck,
following last weekends' [[https://twitter.com/search?q%3Dprocjam][#procjam]] [[http://www.twitch.tv/procjam][talks]], by the lack of openness.
None of these talks are going to be made freely available.
Photography and recording is actively discouraged.  The official
conference hashtags, when provided, were silent or only used by those
in attendance.  While this exclusivity may generate profits for the
aforementioned dead-tree journals and give a leg up to those fortunate
enough to be able to attend these conferences, I find it ethically
reprehensible in the 21st century, given the tools that we have
available.

I'd like to once again thank [[https://twitter.com/mtrc][@mtrc]] for hosting /and streaming/
#procjam.  Because conference was made freely available, I was able to
interact with the attendees in a way that would be impossible if I was
trying to divine through twitter what was going on behind closed
doors.  I think this kind of openness can only generate more interest
and ideas, regardless of the field of study.

** Patchwerk
A [[https://github.com/quil/quil][Quil]] sketch designed to generate patterns for quilts.  The code is
[[https://github.com/zerosalife/patchwerk][available on github]].

[[https://github.com/zerosalife/patchwerk/blob/master/patchwerk-example.png][{% img center https://github.com/zerosalife/patchwerk/blob/master/patchwerk-example.png %}]]

<!--more-->

** What is Quil?
Quil is a port of [[http://processing.org][Processing]] to [[http://clojure.org/][Clojure]].

** Motivation
When I came across some interesting pictures of quilts, I was struck
by the regularity of the shapes used to construct them.  A quilt is
simply a grid of squares containing some pattern of simple shapes.  I
thought it would be interesting to have an algorithm generate the grid
(what I guess quilters probably call a pattern), so I set out to build
some functions in Quil to draw a few simple shapes that I identified
in the squares of the quilts and then to randomly draw them in a grid.

** How to model a quilt
Using the fundamental assumption I already stated: a quilt is just a
grid of squares.  My algorithm defines a =grid-width= and
=grid-height= along with a =square-size= in pixels that determine the
overall size of the quilt pattern to generate.  This allows you to
generate an arbitrary number of quilt squares of a certain size.

Each square contains a subgrid with a defined =sub-grid-width= and
=sub-grid-height=.  In retrospect, it would probably be better to
define one parameter because if the dimensions are not square,
everything will be screwed up.

I then define several basic drawing functions to fill the squares of
the grid.  The procedural generation's =draw= algorithm knows about
each of the drawing functions, called =pattern-funcs=, and picks one
of the =patterns= to draw each square of the grid.


** The drawing functions

The primary elements of the quilt squares that I wanted to replicate
were large squares, smaller checkers, triangles, and a mixed pattern
of small triangles with a square that I called "fish".

The squares (see the square second left from the top right) and the
smaller checkers (see quilt square fourth down from the top left) use
the same drawing function.  However, they differ in that they utilize
different helper functions return the correctly sized vertices and
support multiple calls for the smaller checkers.

The triangles (see square in the top right) use a lookup table,
=triangle-lookup-table=, to store information about the appropriate
"legs" for a triangle with a point in a given corner.  By using a
common syntax for the vertices, the =draw-triangle= algorithm can
share the vertex lookup algorithm with the square routines.

Then the culmination of my dastardly plan involves marrying a square
from the smaller checker function with flanking triangles, based on
the subgrid this time instead of the larger grid.  The result is a
pattern that looks like a fish to me (see quilt square in the top
left).  Because I built the abstract drawing functions, I simply have
to take care of the four directional possibilities and let the drawing
functions more fundamental handle the work.

** Future plans: toward Patchwerk 1.0.0
The project is in need of a major refactoring session, when I can find
the time.  I developed it in a single monolithic Clojure file for ease
of testing in the REPL.  It will be easier to maintain and understand
if I separate out the distinct functionalities into their own
namespaces.  The ones that come to mind are =patchwerk.grid= to handle
the generation of the grid, =patchwerk.patterns= to manage the drawing
functions, and =patchwerk.util= to house the helper functions.  I'd
also like to make it clear which functions use the =quil.core=
namespace instead of using =:refer :all=.

There is also [[https://github.com/quil/quil/wiki/Functional-mode-(fun-mode)][some interesting new functional middleware for Quil]].  It
provides a framework for you to separate out the mutable state from
your Quil functions so that you avoid side effects and can program
pure functions, in Processing's typically imperative syntax.  To get
this up and running, I imagine that I will have to represent the pixel
grid in the =state= map.

Eventually, and this is beyond the scope of 1.0.0, I'm intrigued by
the possibility of [[https://github.com/quil/quil/wiki/ClojureScript][porting this code over to Clojurescript]] and
creating a web-based version of the application.

* Procjam comedown                                                  :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- procjam
- procedural generation
- game
- design
- mechanics

Now that two weeks have passed (a geologic era in internet time), I'm
ready begin to look back on the [[https://twitter.com/hashtag/procjam][#procjam]] talks and the entries to the
jam that caught my eye.  I've been very busy lately working on my own
submissions [[http://zerosalife.github.io/blog/2014/11/08/insceptahdeckwu/][INSceptahdeckwu]] and [[http://zerosalife.github.io/blog/2014/11/15/patchwerk/][Patchwerk]], among other commitments, so
this is by no means an exhaustive look at everything in #procjam.

<!--more-->

Since I actually have no time at all to write a full retrospective,
I'll have to be brief.  This post will have to serve as a collection
of links and notes until I get a chance to look back in detail.  It's
by no means complete, as I'm still looking over all of the great
entries to #procjam.  I enjoyed the interactions with the speakers and
participants.  Unfortunately other commitments may occupy my time
through the end of the year, so don't worry if the blogging is
intermittent.  I'll revisit the #procjam talks and the submissions
when I find time.

** Great ideas
[[https://twitter.com/PNJeffries/status/531592288733261824]]

[[https://twitter.com/redblobgames/status/527485845616340992]]

[[https://twitter.com/mtthwcmpbll/status/527881936178778113]]

[[https://twitter.com/DragonXVI/status/531078933161476096/photo/1]]

[[https://twitter.com/TomNullpointer/status/531108417096916992]]

[[http://chrismwaite.github.io/procjam/]]

[[https://github.com/chrismwaite/procjam/blob/gh-pages/app.js]]

[[http://renderingpipeline.com/2013/01/adding-analog-inputs-to-your-graphics-app/]]

[[https://github.com/keijiro/unity-midi-input]]

[[http://cgaudino.itch.io/tailgunner]]

[[https://github.com/civilframe/node-spacegame-ship-gen]]

[[http://jctwood.itch.io/dungen]]

** Good tutorials
Some tutorials I came across during the jam:

[[http://procjam.tumblr.com/post/99689402659/procedural-generation-tutorials-getting-started?utm_content%3Dbuffera3b27&utm_medium%3Dsocial&utm_source%3Dtwitter.com&utm_campaign%3Dbuffer][http://procjam.tumblr.com/post/99689402659/procedural-generation-tutorials-getting-started?utm_content=buffera3b27&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer]]

[[https://twitter.com/alexjc/status/531077005815869440]]

[[http://samatkins.co.uk/blog/2014/11/08/procjam-procedural-building-generation/]]


** Talks
Here are my notes on the talks that I had a chance to see.  In lieu of
writing anything up, I'll post them here for now.

*** Overall themes
- Meaning over randomness
- Scale and direction
  - Layering
  - Deck metaphor really nice for prototyping.
  - Great question, how do you make sure the player is not lost in
    this huge history.  Player only aware of history of own house,
    data is gathered by reading books etc.; there's some context for
    the entrance of new bits of history.  Books are populated in
    places where it makes sense for them to turn up.
  - Top-down (designer first) is easier than bottom-up (player first;
    shout out to [[https://twitter.com/gillianmsmith][@gillianmsmith]] for this formulation).  Callbacks?
    How to percolate up from lower elements on tree?
- Storytelling as divination
- NanoGenMo
- Flow in procedural generation
  - Meaning, codifying design principlse
  - Art of Game Design by Jesse Schell
  - a feeling of complete and energized focus in an activity, with a
    high level of enjoyment and fulfillment
    - clear goals
    - no distractions
      - How does this figure into open world distraction fests like
        triple a sandbox games?
    - feedback
    - continuously challenging
  - Frustration vs. boredom, find a balance
  - Dynamic
    - Scale enemy level to meet player's level
    - AI director, see when the player is overwhelmed, drop difficulty;
      boredom spawn more enemies.  Requires some kind of metric
  - Static
    - Lock and key
    - Metazelda calculates difficulty number for each room from
      desired flow curve.
    - Love [[https://github.com/tcoxon][@tcoxon]] 's thoughts on less backtracking.  Algorithmically
      respecting players' time.
  - Gamasutra Toni Sala
- Emotion and interactivity -- expressivity
  - Workflow, ease of adjustment can be good for designer and exposing
    the same tools to the player can be fun

** itch.io
It looks like most of the entries are gathered on a [[http://itch.io/jam/procjam][#procjam itch.io
page]].  I have no experience with [[http://itch.io/][itch.io]], but I think setting up an
account and exploring what itch.io has to offer couldn't hurt.

* Procjam reviews                                                   :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
My favorite games from #procjam were DUNGEN by @JctWood and JET/LAG by
@JakeCataford.  Nodemancer by @nihilocrat was my favorite tool.

- game
- review
- procjam
- design
- mechanics

Looking through the entries, I could only spend a minute or two with
each entry.  It helped if the game ran in my browser, so HTML and
Unity were big.  Here are some of the games that caught my eye.

** The top two

** JET/LAG
Simple instructions: "Click to move. Kill enemies by bashing them."
There may be little to /[[http://svblm.itch.io/jet-lag][JET/LAG]]/, but its excellent stylish visuals
set this entry apart for me.  A CRT-like distortion bends the corners
of the screen complete with scrolling scan lines, while multi-colored
text oscillates above a simple square.  The simple square is your
character battering your way through procedurally generated maze-like
levels.

There's no fancy art in this game, all the characters are made from
simple shapes.  But that doesn't stop the graphics from impressing.
It's clear that [[https://twitter.com/JakeCataford][@JakeCataford]] turned the juice up to 11, and it works.
The game feels great.

As a "rogue-like like like" you may expect it to be deviously hard,
and you'd be right.  But the controls are responsive and the enemies
telegraph their moves, so you feel like you are learning something
with each death.  [[https://twitter.com/JakeCataford][@JakeCataford]] clearly understands some fundamentals
of engaging game design and I'm excited to see what's coming up next.

** DUNGEN [star]
A multi-jam entry for [[http://itch.io/jam/procjam][#procjam]], [[http://itch.io/jam/paper-jam-1][#paperjam]], and [[http://7dfps.com/][#7dfps]] by [[https://twitter.com/JctWood][@jctwood]],
this first person shooter uses shuffling to generate a dynamic dungeon
with each play-through.  I like the simplicity of the mechanics
[[https://twitter.com/JctWood][@jctwood]] has designed.  Stats on a 1-10 scale can be just as
interesting as stats in the thousands.  There are even multiple skin
options for the protagonist's hand.  That's more advanced than all
three /[[http://en.wikipedia.org/wiki/Doom_%2528series%2529][DOOM]]/s.

I think I'm most interested in the literal realization of the
procedural generation algorithm.  By shuffling the cards the
procedural generation of the dungeon is clear both to designer and
player, and this type of randomization has been used for many years in
many games with standard and nonstandard sets of cards.  I'm
interested in seeing how this shuffling mechanic, both literal and
metaphorical, can be leveraged to encourage new avenues of play in the
future.  I can imagine tuning some aspects of a proc gen algorithm by
exposing the contents to the player as a deck of cards, both literally
as is typical in CCGs and other tabletop games and as a metaphor for
abstraction of systems in a video game.

** Favorite games
- [[http://svblm.itch.io/jet-lag][JET/LAG]]
  - Bump or get bumped.  Excellent style and great graphics.  Very
    juicy!
- [[http://lissar.itch.io/peregrin][Peregrin]]
  - Beautiful.
- [[http://entropyphi.itch.io/nauticalith][Nauticalith]]
  - Simple, but really conveys a sense of scale.  Adding some mechanic
    like dynamic wind that affects sailing could put this over the
    top.
- [[http://tfurmanskigmailcom.itch.io/forska-web-version][Forska]]
  - Great shader.  Generate some /Myst/-like puzzles and you've got a
    game, here.
- [[http://8-bit-ape.itch.io/infinity-explorer][Infinity Explorer]]
  - Reminds me of /Magic Carpet/.
- [[http://jctwood.itch.io/dungen][DUNGEN]]
  - Print and play games are great.


** Favorite generators
- [[http://nihilocrat.itch.io/nodemancer]]
  - Interesting.  Will have to look more into it.  Now that I think
    about it, this one deserves an honorable mention for favorite tool
    of the jam.  I will revisit it in depth in a later post because the
    generation algorithm looks like an idea I've batted around in my
    head.
- [[http://diaspora-colonies.herokuapp.com/]]
  - Useful and cool!  Check out [[http://ptychomancer.itch.io/diaspora]]
    for some more background on this space colony generator.
- [[http://eduardo.itch.io/procedural-fabrics]]
  - Clever tiling textures using diagonal lines that really break up
    the patterns to make it more pleasing to the eye.
- [[http://ibol17.itch.io/procedural-pixel-monsters]]
  - Artistic style.  Simple color palette still allow for a variety of
    expressive monsters. Interested in following up on the
    procedural tree generation–looks great!
- [[https://github.com/cutgarnetgames/gaia]]
  - Beautiful world generator with some source code worth digging
    into.
- [[http://gillianms.itch.io/hoopla]]
  - Really think there's something to explore in pixels-as-stitches
    graphics.
- [[http://aerique.itch.io/rocks-bitch]]
  - The pet rock generator I always wanted!
- [[http://playcrafts.itch.io/palette-generator]]
  - Useful.
- [[http://tccoxon.itch.io/dreamer]]
  - Weird but very creative and very cool.
- [[http://itch.io/jam/procjam/rate/14026]]
  - Great concept, but I need remedial lessons or a tutorial.  One to
    revisit when I can really dig into it.

** Cool looking Windows games I couldn't play
- [[http://crabowitz.itch.io/key-geist]]
  - Reminds me of /Wonderful 101/–a game I haven't played, but
    probably should.  Something about the aesthetic of dozens of
    little flocking characters appeals to me.
- [[http://caseportman.itch.io/riser]]
  - Looks like it controls well

* A proper review of DUNGEN [Star]                                  :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
I owe @JctWood a playthrough and review of DUNGEN [Star], too lazy to
print it so I cut it up in Adobe Illustrator. #procjam #7dfps #paperjam

- game
- review
- procjam
- paperjam
- 7dfps

/My green fingers sweat on the handle of my pistol as I creep through/
/the door, into the next room.  I found two boxes of ammunition in the/
/previous room so I'm well equipped for the next horrible monster I/
/encounter.  My grip on the pistol tightens as a horrible three-legged/
/spherical thing jumps down from the ceiling, pirouetting to land on its feet/
/and shooting a stream of acidic liquid at me./

/"Oof," is all I manage to get out, as I feel the Burster's fluid eat/
/into my skin.  Without thinking I fire at it, killing the thing in two/
/shots./

/While reloading my pistol, I notice a glowing jewel on the stone.  If/
/it's what the briefings said, this is the teleport stone that will/
/allow me to phase out of our normal reality just long enough to escape/
/the next deadly monster I encounter in/ DUNGEN [Star].

<!--more-->

[{% img center /images/assets/DUNGENStar.gif %}](/images/assets/DUNGENStar.gif)
DUNGENStar.gif

(Please excuse my lame attempt at illustrating play with a .gif).

Last week, I posted an overview of my favorite #procjam games.  I felt
remissed when I got a tweet from one of the designers, asking whether
I had actually printed and played the game.  I hadn't and neither had
any of the other reviewers who praised it.  So, this week I took some
time to cut out the cards on my computer, effectively making a
print-and-play game I could play in Illustrator without bothering to
print it out.

After the initial time investment, /DUNGEN [Star]/, a print-and-play
game designed by @JctWood for the #paperjam, #procjam, and #7dfps
gamejams, plays quickly.  Especially if you are brave enough to choose
the roguelike secret difficulty level of starting with 1HP.  Add to
that, the advanced enemy rules, which give the monsters more
personality on top of their already evocative illustrations and you've
got a challenging game.

I'm a fan of the cartoonish art style of /DUNGEN [Star]/.  The
character design does a good job of communicating interesting variety,
even though there are few monsters to go up against.

/DUNGEN [Star]/ runs out of steam quickly, but I think the intent
behind it is clear.  This game does a good job of bringing the feel of
a procedural first-person shooter with roguelike elements to the
print-and-play market.  I think extending the combat to involve
multiple weapons would add some depth to the game.  I would like to
see more enemies, particularly ones with more interesting advanced
enemy rules.  I'd also like to see an overarching goal or theme tying
together /DUNGEN [Star]/'s dungeoning and star, so you feel more
satisfied when you survive the dungeon.  With that criticism said, I
still think /DUNGEN [Star]/ succeeds as a gamejam game and a great
prototype to build off of.

* Simple Mind-reading Machine in Unity JavaScript                   :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
Porting a simple mind-reading script to Unity's javascript.  #unity3d

- AI
- algorithm
- mechanics
- Unity
- JavaScript
- Unity3d


[[http://alastaira.wordpress.com/2014/03/15/a-simple-mind-reading-machine/]]

[[http://cs.stanford.edu/people/eroberts/courses/soco/projects/1999-00/information-theory/ai.html]]

[[http://answers.unity3d.com/questions/54695/how-to-declare-and-initialize-multidimensional-arr.html]]

[[http://csharptutorial.blogspot.com/2006/05/question-mark-ternary-operator.html]]

I ported a cool toy from [[http://alastaira.wordpress.com/2014/03/15/a-simple-mind-reading-machine/][Alastair Aitchison's blog]] to Unity
JavaScript.  The toy implements a simple 'mind-reading' algorithm that
attempts to guess whether the player will choose Left (by pressing the
left arrow key) or Right (by pressing the right arrow key).

<!--more-->

** How does it work?

Aitchison's blog post describes how it works:
#+BEGIN_QUOTE
How does it work? Not by mind-reading, obviously, but by exploiting
the fact that humans do not behave as "randomly" as they think they
do. The computer maintains a very simple memory that records the
pattern of results of the last two rounds – whether the player won or
lost, whether they switched strategy, and then whether they then won
or last the following round. The computer then uses this to choose its
own best strategy based on the way the player behaved last time the
current pattern occurred. If the computer loses twice in a row using
the current strategy, it picks a random response in the next round.
#+END_QUOTE

The original idea came from some AI work by [[http://en.wikipedia.org/wiki/Claude_Shannon][Claude Shannon]]
and D. W. Hagelbarger. [[http://cs.stanford.edu/people/eroberts/courses/soco/projects/1999-00/information-theory/ai.html][They describe the internal memory of the toy
mind-reader]] that we will model using a multidimensional array =v=:

#+BEGIN_QUOTE
There are 8 possible situations and two things the player can do at each one:

1) player wins, plays same, wins. Then same or differently.
2) player wins, plays same, loses. Then same or differently.
3) player wins, plays differently, wins. Then same or differently.
4) player wins, plays differently, loses.Then same or differently.
5) player loses, plays same, wins.Then same or differently.
6) player loses, plays same, loses.Then same or differently.
7) player loses, plays differently, wins.Then same or differently.
8) player loses, plays differently, loses.Then same or differently.
#+END_QUOTE

** Why port it?
Why not just take a straightforward approach, running
his code myself? First, I wanted to fully understand the algorithm the
hard way, by coding it line for line myself. And second, I wanted to
better familiarize myself with Unity JavaScript, including its
differences from C#.

The port was relatively simple, except for two small hiccups.  First,
as far as I know, Unity JavaScript doesn't allow for initializing a
multidimensional array.  So I looped over the cells in the array,
filling them that way.  I have a hunch that the cells are initialized
to the =int= =0= by default, but I wanted to be explicit.  Please let
me know in the comments or [[https://twitter.com/zerosalife][via twitter]] if I'm way off base.

#+BEGIN_SRC javascript
  var v : int[2, 2, 2];
  for(var cell in v) {
      cell = 0;
  }

#+END_SRC

I also encountered some unfamiliar syntax: the sonorously named Elvis
operator, [[http://en.wikipedia.org/wiki/Conditional_operator][?:]].  It's also called the [[http://en.wikipedia.org/wiki/Ternary_operation][ternary operator]], when it's used
with 3 arguments, as I've used it here.  In C-like languages it allows
for succinctly stating these kinds of conditional expressions. The
example below illustrates how it's used.

#+BEGIN_SRC javascript
  // Is the current player's choice the same as the previous player's
  // choice?
  //
  // if (playerChoice == lastChoice)
  //     sameChoice = True;
  // else
  //     sameChoice = False;
  //
  // Using ternary operator:
  v[lw2, lw1, 1] = (v[lw2, lw1, 0] == playerChoice ? 1 : 0);

#+END_SRC

** The code
The ported code for the mind-reader is reproduced below.

#+BEGIN_SRC javascript
  #pragma strict
  import System.Collections.Generic;

  // Used to record play history
  var v: int[,,];
  var lw1: int;
  var lw2: int;
  var losingStreak: int;

  // The prediction of the player's next turn
  var prediction: int;

  // Keep track of scores
  var cpuScore: int;
  var playerScore: int;

  var outText: String;

  function Start () {
      // Initialize matrix to track state of play history

      v = new int[2, 2, 2];

      for(var cell in v) {
          cell = 0;
      }

      // No prior knowledge, so set inital prediction based on random chance.
      prediction = flip();

      // Set scores to 0
      cpuScore = 0;
      playerScore = 0;

      // Initialize previous play and play before last win-lost trackers
      lw1 = 0;
      lw2 = 0;

      // Output
      outText = "";
  }

  function TakeTurn(playerChoice: int) {
      // Display player and computer's choices
      var outTextString: String = "You pressed " + playerChoice + ", " + "I guessed " + prediction + "\n";

      // Computer guessed correctly
      if (playerChoice == prediction) {
          cpuScore++;
          losingStreak = 0;
          outTextString += " I WIN!\n";
      }
      else {
          playerScore++;
          losingStreak++;
          outTextString += " YOU WIN!\n";
      }

      outText = outTextString;

      // Is the current player's choice the same as the previous player's
      // choice?
      //
      // if (playerChoice == lastChoice)
      //     sameChoice = True;
      // else
      //     sameChoice = False;
      //
      // Using ternary operator:
      v[lw2, lw1, 1] = (v[lw2, lw1, 0] == playerChoice ? 1 : 0);
      v[lw2, lw1, 0] = playerChoice;
      lw2 = lw1;
      lw1 = playerChoice;

      // If lost more than twice in present state, choose random
      // strategy.  Otherwise keep the same strategy.
      prediction = v[lw2, lw1, 1] == 1 && losingStreak < 2 ? v[lw2, lw1, 0] : flip();
  }

  function flip() : int {
      // Simulate a coin flip to produce 50:50 chance of [0, 1]
      return Random.Range(0, 2);
  }


  function Update () {
      if (Input.GetKeyDown(KeyCode.LeftArrow)) {
          TakeTurn(0);
      }
      if (Input.GetKeyDown(KeyCode.RightArrow)) {
          TakeTurn(1);
      }
  }

  function OnGUI() {
      var style : GUIStyle = new GUIStyle();
      style.fontSize = 36;

      GUI.Label(new Rect(0, 0, Screen.width, 100), outText, style);
      GUI.Label(new Rect(0, 100, Screen.width, 200), "Player: " + playerScore + " CPU: " + cpuScore, style);
  }


#+END_SRC

* Sharing philosophy                                                :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
I close the year out with a quote from @samaaron about the value of
sharing.

- ethics
- tools
- ethics
- algorithms


From [[http://www.imperica.com/en/in-conversation-with/meta-ex-the-music-of-code][this interview]] with [[https://twitter.com/samaaron][Sam Aaron]].  Aaron talks about sharing
software to create music, but it applies just as well to games.


#+BEGIN_QUOTE

We believe that most value in the world comes through sharing, and
that music is no exception. One of the benefits of sharing is that it
makes learning much easier. For example, we often hear amazing sounds
on albums and wonder how they were made. However, musicians rarely
share their production methods. We release all the software we write,
which includes our synthesiser designs, interaction abstractions, and
compositional structures, under an open source license, and we
distribute it to everyone through GitHub. This makes it free and easy
for anybody to copy and recreate any aspect of our work. For example,
when one of our fans is interested in the sound of one of the synths
we're using, they can go to GitHub and download the synth design as
text. They can email it to their friends, read it, study it, copy it,
modify it and run it to recreate the exact sound.

#+END_QUOTE

--Sam Aaron

* INSceptahdeckWU                                                   :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:01
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
First #procjam entry: @insceptahdeckwu generates tweets based on Wu
Tang Clan lyrics. Also updates abt @sudorossy @GalaxyKate #7dfps

- design
- procedural generation
- clojure
- procjam
- 7dfps

** #procjam updates

[[https://twitter.com/search?q%3Dprocjam][#procjam]] is upon us.  The conference is on and popping, streaming at
[[http://www.twitch.tv/procjam]].  I'll try to precede my #procjam posts
with a little update on some of the cool things I've seen that need
pointing out during the jam itself.

[[https://twitter.com/GalaxyKate][@GalaxyKate]] will be streaming [[http://vimeo.com/111272682][some tutorials]] today, following the
conference.

[[https://twitter.com/SudoRossy][@sudorossy]] is currently streaming some development and modeling at
[[http://www.twitch.tv/sudorossy]].  I imagine that sudorossy will
continue this throughout the jam.

The [[https://twitter.com/search?q%3D7dfps][#7dfps]] jam is also going on this week.  So, I've decided to
release my third person procedural tweeter.  Or maybe it's a fourth
person tweeter, third person once removed.

** Fourth-person tweets

I'm at it again, [[http://zerosalife.github.io/blog/2014/04/19/styx-ebooks/][making a twitter bot]] like [[https://twitter.com/styx_ebooks][@styx_ebooks]].  Only this
time it's in a completely different language and it's got a completely
different corpus.  Corpus is a Latin way of saying text, in case you
forgot.

<!--more-->

** Making the tweets
The basic algorithm works like this.

The bot creates a huge textfile containing lyrics from Wu Tang Clan
songs.  I trim away a lot of the information about verses and
choruses, but I keep the punctuation because I like the sense of
rhythm it creates.

Based on the relationship between the words in this corpus file, the
bot builds a [[http://en.wikipedia.org/wiki/Markov_chain][markov process]] to generate the text of the tweets.  To do
so, the bot generates a transition matrix using [[https://github.com/Janiczek/markov][Janiczek's Clojure
markov library]].  It then takes random walks through that matrix to
produce a string of text with a similar relationship between words to
the input lyrics corpus.

** Making it a command line app
This is the first time I've tried to make a command line application
in Twitter.  Luckily there are some good tools out there.

I wondered how to deal with multiple options and inputs, and the good
news is: it's just as easy as you'd think.  You simply add
conditionals to deal with the possible behaviors of your program.  The
magic of =parse-opts= handles the rest.  Options with long names
automatically become keys to the option dictionary, and if you've
marked them as a =:flag= you can depend on the truth-value to control
the flow of your program.

You may think it's odd that I'm using options instead of actions as in
the =cli= example, but hey.  It's my program.  Your program can work
the way you want it too.  I'm going to make sure to document it so you
can use the Rebel INS or build a twitter bot based on this code.

To build the app, I use =lein bin= from the command line.

I'm interested in [[http://www.rkn.io/2014/02/06/clojure-cookbook-daemons/][daemonizing]] the application.  That is to say, I'm
interested in turning it into a persistent process that runs in the
background on my computer.  But for now, I've set up a simple [[http://en.wikipedia.org/wiki/Cron][cron]]
script to tweet every few hours.

** Logging
When I do tweets from the command line there's some dark magic going
on that I don't understand.  Anyway it seems to invoke the =Log4j=, so
I [[http://www.bahmanm.com/blogs/how-to-add-logging-to-a-clojure-project][set that up according to this blog post]].

** Markov chain text generation
One of the quirks of the markov package I used is that it stops
generating 'random walks' when it reaches states that it has not been
trained on.  As you can imagine when using imagery-rich,
neologism-laden rap music, there are many words that occur once, even
in a very large corpus.  Being unique is kind of a goal of the form, a
fact reflected in [[http://en.wikipedia.org/wiki/Ol%2527_Dirty_Bastard][at least one alias]].

In order to make more realistic texts, it's common to increase the
order of the transition matrix.  That is to say, to determine the
probability for a following word from the prior two or more words.
However, given my idiosyncratic corpus, this leads the 'random walk'
algorithm to halt, giving me too few words in my output.

Interestingly, in this case, dialing back the order tends to lead to
more rhyming and a few recognizable couplets, which I find kinda nice.

** Setting up the twitter account
I ran into a problem getting an app set up for the bot's twitter
account.  I am merely one person, and thus have need for merely one
cell phone.  Since twitter requires a unique mobile number for
authenticating apps, I was out of luck.  That is, until I found this
[[http://dghubble.com/blog/posts/twitter-app-write-access-and-bots/][blog post showing how to use the same app on multiple bot clients]].

Faithful readers may remember my wildly popular, and yet still somehow
deeply underrated, [[http://en.wikipedia.org/wiki/Bangsian_fantasy][Bangsian]] fantasy bot, [[https://twitter.com/styx_ebooks][@styx_ebooks]].  Using =twurl=
I was able to grant access to the [[https://twitter.com/styx_ebooks][@styx_ebooks]] app credentials for the
new bot.

** Moving on
Here's one of my favorite tweets so far:

{% tweet https://twitter.com/insceptahdeckwu/status/529619098758823937
%}

From here the skies the limit.  I could try analyzing the generated
text to try to build lines or stanzas.  I could try to reorder words
to reflect the syntax present from the transcription.  I could try to
represent individual emcees with unique corpora.

* New Year, New Footer                                              :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:02
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:

In which I update the footer of my @octopress blog.

- tools
- Octopress

It's 2015, time to update my footer.  I came across a link to a
website called, [[http://updateyourfooter.com/][updateyourfooter.com]].  It describes ways to
dynamically update footer info in a variety of languages.

I set out to intrepidly implement one of the JavaScript snippets from
the website in the =source/_includes/custom/footer.html= file in my
[[http://octopress.org/][Octopress]] install.  To my surprise there was a bit of code in the
footer that already dynamically generated the date timestamp for the
footer.

The code looks like this:

={{ site.time | date: "%Y" }}=

Ready for this?  Octopress is a framework built on top of [[https://github.com/jekyll/jekyll][Jekyll]].
Jekyll uses [[http://docs.shopify.com/themes/liquid-documentation/basics][Shopify's Liquid Template Engine]].  All of that is a fancy
way of saying that this code is compiled into useful stuff for my site.

All I had to do was preface that with the year my blog was
established, and badabing, no-mess dynamic footer.  Now the relevant
section of the footer looks like this:

=Copyright &copy; 2014 -- {{ site.time | date: "%Y" }}=

You can see the results at the bottom of this page.

* Previewing a post using Octopress                                 :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:03
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
In which I document how to preview a post using @Octopress.

- tools
- Octopress

It's nice to preview some of my more complicated posts before I ship
them out to the Internets.  Here's how I do it.

** make preview

I [[http://zerosalife.github.io/blog/2014/09/06/automating-blog-deployment-with-octopress/][previously posted]] a =makefile= I use to automate deployment of my
blog.  Here are the germane lines for previewing:

#+BEGIN_SRC make
preview:
	bundle exec rake generate && bundle exec rake preview
#+END_SRC

So typing =make preview= at the command prompt will run start up
=rake='s webserver at =http://localhost:4000=.  Then all I have to do
is launch a browser, connect to that port, and voila: a preview of the
blog that regenerates to match the changes I make live, as I make
them.

* Syntax highlighting for Octopress                                 :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:03
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
In which I remind myself how to post code snippets in @octopress.

Seeking advice on code refactor at the bottom of this post. #gamedev

- tools
- Octopress
- algorithm

It's relatively simple, but I always forget how it's done.  In the
interest of documenting useful information for myself, here is how to
use [[http://octopress.org/docs/blogging/code/][syntax highlighting with code blocks in Octopress]].

#+BEGIN_SRC
``` [language]

blah

```

#+END_SRC



Here are some examples of languages I typically use:

#+BEGIN_SRC csharp
  private IEnumerator GUIMoveToPosition(Vector3 newPosition, float duration, RectTransform rect) {
    float elapsedTime = 0;
    Vector3 startingPos = rect.position;
    while(elapsedTime < duration) {
      rect.position = Vector3.Lerp(startingPos,
                                   newPosition,
                                   elapsedTime / duration);
      elapsedTime += Time.deltaTime;
      yield return null;
    }
  }

#+END_SRC

#+BEGIN_SRC python
  def update(self, time_elapsed):
      self.tick += 1
      self.total_time += time_elapsed

      if self.mode:
          self.mode.update(time_elapsed)


#+END_SRC

#+BEGIN_SRC clojure
  (defn valid-string? [s]
    "Valid strings are non-empty strings that do not contain
    [ (commonly used to denote parts of the song and which rappers are
    rapping) and : (commonly used in the album info and transcriber
    info)."
    (and (not (contains-char? s \[))
         (not (contains-char? s \:))
         (not (contains-char? s \"))
         (not (contains-char? s \())
         (seq s)))
  ;;; http://clojuredocs.org/clojure_core/clojure.core/empty_q
  ;;; Please use the idiom (seq x) rather than (not (empty? x))


#+END_SRC

** Bonus: Help me refactor this code
I think there's some way to refactor these two similar functions so
they don't share code, but I don't see it.  If you have a clever way
to offload the common functionality, let me know in the comments
([[http://gist.github.com][gists]] preferred).

#+BEGIN_SRC csharp
  // NOTE: there are some differences between the two functions
  // because I'm still adding funcitonality.  I think there should be
  // a way to pull out some of the common functionality so I don't
  // have two functions that share code.  Maybe by separating the
  // boundary checks from the actual "counting" steps?

  void Countdown () {
    int iTargetHp = iHp + 1;

    // If the rolling hp reaches the hit point above iHp then we can
    // stop the rolling because each RollEvent effectively moves past
    // the current iRolHp.
    if(iRolHp == iTargetHp) {
      // Start Coroutine to return reels to original positions
      StartCoroutine(WaitAndResetReels(RollDir.Down));

      CancelInvoke("Countdown");
    }
    if(iRolHp <= 0) {
      StartCoroutine(WaitAndResetReels(RollDir.Down));

      // TRUE DEATH!
      CancelInvoke("Countdown");
    }
    // If the rolling HP is larger than the target HP and positive,
    // then roll down.
    if(iRolHp > iTargetHp || iRolHp > 0) {
      RollEvent(RollDir.Down);
    }

    iRolHp = iRolHp + (int)RollDir.Down;

  }

  void Countup() {
    int iTargetHp = iHp - 1;

    // If the rolling hp reaches the hit point below iHp then we can
    // stop rolling because each RollEvent effectively moves past the
    // current iRolHp.
    //
    // Also take care of some nasty edge cases resulting in two calls
    // to WaitAndResetReels.
    if(iRolHp == iTargetHp & iRolHp < iMaxHp & iRolHp != iMaxHp) {
      StartCoroutine(WaitAndResetReels(RollDir.Up));

      CancelInvoke("Countup");
    } else if(iRolHp >= iMaxHp) {
      iHp = iMaxHp;
      StartCoroutine(WaitAndResetReels(RollDir.Up));

      // Maxed out HP.
      CancelInvoke("Countup");
    }

    // If the rolling HP is smaller than the target HP and less than
    // Max HP, then roll up.
    if(iRolHp < iTargetHp || iRolHp < iMaxHp) {
      RollEvent(RollDir.Up);
    }

    iRolHp = iRolHp + (int)RollDir.Up;

  }
#+END_SRC

* VGBC: a Video Game Book Club                                      :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:03
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
Organize your own videogame bookclub #VGBC.  f/ @InvolvingSalmon
#gamedev #screenshotsaturday #gaming #retrogaming #games

- design
- VGBC

Credit for the original idea for a VGBC goes to Rick Wolf, who also
coauthored this post.  You can get in touch with Rick at
[[https://twitter.com/involvingsalmon][@InvolvingSalmon]] on Twitter.

** What?

Your very own VGBC (one of those newfangled acronyms I hear are all
the rage these days).  A *club* devoted to selecting and critically
*discussing video games*. I like the acronym VGBC, but you can call it
what you feel. It's worth noting that we aren’t reading a book each
month (although some game design books would do us well), but we’re
calling it a “book” club to emphasize the format that encourages
thoughtful discussion.

Each meeting you can discuss any aspect of a video game that strikes
your fancy.  Maybe you really like the music or art direction, maybe
there's one level that you could play over and over again until you
get it perfect, maybe you really like the silent protagonist's
haircut.  Let your club know.  Chances are, your thoughts about the
video game will evoke some exciting input from others in your club.
You can respond with all those witty retorts you've been practicing in
the mirror.  This is what's known colloquially as a discussion.

But how do I know what to discuss, you ask?  It's simple.  *Take turns
picking a topical game that everyone can play*, within reason.  We say
within reason because, like a book club, everyone needn't finish the
discussion material to weigh in.  Don't expect everyone in your club
to buy the latest $60 game.

A rule of thumb can be that the host of the last meeting gets to
choose the game for the next meeting.

** Who?
You, your friends, the cat (If you have one. No catnapping.), *anyone*
with interest in critically discussing video games. Maybe, like us,
the group consists of people that are interested in game design. Maybe
you invite your friends that love games, but haven’t ventured into the
realm of formal discussion. The more the people you have with
different interests, the more likely you are to get a new take on a
game.


** When?
Pick your favorite periodic adjective.  We'd recommend starting with
*monthly* meetings, but you can meet as often as you like.  Really.
We don't mind.  See if we care.  It's not like you invited us.

Anyway. Pick a time that works best for your group.  Sometime in the
evening, say around happy hour, with a delicious beverage and snacks
sounds good to us.  We'd reckon that allowing for *two hours* should
be enough discussion.  If a topic is particularly engaging you can
always spread it out over multiple meetings.

It's up to you to work out a schedule that works for your group.
*Scheduling apps* like [[http://doodle.com/][Doodle.com]] can be helpful for coordinating busy
schedules and finding a time that works for everyone in your group.

** Where?
In your *home*, in your friends' homes (assuming they're part of the
meeting...), in your garage, *at a local pub*.

It's nice to meet *somewhere with a television* and a *game system* to
play the game you will discuss.  Showing video of your favorite parts
of the game can be nice too.  If you want to do that, try to plan
ahead and get a save near the part you want to discuss or check for
video playthroughs on [[https://www.youtube.com/][YouTube]].

If you meet outside your home make sure you check with the
establishment beforehand.  Give them a headcount and check if it's ok.
Be sure to spend a little scrilla and tip well.  Be aware of other
customers.

** Why?

Because *video games deserve a critical reading*.  Discussions force
all of us to crystallize our views from vague notions of "It's good,"
to "The fog of war mechanic in this game vastly improves the strategic
elements, strengthening the multiplayer meta-game."  (Your mileage may
vary.)

Sometimes you'll get to suggest your favorite game.  Others may deride
your choice, but they will get their chance too.  Heck someone may
even like the games you suggest, discussing an intriguing aspect that
was lost on you.  Then the others in your club will suggest other
games.  You never know, you may just find a game that you like.  If
you're anything like us, assigning a game and being accountable to
comment on it can also help [[http://www.backloggery.com/][curb the constant growth of your Steam
library]].

Maybe one month you'll find that you hated a game. But take a moment
and think about why it isn't fun. Do you dislike it because you're bad
at puzzle games, or is it unenjoyable because it's a garbage visual
novel whose writer has never heard of the three act structure? These
reasons are very different, and both are worth considering. We're
hoping that reflecting on what makes a game good or bad will make us
better designers. We do this with most games that we play, but by
doing it with friends we can all get feedback on our thoughts; and we
guarantee that will make us grow as designers.

What we've presented here are a set of guidelines.  There are no hard
and fast rules or requirements for hosting your own VGBC.  Want to
talk about knitting?  Cool.  Want to discuss your favorite sporting
moments?  Great.  Board games?  Lawn darts?  More power to you.

So start up your own #VGBC and let us know how it goes in the comments
or on the twitters @zerosalife or @InvolvingSalmon.  When I post about
something from #VGBC on the blog, I'll tag it with VGBC.

* 2014 Year In Review                                               :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:03
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
First year of my blog retrospective including #procjam @psysal
@McFunkypants @HobbyGameDev @SleepyTearyEyed

- YIR

This week is the anniversary of [[http://zerosalife.github.io/blog/2014/02/01/some-thoughts-on-attack-of-the-friday-monsters/][the first post on this blog]].  I'd like
to take a moment to reflect on the first year.

A recent tweet by [[https://twitter.com/McFunkypants][@McFunkypants]] sums up my approach to blogging:

{% tweet 562450390839353345 %}

I'm not vain enough to imagine a future of internet (in)famy and
riches(?) to emerge as a product of this blog.  If I was linearly
following the [[https://twitter.com/HobbyGameDev][@HobbyGameDev]] trend, I should have around 20k followers
by now.  I'm nowhere near that total.  But, like [[https://twitter.com/HobbyGameDev][@HobbyGameDev]], I set
out with a goal of publishing weekly content.  And with that in mind,
I consider the first year a success.

<!--more-->

** Looking back
In the past year, I covered recently released games from [[http://zerosalife.github.io/blog/2014/02/01/some-thoughts-on-attack-of-the-friday-monsters/][major
publishers]] [[http://zerosalife.github.io/blog/2014/03/22/ice-ice-baby/][and]] [[http://zerosalife.github.io/blog/2014/06/21/playable-call-for-papers/][game]] [[http://zerosalife.github.io/blog/2014/07/26/space-is-read/][jams]].  I linked to useful [[http://zerosalife.github.io/blog/2014/03/29/a-twine-tutorial-in-twine/][tutorial]] content and
[[http://zerosalife.github.io/blog/2014/05/31/hammock-driven-creativity/][talks]].  I pointed out some of my [[http://zerosalife.github.io/blog/2014/04/12/the-fate-of-adventure-games/][favorite essays]] about games.  And I
released my own [[http://zerosalife.github.io/blog/2014/02/15/bunnies-dont-surf-number-flappyjam/][games]], [[http://zerosalife.github.io/blog/2014/09/06/automating-blog-deployment-with-octopress/][tools]], [[http://zerosalife.github.io/blog/2014/09/27/text-encoding-further-improvements-to-using-git-for-unity-projects/][and]] [[http://zerosalife.github.io/blog/2014/03/08/cut-it-all-right-in-two-bisect-to-find-bugs/][tutorials]].

** New year, new goals
Part of the motivation for creating this blog was to provide myself
with a platform for regular publishing.  Failing a few travel-related
[[http://en.wikipedia.org/wiki/Snafu][SNAFUs]], I've maintained weekly posts.  And I think the weekly post on
Saturday model works for me.

In the coming year, I'd like to focus on using Google Analytics and
marketing tools to better publicize these posts.  I'm not sure what
this marketing push will look like.  I'll likely pursue it like an
experiment.  Maybe one month I'll publicize the blog posts twice on
the day of publication, or once on Saturday and once on Wednesday,
then compare the traffic to months when I only publicize posts on
Saturdays.  Of course, this doesn't control for variable interest in
the content of the posts, but it's a start.  Posts have been most
successful when they reach the people who are most interested in them,
and it's easy to get lost in a sea of irrelevant hashtags.  I'm
looking for better ways to get the word out.

** What worked?

*** #procjam
My two most successful topics this year were [[http://zerosalife.github.io/blog/2014/11/01/make-things-that-make-things-number-procjam-2014/][#procjam]] and an [[http://zerosalife.github.io/blog/2014/05/03/why-are-caves-central-to-so-many-games/][original
article on the centrality of caves in game design]].

I think #procjam was successful because I got a post out in front of
the jam, the week before the jam started.  At that time it was a
low-traffic hashtag.  People were just finding out about the gamejam,
and my post was one of the only things written about #procjam, other
than the announcement.  The jam also worked for me because I had a [[http://zerosalife.github.io/blog/2014/11/08/insceptahdeckwu/][lot]]
of [[http://zerosalife.github.io/blog/2014/11/15/patchwerk/][ideas]] to jam out during the event, and I got a kick out of
[[http://zerosalife.github.io/blog/2014/11/29/procjam-review/][reviewing]] [[http://zerosalife.github.io/blog/2014/12/06/a-proper-review-of-dungen-star/][several of the entries]] by others.  My projects,
[[https://twitter.com/insceptahdeckwu][@INSceptahdeckWU]] and [[https://github.com/zerosalife/patchwerk][Patchwerk]], were a ton of fun to work on.  I'll
definitely plan on participating in #procjam next year.

It would be worth my time to seek out other interesting gamejams to
participate in this year.  It can be easy to miss gamejams, but I'd
like to get involved in at least one more, maybe if there's another
[[http://itch.io/jam/space-cowboy-jam][Space Cowboy Jam]].  I'm not sure there's a definitive resource for
gamejams, but I reckon [[http://itch.io/jams][itch.io's list]] is pretty good. One thing I'd
like to look into is pursuing [[http://itch.io/][itch.io]] as a platform to release tools
and games.

*** Cavernous worlds
My [[http://zerosalife.github.io/blog/2014/05/03/why-are-caves-central-to-so-many-games/][article on the centrality of caves]] and [[http://zerosalife.github.io/blog/2014/05/10/follow-up-to-the-centrality-of-caves/][the follow-up]] involved a
little bit of synthesis and a bit of serendipity.  I saw a series of
tweets discussing the topic and set out to simply catalog the main
themes in the discussion.  Once the themes were clear, it was
impossible for me not to write the article.  I got some great [[http://zerosalife.github.io/blog/2014/05/10/follow-up-to-the-centrality-of-caves/][feedback]]
on twitter from the initial post that I turned into the follow-up
article.  This pair of posts worked because there was a clear audience
that I could make aware of the articles through mentions in the tweets
announcing the publication on the blog.  I was lucky that the audience
was vocal and willing to discuss the topic in depth with me and with
others.

** Conclusion

Overall, I'm happy with the format of the blog covering a bit of the
technical side and a bit of the design side.  In the coming year, I
fully intend on releasing some more of my own original games and
prototypes.  Hopefully I can find a receptive audience to kindle
discussion and constructive feedback.

* Hosting a game on itch.io: account set up and transaction fees    :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:03
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
Easy account set up and a look at the fees for @moonscript's itch.io

- tools

** What is itch.io?
According to the [[http://itch.io/about/faq][faq]], itch.io is a service for handling hosting and
selling individual and bundled games, soundtracks, art, etc.  It has
some handy features to [[http://itch.io/jams][manage and track gamejams]] as well.  It was
[[http://leafo.net/posts/introducing_itchio.html][created]] by [[https://twitter.com/moonscript][@moonscript]].

In this post I'll look at the fees charged itch.io and the supported
payment platforms and how to set up an account.  The [[http://itch.io/about/faq][faq]] covers these
and other topics in more detail so make sure you peruse it.

** Fees
There are a few payment options available on itch.io.  Here's how the
fees break down.  I'll use the example of selling $5.00 and $2.00
games to show the revenue you could expect to receive after taking out
the various fees.

It's worth noting that, at of the time of this post, *itch.io is not
collecting fees*.  I'll still present the revenue calculations with
the itch.io slice factored in, but itch.io won't start collecting a
percentage of the game price until a later, unspecified date.

Itch.io currently provides three options for handling payments: [[http://payments.amazon.com/][Amazon
Payments]], [[http://www.paypal.com/][PayPal]] and [[http://stripe.com/][Stripe]].

*** Supported currencies
PayPal appears to be the least restrictive in terms of the countries
and currencies it handles.  Stripe handles U.S., Canada, U.K.,
Australia, and Ireland.  Stripe has an [[https://support.stripe.com/questions/what-countries-does-stripe-support][open beta for some European
countries]]. Amazon Payments only handles U.S. currencies.
Non-U.S. purchases through Amazon Payments are [[https://payments.amazon.com/sdui/sdui/about?nodeId%3D77175#aspd_cost][only allowed via credit
card transactions, and there's an additional charge]].

*** Fee structure
The fees for [[https://stripe.com/us/pricing][Stripe]] and [[https://www.paypal.com/webapps/mpp/merchant-fees][PayPal]] work similarly, assuming you're
processing less than $3,000 monthly.  There's a base fee of $0.30 +
2.9% for each transaction.  Amazon Payments works similarly if the
price is above $10.00, but below $9.99, there's a $0.05 surcharge +
5%.

Itch.io will charge a 10% fee for each transaction, but currently this
charge is waived.

*** Down and dirty
So let's do the math for the two example prices I mentioned above:

For Stripe and PayPal the numbers look like this:
#+BEGIN_SRC
$5 - ($5 * 0.1) - $0.30 - ($5 * 0.029) = 4.055

$2 - ($2 * 0.1) - $0.30 - ($2 * 0.029) = 1.442
#+END_SRC

I'm not sure how the rounding works.  I will have to reach out to
itch.io and the payment handling services to see how they handle
tenths of a cent.

For Amazon Payments the numbers look like:

#+BEGIN_SRC
$5 - ($5 * 0.1) - $0.05 - ($5 * 0.05) = 4.20

$2 - ($2 * 0.1) - $0.05 - ($2 * 0.05) = 1.65
#+END_SRC

Keep in mind, for each of these calculations you'll get an extra $0.50
and $0.20, respectively, since the itch.io surcharge is not in effect.

That's how the numbers breakdown for these price points.  I'm not
planning on charging money right now, but it's nice to see the real
amounts you can expect to see.  I am really bad at reasoning about
these sorts of percentages in the abstract.

** Signing up
Signing up for itch.io was easy.  I created an account and checked =I
want to distribute games=.  That's it.  It's very straightforward.

Now I have a relatively spartan page at [[http://zerosalife.itch.io/][zerosalife.itch.io]].

** The next step

I'd like to brand and personalize my itch.io page, but I don't think
that the time for that is now.  Somewhere down the road, I'll look
into itch.io's powerful customization tools.

The obvious clear thing to do with my new itch.io account is to
release a game.  Tune in next week for exactly that!

* VGBC Game Design Review: Gunstar Heroes                           :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:03
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
I take a look at #GunstarHeroes in a game design review format
inspired by @danctheduck.  #VGBC #Sega #Genesis #Treasure

- design
- VGBC
- run-and-gun
- Sega
- Genesis
- Treasure

Inspired by Daniel Cook's game design review format over at [[http://www.lostgarden.com/2005/09/game-design-review-advance-wars-dual.html][Lost
Garden]].  I'm going to take a similar approach to my write up covering
/Gunstar Heroes/, the first book we've chosen for the VGBC.

** The Format
- *A brief history*: What is the historical context of the design of
  /Gunstar Heroes/?
- *Game anthropology*: What market niche does /Gunstar Heroes/ fill?
- *Layered game design*: What major design lesson(s) does /Gunstar
  Heroes/ teach us?
- *What worked and what didn't?*: What design decisions worked and
  what fell flat?



** Brief history
/Gunstar Heroes/ was the first release by nascent studio Treasure.
But the developers at Treasure were old hats at run-and-gun game
design.  Like a group of seasoned musicians coming together to form a
supergroup, the studio was created by former Konami employees, to
create great games.  Treasure was much smaller than Konami, lending
the studio a dynamic, independent vibe that we would label AA or indie
today.

Treasure's developers, designers, and artists cut their teeth making
some of Konami's biggest hits.  While the list is long, ranging from
classics like Castlevania and Metal Gear to relatively unknown games
like Snatcher and Rocket Knight Adventures, for the purpose of this
article I'd like to compare arguably the greatest of its forebears:
/Contra III: The Alien Wars/.

Games in the run-and-gun genre are straightforward, you run (and jump)
and shoot at enemies (with guns).  /Contra III/ was the pinnacle of
the genre in 1993, when /Gunstar Heroes/ was released, by way of the
game's attractive graphics, challenging gameplay, excellent music, and
varied level design.  /Gunstar Heroes/ represented the developers at
Treasure taking the lessons from /Contra III/ and seeking to improve
and expand on the previous success.
** Game anthropology

/Gunstar Heroes/ entered a market during the heyday of the run-and-gun
action platformer genre.  The hardware of the 16-bit consoles allowed
for better graphics and supported larger numbers of sprites, leading
to more engaging and challenging gameplay.  But the hardware and
arguably the developer mindsets had not yet evolved to support many
other approaches to gameplay.

There are too many copy-cats and also-rans to list.  /Contra/ was a
hit and every publisher wanted their own version.  Treasure sought set
/Gunstar Heroes/ off from the crowd by designing expressive sprites
and dynamic gameplay.

To my mind this approach worked, although I'm not aware of the sales
figures from the time.  The graphics of /Gunstar Heroes/ have helped
it occupy mindshare over the long run.  In fact, in my opinion,
/Gunstar Heroes/ looks more like a predecessor to the popular /Metal
Slug/ series than a sequel or offshoot from /Contra/.  For a game to
have this longevity, there must be something the designers have done
right.
** First Layer: Core Mechanics
*** Bosses
An entire article could be devoted to the boss design in /Gunstar
Heroes/ by "cool character creator" HAN aka Tetsuhiko Kikuchi.  But
the scope of this article is less concerned with the design of
specific encounters and more focused on the overall experience.  A
thorough exploration of the boss design would also require more skill
in this game than your humble author possesses.
** Second Layer: Creating new variation
*** Controls
Fixed Shot vs Free Shot

In addition to /Contra/'s ducking and climbing mechanics, /Gunstar
Heroes/ adds slides, throws and jump attacks.

A lot of the additional moves grant invincibility frames.  Sometimes
the only way to get through difficult sections of the game without
taking damage is to slide or jump attack at the correct time, using
the invincibility frames to avoid damage.

The throws also allow for a new interaction between player characters:
throwing the other player.  It can be annoying but that is half of the
fun of playing these cooperative games.  The players can also throw
some of the bombs that are thrown by enemies.

*** Weapons
Meaningful choices between the various weapon types allow players to
experiment to find combinations that work best for each situation and
style of play.  Players can adjust the difficulty of the game by
restricting the available weapon combinations, and since weapons
persist between levels players can attempt full game restriction-based
challenge runs.  The fact that the designers alllowed for interactions
between the different weapon types simply adds to the depth of
available choices.

*** Life is no longer a binary

Players and bosses have numeric vitality indicators.  Vitality is
tracked as an integer value rather than a binary alive/dead state.

You start at a vitality of 100 and, notably, there is no maximum.  You
can gain more than 100 vitality, adding even more a buffer between
playing and the icy clutches of the grim reaper.

Boss vitality is indicated on the screen, communicating directly to
the player when the boss will be defeated.  This removes some of the
ambiguity of earlier titles, where often the indications that the boss
was being damaged could be lost in the sea of explosions and
screenshake that characterize the run-and-gun genre.

This approach gives you free range as a designer to throw more and
more challenges at the player.
** Additional Layers

*** Destructible environment

*** Enemy interactions
When thrown, enmies can hit other enemies.  Another notable type of
enemy interaction is that bombs thrown by enemies can damage other
enemies and the thrower.

The result of these additional layers of player choice and
interactivity serve to situate the player characters and thus the
players in the world.  /Gunstar Heroes/ feels less like a series of
obstacles to overcome and more like a madcap adventure in which you
are desperately trying to survive.  Contrast this with the original
/Ninja Gaiden/, in which player agency is reduced to memorizing and
executing a series of well-timed button presses.

*** The boardgame level
/Gunstar Heroes/ combines the throwing mechanic with a giant die to
create the most unique level in the game: The Dice Palace.  The player
characters must move through a board populated with boss encounters,
item rooms and spaces that can send the players back to the start of
the board or require the players to fight a boss without weapons.

The addition of this level creates a dynamic experience that changes
with each play through.  The result is a truly unique than the simple
test of skill that most boss rushes represent, although there is a
more typical boss rush present in one of the later levels.

*** Anti-gravity mine carts
While games like /Battletoads/ have previously done speedy vehicular
mine-cart-style levels, /Gunstar Heroes/ takes it to another level
(forgive me).  The modified mine carts in /Gunstar Heroes/ allow the
players to flip gravity /a la/ under-appreciated late-generation NES
action platformer /Metal Storm/.

*** The genre switch
Although this is not unique to /Gunstar Heroes/ this may be one of the
first times that developers have tried this.  In the last level, the
gameplay changes from run-and-gun action to a side view bullet-hell
shoot em up.  While interesting, to me, this is not where the bulk of
the /Gunstar Heroes/ experience lies.
** What worked?
- Each player can decide on a unique approach, using the various
  weapon combinations and shot types.

- Some of the combinations were overpowered but that was half of the
  fun.  Less skilled players could equip the over powered
  lighting/chaser combination, while experienced players could try to
  become proficient in the other combinations.

- Anti gravity communicated through overlap with previous commands
  like jump attack.

- Switching between combined and individual weapon powerups allows the
  player to exercise choice, a fundamental goal of game design and
  play in general.

** What didn't work?
The length.  This is hardly a damning complaint, but the game could be
longer.  There are seven stages, a couple of which are totally
innovative, but most of them have been done before.  Perhaps it was
simply a problem of time and cartridge size constraints.

The poor, poor framerate couldn't always keep up with the destruction
on the screen, but again, this is likely due to constraints of the
technology during the early 90s.

The airship level sets up rules and breaks them.

** Conclusion
/Gunstar Heroes/ illustrates the maxim (allegedly) espoused by Sid
Meier: "A game is a series of interesting choices."  It takes ideas
formed in the great /Contra III/ and expands the number of interesting
choices and interactions for the player, leading to an undeniable
classic.

I hope you've enjoyed this Design Review.  It requires a lot of effort
to put these together, so I'd like to take my hat off to Daniel Cook
at Lost Garden, who inspired me to use this format.  I'd also like to
thank [[twitter.com/InvolvingSalmon][Rick Wolf]] for contributing to and helping to crystallize the
ideas in this article.  I also could not have done this without the
research cited in my Resources, so shoutout to [[http://wikipedia.org][Wikipedia]] and [[http://www.hardcoregaming101.net][Hardcore
Gaming 101]].

Expect more Design Reviews as our book club mulls over more games in
the coming months.


** Resources
I got my information from:
- [[http://en.wikipedia.org/wiki/Gunstar_Heroes]]
- [[http://www.hardcoregaming101.net/gunstarheroes/gunstarheroes.htm]]

Many thanks to the original authors of these articles.

* WuXingRPS: Elemental Rock Paper Scissors                          :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:04
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
- UI
- UX
- game

{% img /images/assets/screenshot %}

WuXingRPS is a prototype 5-way rock paper scissors game.  The eventual
purpose for the prototype is to serve as a minigame to teach elemental
interactions in an RPG battle system.

I chose WuXing elements because they provide a nontraditional (in
terms of typical RPGs) series of interesting interactions.

** The Five Elements
{% img /images/assets/interactions %}

The five elements are Earth (yellow), Metal (silver), Water (black),
Wood (green), and Fire (red).  They have two levels of interactions
that you can look at anytime by pressing the =?= button in the bottom
right corner.

The *Destruction* interaction, indicated by red arrows, shows that,
for example, Metal chops Wood.  So Metal beats Wood.

The *Generation* interaction shows that, for example, Water grows
Wood.  So Wood "eats" Water.

That's all there is to it.  Click those element disks and try to get
more points than the computer.

** Surprise: iteration to find mechanics
In an earlier version of the prototype the player and enemy choices
that resulted in a generation relationship interaction led to a draw.
This meant that 3/5 interactions were draws.  The prototype was less
exciting than the current version.  This iteration was critical in
achieving a sense of fun in this prototype, as well as fleshing out
the goals of an eventual RPG battle system using the elemental
mechanic.

So making this prototype led to unexpected value.  Let that be a
lesson to keep it simple, because *sometimes the simple things that
are achievable within your current skillset can lead to surprising
results*.

** The next version

** Conclusion
I'm really interested in feedback, so give the game a try and tell me
what you think in the comments or on twitter.  If you're an artist
interested in gussying up my shameful attempts at UI and UX, please
please please reach out to me.  I'd love to improve this prototype.

* Math Team Hearts                                                  :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:04
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
Following exercise from @kinojabber: the rules for Math Team Hearts, a
speedy mod to Hearts that ironically involves less math.

- design
- mechanics
- game
- rules

Math Team Hearts is a speedy modification to Hearts that ironically
involves less math than the vanilla game.

From [[http://www.crcpress.com/product/isbn/9781482217162][Game Design Workshop]] by [[https://twitter.com/kinojabber][Tracy Fullerton]]:

#+BEGIN_QUOTE
One good way to train yourself in the design of game mechanics is to
challenge yourself with controlled design exercises in which you take
an existing game system, set a new player experience goal, and make
changes to the system to meet that goal.
#+END_QUOTE

** The Goal
We needed a game that played quickly, without a defined endpoint
(e.g. when one player reaches 100 points in normal Hearts) because
this game was played in free time waiting for school to start or
waiting for the bus.  There was no time to spend tallying up scores,
counting hearts and doing awkward math.

The rules also modify the risk-reward value of shooting the moon to
make it more attractive.  We found the game to be more interesting
when multiple parties were invested in shooting the moon with less
drawback from accumulating hearts.

** The Rules
The game plays like normal Hearts, except taking hearts no longer
gives you points.

- Taking any number of hearts without shooting the moon gives you 0
  points.
- Taking no hearts in a round gives you 1 point.
- Shooting the moon gives you 2 points.
- Taking the Queen without shooting the moon gives you -1 point.

The player with the most points at the end of play wins.

For more variety, use Dealer's choice drafting rules.  Each round, the
Dealer decides on how players will pass cards prior to play.

** Tweaks

I'm working from memory, so I'm not sure I've got the point values
exactly right.  Perhaps there should be more of a penalty for taking
the Queen without shooting the moon.  That would create a more
exciting risk-reward trade-off.

* Create a Dictionary with multiple keys in Unity C#                :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:04
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
A workaround to access a dictionary with multiple keys in Unity C#
#unity #unity3d #programming

- C#
- Unity
- Unity3d
- Unity2d

I want to create a lookup table for comparing a player choice and an
enemy choice.  Each pair of choices can lead to a variety of
outcomes.  So, in order to map the relationship between choice pair
and outcome, I've decided to use a Dictionary with choice pairs as
keys and outcomes as values.

To me, the obvious way to do this is by using [[http://en.wikipedia.org/wiki/Tuple][tuples]] to encode the
choice pairs.  I've already enumerated the choices so it's simple
enough to pair them off in tuples for use as keys for the Dictionary.
This approach worked, however, I ran into a couple of problems along
the way.

** Unity's C# doesn't have Tuples

Unity's [[http://en.wikipedia.org/wiki/Mono_%2528software%2529][Mono framework]] includes a C# compiler, runtime, and lots of
libraries.  The version of Mono included with version =4.6.1f1= of
Unity is =2.6.5 (tarball)=.  Mono recreates some of the features of
.NET, but apparently not a =Tuple= type.  The =Tuple= type got added
to .NET in version =4.0=.  Looks like Mono version =2.8= may support
it, but I'll have to wait for the folks at Unity to update Mono.

I checked the version of Mono using the following code:
#+BEGIN_SRC csharp
  using System;
  using System.Reflection;

  Type type = Type.GetType("Mono.Runtime");
  if (type != null) {
      MethodInfo displayName = type.GetMethod("GetDisplayName",
                                              BindingFlags.NonPublic | BindingFlags.Static);
      if (displayName != null)
        Debug.Log(displayName.Invoke(null, null));
   }

#+END_SRC

Since Mono =2.8= was released 4 years ago, it seems like Unity is in
no rush to update their Mono version.  So it looks like I'll have to
roll my own tuple class.


** Implementing a Pairs class

Since I'm only concerned with pairs of choices, I decided to implement
the simplest possible solution.  I followed the implementation of a
=Pair= class from [[http://stackoverflow.com/questions/569903/multi-value-dictionary][this Stack Overflow question regarding encoding
multiple values in Dictionaries]].  The trick is that the tuple
implemented here can be used to encode keys as well.

The critically important part of the =Pair= class is that it inherits
from =IEquatable= and implements methods for determining equality and
hashing.  The fundamental thing a Dictionary needs is to test whether
keys are equal in order to store or retrieve the correct values and it
typically does so by hashing the key.

I won't bother reproducing the code for the =Pair= class here.  You
can [[http://stackoverflow.com/a/569920][check it out for yourself]].

** How I wish I could use it

Once I implemented the =Pair= class in its own file =Pair.cs=, I had
to import it in the file where I wanted to create the Dictionary.
Also note that I'm [[http://msdn.microsoft.com/en-us/library/bb531208.aspx][using literal syntax to construct the Dictionary
when I define it]].  And yes, unlike most uses of curly braces in C#,
that =;= is necessary to end the line after the literal.

#+BEGIN_SRC csharp
  using Pair;

  // Not shown: lots of enums...

  Dictionary<Pair<Choice, Choice>, Outcome> lookup = new Dictionary<Pair<Choice, Choice>, Outcome> {
    {Pair(Choice.ChoiceOne, Choice.ChoiceOne), Outcome.Win},
    {Pair(Choice.ChoiceOne, Choice.ChoiceTwo), Outcome.Lose},
  };

  Outcome outcome = lookup[Pair(ChoiceOne, ChoiceOne)];
#+END_SRC

But alas, I run into this problem: =Using the generic type
`Pair<TFirst,TSecond>' requires `2' type argument(s)=.  I can't seem
to find any documentation detailing what I'm doing wrong.  Maybe it's
just a problem with Unity's version of Mono .NET runtime.

** The workaround: A Dictionary of Dictionaries
I've found a workaround.  It is, in my humble opinion, way less
elegant, but it gets the job done.

#+BEGIN_SRC csharp
  // Not shown: lots of enums...

  Dictionary<Choice, Dictionary<Choice, Outcome>> lookup = new Dictionary<Choice, Outcome> {
    {Choice.ChoiceOne, new Dictionary<Choice, Outcome> {
        {Choice.ChoiceOne, Outcome.Win},
        {Choice.ChoiceTwo, Outcome.Lose}
      }},
    {Choice.ChoiceTwo, new Dictionary<Choice, Outcome> {
        {Choice.ChoiceOne, Outcome.Lose},
        {Choice.ChoiceTwo, Outcome.Win}
      }}};

  Outcome outcome = lookup[Choice.ChoiceOne][Choice.ChoiceOne];

#+END_SRC

** Conclusion

I find the tuple key code way more readable than the Dictionary of
Dictionaries code.  You can imagine how the legibility of the
Dictionary of Dictionaries approach decreases with additional keys but
the tuple key code legibility remains the same no matter how many keys
you add.  This is probably a moot point for using two keys, as I have
in this example, but I hope you can appreciate why I think the tuple
approach is more elegant.

If you have any insight into how to solve the =Using the generic type
`Pair<TFirst,TSecond>' requires `2' type argument(s)= error I
encountered using the =Pair= class, please let me know in the comments
below or on [[http://twitter.com/zerosalife][twitter]].

* AdventureJam Prep                                                 :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:04
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
[[http://jams.gamejolt.io/adventurejam]]

[[http://www.adventurejam.org/forums/]]

[[http://jams.gamejolt.io/adventurejam/rules]]

A post announcing my intent to participate in #adventurejam.

- adventurejam

In *two weeks*, April 3 - April 17, [[https://twitter.com/fenderbenter][Cassie Benter]] and [[https://twitter.com/stacydavidson][Stacy Davidson]]
are hosting a game jam focused on creating adventure games called
[[http://adventurejam.org][#adventurejam]].  I share the organizers' love of point-and-click
adventure games, and I'm totally thrilled to announce my
participation.  #Adventurejam is a fortnight-long competition to
create and adventurous game-ish experience.

The [[http://jams.gamejolt.io/adventurejam/rules][rules]] of #adventurejam are more strict than [[http://procjam.tumblr.com/][#procjam]], [[http://zerosalife.github.io/blog/2014/11/01/make-things-that-make-things-number-procjam-2014/][the jam I
participated in last fall]].  They require that the work on a game take
place over the two weeks of the #adventurejam competition.  I don't
expect to have the time to create something that is truly competitive,
but I may as well play along.  Like #procjam, I plan on spending the
next series of blog posts covering #adventurejam-related content.

So, click every pixel on the screen, grab everything in sight, exhaust
every dialog option, and combine items in new and mysterious ways,
it's #adventurejam time.

I'd like to spend the rest of this post exploring the options in terms
of game engines for creating adventure games.  The website and forums
were great resources for constructing this list.  And I suspect that
I'll come across some new resources as the jam progresses.

** Engines (Or, A Decidedly Unresearched and Perfunctory List)

*** Graphical
**** Windows
- [[http://www.adventuregamestudio.co.uk/]]

- [[http://dead-code.org/home/]]

**** Non-windows
- [[http://codecanyon.net/item/jaguar-lucasarts-adventure-game-engine/8753130]]

- [[http://www.visionaire-studio.net/][Visionaire]]

- [[http://www.alpacaengine.com/]]
**** Unity
- [[http://age.seccia.com/]]

- [[http://www.adventurecreator.org/][Adventure Creator]]

*** Text
- [[http://inform7.com/][Inform]]
- [[http://textadventures.co.uk/quest][Quest]]
- [[http://twinery.org/][Twine]]

** The Adventure Jam Forums

The [[http://www.adventurejam.org/forums/][#adventurejam forums]] were a great resource for constructing this
overview of adventure game engines.  I only expect the information
there to grow as the jam progresses.

** My Plan
Given my workload, familiarity with and access to the tools listed
above, and artistic abilities, I'm going to go with Twine to get any
real progress done in the time constraints.

Like my [[http://zerosalife.github.io/blog/categories/procjam/][series of posts on #procjam]], I'll tag all the posts related to
#adventurejam so they're easily accessible.

[[https://indiegraph.wordpress.com/2013/01/14/twine-tips-for-beginners/]]


** How to participate
[[http://jams.gamejolt.io/adventurejam/faq]]

** Ideas
[[http://www.aesopfables.com/cgi/aesop1.cgi?1&TheBullandtheGoat]]
[[http://ancienthistory.about.com/library/bl/bl_aesop_lion_bull.htm]]

** Art tutorials
[[http://www.kafkaskoffee.com/tutorials.shtml]] (*Warning*: some art is
NSFW).
** Engine
[[http://age.seccia.com/]]

* Building Twine games from the command line                        :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:04
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
A post about building #twine games from the command line.  @twinethreads

- Twine
- Unity3d
- tools

I got it in my craw to write a short Twine game a while back.  I
wanted to familiarize myself with the language.  And writing a short
game in Twine seemed to be lower hanging fruit than trying to
implement my own text adventure framework for Unity or some other game
engine.

** Why not Unity?
That being said, there are other text adventure frameworks available
in the Unity App Store and there's a very intriguing Twine parser for
Unity called [[http://www.platoevolved.com/blog/unity-plugins/#!/~/product/category%3D2743024&id%3D35627540][Yarn]].

Yarn seems well suited to writing Bioware- and Black Isle-style
dialogues, where individual characters' dialogues are stored in
separate Twine files with scripts to load them at runtime.  It doesn't
seem like it does anything to solve the woes of writing a larger (than
one dialog tree) game in the usual Twine GUI.

There's too much to be learned by implementing things available on the
Unity App Store for me to pass that up in favor of saving time.  It's
true that my time is the most valuable asset I have, but it's also
very likely that I'll spend just as much time trying to figure out or
modify a Unity plugin from the App Store as I would trying to
implement something similar on my own.  That being said, in this case
for what I wanted to do, Twine was the path of least resistance.

** Why the command line?
I live in my text editor.  So, having to write in the Twine GUI tool's
rudimentary text editor isn't really my bag.  I've trained my muscle
memory to use these short cuts without thinking.  In fact, I don't
even bother to backspace to correct typos, I use the keyboard shortcut
in my editor to automatically step through the suggested spelling
corrections for the last word.  I'm entrenched.

Also, dealing with the visual clutter of the Twine GUI drives me nuts.
If I want 30 links from a single Twine Passage, I don't want to have
to do that manually, and I certainly don't want to try to organize it
so it's visually appealing.  There're algorithms for that visualizing
stuff, and algorithms are better at it.

** Getting started
The first step is to [[https://github.com/tweecode/twee][install =twee=]] the command line tool used to
compile Twine files.

Then /all/ you have to do is write your story in the proper [[https://github.com/tweecode/TwineQuest/wiki/Twee-file-format][Twine file
format]].  This is the hardest part, not because the syntax is
complicated, but because you've actually got to come up with an
interesting and interactive story!

** Compiling your twine files

=Twee= will output files to HTML formatted in the usual Twine style.
It gets tedious to type commands over and over again, so I automate
building the HTML with a Makefile

#+BEGIN_SRC
story.html : *.tw tweefiles/*.tw
	~/twee/twee -t sugarcane $^ > $@
	open story.html

json: *.tw tweefiles/*.tw
	~/twee/twee -t json $^ > story.json

clean:
	rm -f story.html

.PHONY: json

#+END_SRC

Placing this Makefile in the root of your twine directory allows you
to compile the HTML file by the commands =make clean; make=.  You can
read more about the Makefile syntax in the [[http://www.gnu.org/software/make/manual/make.html#Rule-Syntax][GNU make manual]].  The
Makefile looks for Twine file format ending in =.tw=, either in the
root directory or a directory for =tweefiles/=.

You can also compile to the JSON format by using =make json=.


** Getting some of the newer Twine features to work
I [[https://github.com/tweecode/twee/issues/12][couldn't get some of the newer Twine features to work]] when I
compiled the twee code from the command line.  I think this stems from
the twee command line tool failing to parse some of the newer features
implemented in the Twine GUI.

In order to get some of the newer features to work, use the =Makefile=
to compile the twee code, then import the resulting =.html= file in
the Twine GUI.  Finally export HTML from the Twine GUI.

That being said, it was still nice to rapidly iterate through versions
of a story without having to get bogged down in the Twine GUI.  I
could write Twine code organized in files in a logical arrangement,
then compile them into a single HTML file for testing and release.
Let me know if you have suggestions that would improve this Twine
workflow or if you take a different approach.

* Deploying Twine games to Game Jolt                                :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-06-07 Sun 15:04
  :ARCHIVE_FILE: /su:zerosalife@cliff-rodgers-computer-2.local:/Users/zerosalife/octopress/octo.org
  :ARCHIVE_OLPATH: PUBLISHED
  :ARCHIVE_CATEGORY: octo
  :END:
I explore deployment to @gamejolt in preparation for submitting a
@twinethreads game to #adventurejam.

- adventurejam

The [[http://jams.gamejolt.io/adventurejam][#adventurejam]] started last night.  It lasts two weeks, until
April 17.  I'll be covering my participation on here the blog under
the [[http://zerosalife.github.io/blog/categories/adventurejam/][adventurejam]] tag.

Today, I'm going to deploy small prototype Twine game to [[http://gamejolt.com][Game Jolt]].
I made this game a while back, and while it's a complete prototype,
I'm putting it out there in all of its buggy glory.  The game served
its purpose of familiarizing me with some of the ins and outs of
Twine, as well as a build process I [[http://zerosalife.github.io/blog/2015/03/28/building-twine-games-from-the-command-line/][detailed last week]].

** The Age of the Flying Boat
I made a small prototype game based off of Hayao Miyazaki's comic that
was turned into the movie /Porco Rosso/.  You must figure out how to
fuel-up and start your airplane to respond to a desperate call for
help.

You can play it [[http://gamejolt.com/games/adventure/the-age-of-the-flying-boat/58040/][here]] on [[http://gamejolt.com][Game Jolt]].

** Deploying a Twine game to Game Jolt
Here's what it took for me to add my first game on Game Jolt.

** Play by the rules
First, I had to agree to the rules.

** Title, links, and copy
Next, I had to enter some information about my game.

** Thumbnail and maturity rating
Then, I had a couple of necessary things to do: uploading a thumbnail
and setting a surprisingly detailed maturity rating for my game.
There were several optional steps that I skipped for this game.

There were a lot of headaches with the "thumbnail".  It must be 16:9
and it must be at least 588 pixels tall.  Sounds like a full
screenshot, to me.  But, this constraint is necessary because Game
Jolt uses a bunch of different dimensions to display the thumbnail on
the website.

** Game Distribution
Next, I uploaded a Game Distribution of the HTML persuasion.  I needed
to up load a zip file containing my twine-generated =index.html=.

** Unhiding so people can play your game
Now, here's the critical part.

There were two steps to make my game available on the site.  First, I
had to unhide my game's profile when I was satisfied with information
I entered.  Second, and most importantly, I had to specifically unhide
the html we uploaded as a Game Distribution in the Distributions tab.

** Whew!
If you've followed along this far, we did it!  We uploaded a game to
Game Jolt.  It's a surprisingly detailed process, but that amount of
detail gives you a lot of tools make your game's presentation shine.

Go check out /[[http://gamejolt.com/games/adventure/the-age-of-the-flying-boat/58040/][The Age of the Flying Boat]]/ and let me know what you
think in the comments or on [[http://twitter.com/zerosalife][twitter]].
