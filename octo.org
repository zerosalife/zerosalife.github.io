* Setting up octopress
** Clone into the octopress repo
#+BEGIN_EXAMPLE
git clone git://github.com/imathis/octopress.git zerosalife.github.io
#+END_EXAMPLE

** Install dependencies and setup github pages

#+BEGIN_EXAMPLE
bundle install
rake install

#+END_EXAMPLE

Make sure git is set up to use the correct user information.

#+BEGIN_EXAMPLE
git config --list
#+END_EXAMPLE


#+BEGIN_EXAMPLE
rake setup_github_pages
#+END_EXAMPLE

** Su wu
#+BEGIN_EXAMPLE
/su:zerosalife@machine:
#+END_EXAMPLE

** Add image to header
[[http://blog.bigdinosaur.org/changing-octopresss-header/]]

** Add about page
[[http://gangmax.me/blog/2012/05/04/add-about-page-in-octopress/]]

** Code blocks in octopress
[[http://octopress.org/docs/plugins/codeblock/]]

** Markdown cheatsheet
[[http://ddloeffler.blogspot.com/2013/04/keybindings-for-emacs-markdown-mode.html]]

[[https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet]]

** Favicon editor
[[http://favicon-generator.org/editor/]]
0
** Read more
Use the =<!--more-->= tag.

[[http://octopress.org/docs/blogging/plugins/]]
** Center text
you can center text by surrounding it with the =-> text <-= symbols

** Modal dialogs in octopress
Modal content

[[http://octopressthemes.com/blog/2012/11/10/adding-a-modal-dialog-to-octopress-with-foundation-zurb/]]

Even better:
[[https://github.com/rayfaddis/octopress-BootstrapModal]]

** Embedded gists using the gist-tag plugin
Something's horribly broken with the gist-tag plugin on my computer.
It throws =300= errors when trying to embed gists.  I found a couple
of unhelpful github issues that didn't solve the problem.

[[https://github.com/imathis/octopress/issues/904][This issue suggests that there isn't a problem.]]  They advise to
uninstall and reinstall ruby and all gems...

[[https://gist.github.com/imathis/1104557][This issue gives instructions for uninstalling and reinstalling ruby
and all gems.]]


My solution was to use githubs embed code to embed the gist the hard
way.

** Embedding tweets
Using the [[https://github.com/scottwb/jekyll-tweet-tag]] plugin.

Had to patch it per this pull request:
[[https://github.com/scottwb/jekyll-tweet-tag/pull/7]]

** Linking to other blog posts
See
[[https://github.com/imathis/octopress/issues/544#issuecomment-5923083]]

Either use relative directories:
=/blog/2014/01/05/blah=

or syntactic sugar:

={% post_url 2014-01-05-blah %}=

** Page view and popular posts
[[https://github.com/jhshi/octopress-page-view]]

[[https://github.com/jhshi/octopress-popular-posts]]

** Tip Donation
Could rewrite
https://github.com/PartTimeLegend/octopress-flattr-donation-aside to
use moonclerk.

* PUBLISHED
** Aurion and the Aurochs is out
- game
- adventurejam

I'm happy to announce that my [[http://jams.gamejolt.io/adventurejam][#adventurejam]] game is finished and
released.  I'll do a more in-depth post-mortem next week.  In the
coming weeks, before the 30-day voting deadline ends, I want to take a
look at some of the [[http://jams.gamejolt.io/adventurejam/games][other submissions]] that pique my interest.

You can [[http://gamejolt.com/games/adventure/aurion-and-the-aurochs/60738/][play /Aurion and the Aurochs/ on gamejolt]] and you can [[https://github.com/zerosalife/aurion][view the
source on github]].  Please leave me some feedback in the comments here
or on twitter [[https://twitter.com/zerosalife][@zerosalife]].

** Aurion and the Aurochs Post-mortem
- adventurejam
- post-mortem
- game

Join me as I look back on my [[http://jams.gamejolt.io/adventurejam][#adventurejam]] game, /[[http://jams.gamejolt.io/adventurejam/games/aurion-and-the-aurochs/60738][Aurion and the
Aurochs]]/.  You can take a [[http://gamejolt.com/games/adventure/aurion-and-the-aurochs/60738/][look at the game]] over on [[http://gamejolt.com][gamejolt]] and you
can [[https://github.com/zerosalife/aurion][view the sourcecode here]].  You can see all of the entries at
[[http://jams.gamejolt.io/adventurejam/games][adventurejam's site]].

I'm going to look at things that worked, things that didn't, and the
lessons I'll take with me moving forward.

*** What Worked?

**** Pre-planning
I sketched out the plot using [[http://www.lamemage.com/microscope/][Microscope]] to define events, locations,
and potential actions and routes the player could take through the
game.  Microscope's 3"x5" index card format made it easy to move ideas
around when they weren't working.  And it made it easy to see the
overall flow of the game.

Once I got the plot Microscope'd to my liking, I transferred it to the
[[https://github.com/zerosalife/aurion#microscope][project's readme]], using checkmarks and crosses to represent the filled
and unfilled circles of Microscope.  Please note, that there be
spoilers, so [[http://gamejolt.com/games/adventure/aurion-and-the-aurochs/60738/][go play the game]] if you haven't yet.

While I wasn't using the circles in the typical way that Microscope
proposes, it did help me visualize the potential routes for "good" and
"bad" alternate endings.

**** Twine macros
I used some [[https://github.com/zerosalife/aurion#created-using-artisanal-macros-from][Twine macros]] for the first time in this game.  I can see
how they add some impressive functionality to Twine.

I reckon, if I find the right macros, I would save a ton of time
implementing functionality that has already been better implemented as
drop-in macros.

*** What Didn't Work?

**** Scope
I set out to create what I thought at the time would be a relatively
simple adventure game.  However, I failed to appreciate the
combinatorial proliferation of states that blossomed out as I added
more and more items and interactions.

**** Timeframe and Pacing

I found the rigid format of the gamejam to be oppressive and
stressful.

**** Prose
Because I was so focused on implementing the game I wanted in the time
I had, I feel that the initial creative spark that drove me to design
/Aurion and the Aurochs/ wasn't allowed to grow into the creative
prose flamethrower that I wanted to torch raw palceholder text into a
fine /crème brûlée/.

I can't force that [[http://zerosalife.github.io/blog/2014/05/31/hammock-driven-creativity/][hammock-driven imagination]], especially when I feel
crunched for time.

*** What Will I Improve Next Time?

**** Plotting
I will definitely continue to use Microscope for brainstorming and
outlining plots.  It could be fun to collaborate with multiple people
on this process, as Microscope is meant to be a multiplayer
experience.

It may be worthwhile to write-up the "single-player" approach I used
for Microscope brainstorming.

I'd also be interested in trying out Tim Schafer's freewriting
technique that I came across in the [[http://adventure.doublefine.com/][Double Fine Adventure
documentaries]].  This probably merits its own post in the future.

**** Scope and Pacing
I will think hard about whether I should participate in gamejams with
such strict time requirements for submissions.  I refuse to compromise
on work and life commitments to participate in what should be a fun,
creative hobby.

I feel emotionally and creatively drained from adventurejam, and I'd prefer
to have steady, fulfilling creative output.

I think the /laissez-faire/ format of [[http://zerosalife.github.io/blog/2014/11/01/make-things-that-make-things-number-procjam-2014/][#procjam]] was healthier.  I should
also note that, although I submitted more things to procjam, the scope
of each of those projects was much smaller than my project for
#adventurejam.

I think I could have compromised on delivering what was a more or less
finished game.  I could have submitted a more prototype-y version that
I could work on later.  In fact, I may still refine the prose of
/Aurion and the Aurochs/ if I feel so inclined in the future.

That being said, I'm happy with the game I was able to deliver in the
constraints of the jam.

**** Investigate the Twine macro ecosystem

Maybe in a future post, I'll look into some of the macros out there.
It'd be useful to write simple example code too.

*** Conclusion
Well, that's it.  I have some good perspective going forward.  In the
coming weeks, I'm going to look at some of my favorite submissions and
finalize my votes for the contest.

** Adventurejam reviews

Thoughts on #adventurejam games by @quinnstephens @MechanicMoon @davegrey and more

- game
- review
- adventurejam

Here are some of my thoughts on my favorite entries to [[http://jams.gamejolt.io/adventurejam][#adventurejam]]
so far.  Voting ends in a little over two weeks.  So, I'm not ruling
out the possibility of looking at more games.

*** [[http://jams.gamejolt.io/adventurejam/games/ree-s-ruined-earth-courier-service-shipment-delayed/60572][Ree's Ruined Earth Courier Service: Shipment Delayed]]

- Amazing graphics.
- Loving the dialogue.
- I played the Unity version.

I find the story, characters, and world-building totally compelling.

Unfortunately interacting with the world is proving difficult.  I
could use some indication of when I can walk offscreen.  I think that
could help with some pathfinding issues.

I'd really like to see more work done on this game, and I'd like to
see more content in the Ree's universe.

*** [[http://jams.gamejolt.io/adventurejam/games/the-endless-night-prelude/58725][The Endless Night]]
For as much as I wanted to play this game, I couldn't.  The platform
restrictions kept me from trying this interesting looking game.  I
think the graphics for this game look pretty cool.

*** [[http://jams.gamejolt.io/adventurejam/games/speak-of-the-cloud/60613][Speak of the Cloud]]
- Sound effects do a good job of situating the experience in a world.

- Loving the /Dr. Strangelove/ allusions.

- Character animations are impressive, and jive well with the cartoon
art style.

Unfortunately, I couldn't play this game as much as I would have
liked.  It's compelling, and the art design really sells intriguing,
interactive spaces that make up for the ridiculous pixel-hunting
puzzle I encountered.

*** [[http://jams.gamejolt.io/adventurejam/games/walkman/60724][Walkman]]
Like the animation and the constraint of linear movement.

*** [[http://jams.gamejolt.io/adventurejam/games/cascade/58292][Cascade]]
- Got chills from this one.
- The sparse sound does a great job of communicating atmosphere.

- Got the sense that there was more to this game than there actually
  was (in a good way), I think due to the writing.

Nice scoping for a two-week game jam.  I think this is my runner-up,
based on the strength of its story.

*** [[http://gamejolt.com/games/adventure/theropods/58684/][Therapods]]
- Great art, animation.
- Loving the parallax and layering.
- Great sound design.
- Great overall design, love the inventory and interface.
- Great examples of one-screen puzzles.  The puzzles that I've heard
  Tim Schafer call donkey and rider puzzles.

/Theropods/ is my favorite game of the jam.  Not only did it scope the game correctly
for the development team, it was also playable in a reasonable amount
of time.

*** Conclusion
So there you have it, go out there and try some of these games.  If
you only have time to try one, check out /[[http://gamejolt.com/games/adventure/theropods/58684/][Theropods]]/.  It's groovy.

** Raycast Lighting in Skytorn
Discerning the lighting algorithm @NoelFB used for #Skytorn


- lighting
- design
- mechanics


@NoelFB posted a [[https://twitter.com/NoelFB/status/543586120731074561/photo/1][screenshot]] showing how dynamic lighting works in
[[http://skytorn-game.com/][Skytorn]].

{% tweet 543586120731074561 %}

*** The algorithm
From what I can tell, the algorithm looks something like this:

1. Raycast out for 360° around the light source, starting in a
   clockwise direction.  If the rays encounter a collidable object,
   add it to the list of pink lines defining the polygonal shape of
   the lit area.  If the ray exceeds the distance of the light
   gradient, clamp the triangle edge defining the pink line at that
   distance.
2. For each of the collidable objects encountered, extend a ray past
   their vertices until it hits another collidable to create the
   obscured lighting effect visible to down and to the right of the
   light source.
3. Finally construct a set of triangles by starting from the closest
   edge in the list defining the pink lines to form the polygon.

** More Skytorn Raycast Lighting Algorithm Details
Thanks @NoelFB for explaining more details of the #Skytorn lighting algorithm

- lighting
- design
- mechanics
- algorithms

[[http://zerosalife.github.io/blog/2015/05/09/raycast-lighting-in-skytorn/][Last week]] I covered the lighting algorithm [[https://twitter.com/NoelFB][@NoelFB]] is implementing for
[[http://skytorngame.com/][Skytorn]].  Noel was nice enough to correct my mistaken assumptions
about the inner workings of the lighting algorithm.

Looks like I kind of inverted the polarity of the raycasting with
regard to the player and the level geometry.

{% tweet 543586120731074561 %}

*** The algorithm
The algorithm doesn't raycast in the full 360° circle around
player--that would be too costly.  Instead, it takes advantage of the
fact that the level's ground collision geometry is stored in a grid.

1. Given the player's location, there is a small list of collision
   geometry in the 8 or so grid cells surrounding the player.
2. The lighting algorithm raycasts from the corners of the level
   geometry to the player, instead of from the player out to the
   geometry.
3. Then, to prevent the lighting from looking too triangular, the
   algorithm adds a few more raycasts out from the player to the
   geometry in between the other raycasts.

*** That's actually all there is to it
The algorithm I originally envisioned was naive and costly.  But, it's
nice to hear that I wasn't far off--I simply inverted the solution.
It was also nice to learn about a benefit of storing level geometry in
a grid that I previously failed to appreciate.

Heaping thanks to @NoelFB for helping explain the algorithm, instead
of getting bent out of shape about my lame attempt to reverse engineer
the inner workings of Skytorn from a screenshot.

** Midway through adventurejam I'm attending Midwest Gaming Classic
A quick update on #adventurejam because I'm attending @MGC_gaming today.

- adventurejam

*** Quick update on #adventurejam

I feel like my game is on track to finish next Friday.  I'm happy to
say it's feature complete.  I'll spend the next week polishing,
various flavors of bughunting (maybe even some bugfishing and
bugtrapping), and, most important of all, prosifying.  My goal is to
come up with a little game that's compelling to play, rather than just
a series of links to click.

*** Midwest Gaming Classic
Instead of a normal blog post, I want to take this time to shout out
the [[https://twitter.com/mgc_gaming][Midwest Gaming Classic]].  I'll be attending today.  So if you're
there hit me up [[http://twitter.com/zerosalife][@zerosalife]].

** Prototyping Rectangles in Unity 2D for Dummy
Prototyping Rectangles in Unity 2D for Dummy (me)

- Unity
- design
- prototype
- UnityJS

I'm the dummy.  Prototyping with 2d boxes in Unity JavaScript has
proven surprisingly hard.  I think the difficulty I'm having is that
I'm not exactly sure what I'm trying to do.  What follows is an
example of *one* way (notice that I didn't say THE *RIGHT* WAY) to
prototype with 2d rectangles in Unity.  I'm still too much of a noob
to have strong opinions on the right way to go about doing this.
Expect more posts on this topic as I develop my expertise.

[[http://en.wikipedia.org/wiki/Discoverability][Discoverability]] is something I prize in programming languages and
environments, especially when I'm learning them.  While Unity's
documentation is thorough, the lack of congruence between the GUI
environment and coding leads to poor discoverability.  There's not a
one-to-one correspondence between the labels for =Components= in the
GUI inspector and their names and attributes in code.

<!--more-->

Most of the time, Google is my method for discovering new
functionality in Unity.  The problem with this method, and even the
documentation, is that I'm never quite sure if the solution I've found
is the best solution, the only way to do something, or the wrong way
to do something.

I'm trying to get simple rectangular boxes to work in Unity 2d for
prototyping movement, hitboxes for attacsk, etc.  The information I
can find either deals with real-deal-Holyfield sprites or =GUIBoxes=.
It will be nice to work with =Sprites= eventually, but I just want to
get a box that can walk around and jump, at this point.  =GUIBoxes=
seem like the wrong type of boxes, if I want to prototype something
that will eventually be a =Sprite=.

As near as I can tell, the =Sprite= is a (relatively) new way of
making a flat 2D =Plane= in Unity.  I couldn't seem to find anything
dealing with =Sprites= without creating them in the Unity GUI
interface.

So, I started out following a Unity Answers question [[http://answers.unity3d.com/questions/139808/creating-a-plane-mesh-directly-from-code.html][here]].

*** Getting the Mesh to gel

First, I created a brand-spankin new Unity 2D project.  I had to
create an empty =GameObject= to host my =PlaneTest.js= script
=Component=.  I included a variable =size= to control the size of the
box, so you can play around with that in the Editor interface.

Next, I had to create a =Mesh= that would be the actual geometry of
the plane.  Now, the =Mesh= I'm making differs from the stock Unity
=Plane= =GameObject=.  [[http://www.third-helix.com/2012/02/making-2d-games-with-unity/][This blog post]] shows that Unity's =Plane=
defaults to a 10 x 10 quad mesh with a couple hundred triangles.  A
quad is just a square made of two triangle faces, [[http://blog.nobel-joergensen.com/2010/12/25/procedural-generated-mesh-in-unity/][this blog post]] goes
into more detail.

Here we [[http://i.eho.st/pgtxqdii.gif][do it live]] by defining a =name= =String=, an =array= of
=Vector3= =vertices=, an =array= of =uv= texture coordinates, and an
=array= of =triangles= faces.

#+BEGIN_SRC js
    var m: Mesh = new Mesh();
    m.name = "Scripted_Plane_New_Mesh";
    m.vertices = [Vector3(-size, -size, 0.01),
                  Vector3(size, -size, 0.01),
                  Vector3(size, size, 0.01),
                  Vector3(-size, size, 0.01)];
    m.uv = [Vector2(0, 0),
            Vector2(0, 1),
            Vector2(1, 1),
            Vector2(1, 0)];
    m.triangles = [0, 1, 2,
                   0, 2, 3];
#+END_SRC

*** Who you calling normal?

At one point I thought I had to =RecalculateNormals=, according to the
Unity Answers example above.  But it doesn't seem to make a
difference.  Here's a great example of the Unity discoverability
problem.  Since it doesn't /seem/ to make a difference, I don't know
whether to trust the Unity Answers that received 5 upvotes or to go
with parsimony.

A little more digging [[http://forum.unity3d.com/threads/210399-4-3-Sprites-and-Lighting][reveals]] that normal maps are particularly
important for lighting.  Since the =Sprite Shader= I intend to use
don't use normal maps, we can leave it out.

*** OBJECTION!!

Time to create the =GameObject= that will hold a =MeshRenderer=,
=MeshFilter=, and =MeshCollider=.  According to the [[http://docs.unity3d.com/Documentation/Components/class-MeshFilter.html][docs]], a
=MeshFilter= takes a mesh, like the one we created above, and passes
it to the =MeshRenderer= for rendering to the screen.  Not sure what
it's /filtering/ or why there's an intermediate =Component=, but there
you go.  The [[http://docs.unity3d.com/Documentation/Components/class-MeshRenderer.html][docs]] say the =MeshRenderer= then takes the geometry from
the =MeshFilter= and renders it on the screen at the position defined
by the =GameObject='s =Transform=.

#+BEGIN_SRC js
  var obj: GameObject = new GameObject("New_Plane_From_Script",
                                       MeshRenderer,
                                       MeshFilter,
                                       MeshCollider);
  obj.GetComponent(MeshFilter).mesh = m;
#+END_SRC

*** Time for texture

Next we create a =Texture2D= to hold the color information so the box
has some panache.  The =Texture2D= goes into the =MeshRenderer='s
=mainTexture= slot.

#+BEGIN_SRC js
  var texture: Texture2D;
  texture = new Texture2D(size, size, TextureFormat.ARGB4444, false);
  obj.renderer.material.mainTexture = texture;


#+END_SRC

I don't know too much about how =Texture2D= works right now, but
there's plenty to read in the [[http://docs.unity3d.com/Documentation/ScriptReference/Texture2D.html][docs]].


*** A splash of color
Here we generate some random RGB values, normalize them for Unity's
0.0-1.0 colorspace and make a =Color= to put into the =MeshRenderer='s
color slot.

#+BEGIN_SRC js
  var red: float = Random.Range(63, 255) / 255f;
  var green: float = Random.Range(63, 255) / 255f;
  var blue: float = Random.Range(63, 255) / 255f;
  var color = Color(red, green, blue);
  obj.renderer.material.color = color;
#+END_SRC

*** The crucial shader
At this point, I tested my code and got no errors. However, to my
surprise I didn't see anything rendered on the screen.

I learned that I needed to use a =Sprite Shader= to get the colored
mesh to render properly.  Here's how I did it:

#+BEGIN_SRC js
  var spriteShader: Shader = Shader.Find("Sprites/Default");
  obj.renderer.material.shader = spriteShader;
#+END_SRC

*** Boxes for dummy
I don't feel so dumb anymore because this was a complex process.  And
it wasn't until the very last crucial step that I saw anything
remotely box-like.

I've posted the code to a gist [[https://gist.github.com/zerosalife/743cf797112d62978bec][here]] so you can clone the script for
yourself, to give it a whirl.  I found that setting =size= to 2 is a
nice place to start.


** Creating a Dictionary of Lists in Unity JavaScript
Tips for creating a Dictionary of Lists in #unity3d #javascript

- JavaScript
- Unity
- Unity3d
- tools
- algorithms

I ran into a few problems trying to create a [[http://wiki.unity3d.com/index.php?title%3DWhich_Kind_Of_Array_Or_Collection_Should_I_Use%253F#Generic_Dictionary][Dictionary]] of [[http://wiki.unity3d.com/index.php?title%3DWhich_Kind_Of_Array_Or_Collection_Should_I_Use%253F#Generic_List][Lists]] in
Unity JavaScript.  So I thought I'd share some of the tips I learned
here.

I'm interested in creating a Dictionary to hold [[http://en.wikipedia.org/wiki/Markov_chain#Markov_text_generators][Markov Chain
information]] in order to generate text.  So I'd like to be able to
create a Dictionary holding a variable length of items for each of its
Keys.  I'd also like to be able to update the mapping at runtime.

It would look something like this:
- Key1 :: Item1, Item2, Item3
- Key2 :: Item4

At runtime, I'd like to be able to say: "Append =Item5= to =Key2=."

Here's what I came up with in Unity JavaScript.  I started out by
initializing a =table= in my script prior to the =Start= function. The
var =table= holds our mapping of Keys of type =String= to Values of
type =List.<int>=, or Lists of integers.

#+BEGIN_SRC javascript start:3
  import System.Collections.Generic;
  // White space matters.
  var table:Dictionary.<String,List.<int> > = new Dictionary.<String,List.<int> >();
#+END_SRC

The first hiccup I ran into is that [[http://forum.unity3d.com/threads/80227-Creating-a-Dictionary-of-Lists-in-Javascript?p%3D513471&viewfull%3D1#post513471][white space matters]] when creating
Generics in Unity JavaScript.  The compiler will throw an error if it
sees two =>>= in a row.

Then I fill the table with our test mappings.

#+BEGIN_SRC javascript start:9
  // Fill our table with Lists containing ints using Arrays to intialize
  // the Lists.
  table["a"] = new List.<int>([1]);
  table["b"] = new List.<int>([2]);
  table["c"] = new List.<int>([3]);

#+END_SRC


As you can see, you can [[http://answers.unity3d.com/questions/221476/javascript-array-to-generic-list.html][construct a List from an Array]].  Cool.

In the =Start= function, I iterate over the Keys in the Dictionary,
Add the item =4= to the Value of Key =c=, and print out the first item
of each of the =values=.  Finally, we check to see whether =4= was
appended to the desired entry.

#+BEGIN_SRC javascript start:13
function Start () {
    // Iterate over the Keys in our Dictionary.
    for(var str:String in table.Keys) {
        // Get the value for our Key.
        var value:List.<int> = table[str];

        // If the Key is our desired Key, append to its list.
        if (str == "c") {
            value.Add(4);
        }

        // Print the first item in each of the Lists.
        print(value[0]);
    }

    // Print the appended item to see that it worked.
    print(table["c"][1]);

}
#+END_SRC

Then I attach this script to the Main Camera of a fresh Scene for
testing purposes.  Bada bing, bada boom.

Attaching the script to any old object in the scene would work.  I
just chose the Main Camera because the camera object is there by
default.

This was all relatively straightforward, after I understood some of
the quirks of Unity's JavaScript syntax.  You can find an example
script using this code [[https://gist.github.com/zerosalife/f13eb62bf7bd57799db6][here]].

** Create a Dictionary of Lists in Unity C#
Tips for creating a Dictionary of Lists in #unity3d #csharp

#unity3d

- Unity
- Unity3d
- C#
- tools
- algorithms

[[http://zerosalife.github.io/blog/2015/06/13/creating-a-dictionary-of-lists-in-unity-javascript/][Last week]], I published an article about creating a Dictionary of Lists
in Unity using Unity's JavaScript.  Some of the syntax is changed in
C#, but the overall algorithm is exactly the same.  I've already
mentioned the underlying motive, so I'll dive right in.

Here's how to create a Dictionary of Lists in C# for Unity.

#+BEGIN_SRC csharp
  Dictionary<string, List<int>> table = new Dictionary<string, List<int>>();


  void Start() {
      // Fill our table with Lists containing ints using Arrays to intialize
      // the Lists.
      table["a"] = new List<int>(){1};
      table["b"] = new List<int>(){2};
      table["c"] = new List<int>(){3};

      foreach(string str in table.Keys) {
          // Get the value for our Key.
          List<int> value = table[str];

          // If the Key is the desired Key, append to its list.
          if(str == "c") {
              value.Add(4);
          }

          // print the first item in each of the Lists.
          Debug.Log(value[0]);
      }

      // Print the appended item to see that it worked.
      Debug.Log(table["c"][1]);
  }

#+END_SRC

These are the main differences between the Unity JavaScript and C#
code.  Take a look at the full file in a gist on github.



** Probabilistic Entity Spawning in Unity JavaScript
This week I show how to generate random items with specific probabilities dictated by the game environment in #unity3d #JavaScript.


#unity3d

- JavaScript
- Unity
- Unity3d
- tools
- algorithms

The Unity documentation has an example showing how to generate random
indexes satisfying a distribution of probabilities (see: [[http://docs.unity3d.com/Manual/RandomNumbers.html][Choosing
Items with Different Probabilities]]).  In this post I'll show how to
use a similar approach to generate random items with specific
probabilities dictated by the environment.

<!--more-->

I want to be able to generate an item code, say =Red=, =Green=, or
=Black=, given a list of floating point probabilities dictated by the
current environmental area in my game, say for example =desert= or
=grassland=.

Varying the probability of encountering items will give each area a
unique flavor.  If the player needs a =Red= item, the player will need
to seek out areas in which the probability for encountering =Red=
items is high.  I hope this will drive player exploration and
investigation.

I'll start by defining an array of possible item types.  (According to
[[http://wiki.unity3d.com/index.php/Head_First_into_Unity_with_UnityScript#Use_enum][this introduction to Unity JavaScript]], I should prefer =enum=.)

#+BEGIN_SRC javascript start:5
  var ents : String[] = ["Red", "Green", "Black", "Orange"];
#+END_SRC

Since this is a small example, I'll forego the efficiency and security
that =enum=s provide for the convenience of using a simple =String=
array.  I'll note that this is a good spot to do some refactoring in a
real project where a variety of systems may have to interact with the
item types.

I then define a Dictionary =areas= of Lists of floating point
probabilities.  These areas correspond to terrains that contain unique
distributions of items. The =areas= Dictionary accepts =String=s
specifying the desired terrain.

It's important to note that the order of the probabilities correspond
to the order of the item types in =ent=s.

#+BEGIN_SRC javascript start:7
  var areas = new Dictionary.<String, List.<float> >();
  areas["desert"] = new List.<float>([0.1, 0.05, 0.425, 0.425]);
  areas["grassland"] = new List.<float>([0.3, 0.35, 0.1, 0.25]);
#+END_SRC

So, in the =grassland= area, there will be a 30% chance of choosing a
=Red= item.

Now that I've defined the data, I need a function to choose the
appropriate index given a List of probabilities.  This function is
lifted with minor modifications from the [[http://docs.unity3d.com/Documentation/Manual/RandomNumbers.html][Unity Documentation]].  Take a
look at that documentation for a better visualization of the algorithm
than I could do with words.  Really, do it!

#+BEGIN_SRC javascript start:11
  function Choose(probs : List.<float>) : int {
      // Returns the index of a probabilistically determined random
      // entity, given by the probability distributions in probs.
      // e.g.:
      // probs : List.<float>([0.5, 0.2, 0.1, 0.2]);
      // entity = entities[Choose(probs)];
      //
      // See [[http://docs.unity3d.com/Documentation/Manual/RandomNumbers.html]]

      // Watch out!  If you fail to specify total's type as float, it
      // will add the probs using integer addition.  This will floor
      // each of the probs to 0.
      var total : float = 0;

      for (x in probs) {
          total += x;
      }

      var randomPoint = Random.value * total;

      for(var i = 0; i < probs.Count; i++) {
          if (randomPoint < probs[i])
              return i;
          else
              // Shift the strip down, adjusting the random point's
              // value to see whether it falls within the next prob.
              randomPoint -= probs[i];
      }
      // Take care of possibility that randomPoint is 1.0 or 100% by
      // returning the last element of probs.  Avoids allowing Choose to
      // return a 0 probability event (which would be possible using the
      // <= test).
      return probs.Count - 1;

  }
#+END_SRC

Now to choose an item:

#+BEGIN_SRC javascript start:48
  var item = ents[Choose(areas["grassland"])];
  Debug.Log(item);
#+END_SRC

That's all there is to it. I've put an [[https://github.com/zerosalife/ProbEntitySpawnExample][example Unity project with this
code on github]].

** Probabilistic entity spawning in Unity C#
Quick post this week on porting probabilistic entity spawning code from JavaScript to CSharp

- C#
- Unity
- Unity3d
- tools
- algorithms

[[http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript/][Last week]] I showed how to do probabilistic entity spawning in Unity
JS.  This week I'll port that code over to C#.  You can find examples
of both the C# and JavaScript versions of the code in a [[https://github.com/zerosalife/ProbEntitySpawnExample][repository on
github]].  Since I've already explained the Algorithm I will focus
mainly on the differences in the code.

There isn't syntactic sugar for Dictionary assignment in C# :( This
required moving the assignment for the =areas= Dictionary into the
=Start= function.  It's a move that enforces best practices, strictly
speaking, but risks confusion about the content of the =areas=
Dictionary at runtime.  If you'd like to read up on Dictionaries in
C#, I found [[https://msdn.microsoft.com/en-us/library/fkbw11z0.aspx][this resource]] helpful.

The =foreach= command requires a type. This is a case where a stricter
language will save confusion in the long run.

Lists can be created from specific arrays of the List's type, but not
from some arbitrary array, as in JavaScript.  Again, this is a feature
of a stricter language that causes some extra work up-front, but will
make things more clear in the long run.

For an in-depth tour of the algorithm for spawning entities, check out
[[http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript/][last week's post]] and the [[https://github.com/zerosalife/ProbEntitySpawnExample][example repository on github]].

** Satoru Iwata
A memorable gamedev quote from Satoru Iwata.

- design

#+BEGIN_QUOTE
Video games are meant to be just one thing. Fun. Fun for everyone.
#+END_QUOTE
-- Satoru Iwata 1959-2015



* Business cards


** For the blog
Zero's A Life

Meditations on Games and Design

[[http://zerosalife.github.io]] [[http://twitter.com/zerosalife][@zerosalife]]

** For the studio

*** Brands
Gaminess

Pengin, incorporating aspects of the japanese: ペンギン

Dai-su, dice-ooh, mascot: Big Sue.


* IDEAS

** STUBS
*** Chrono Trigger Random Number Generator             :analysis:R:mechanics:
categories:
- analysis
- algorithms
- R
- mechanics

**** Introduction
[[http://en.wikipedia.org/wiki/File:ChronoTriggerInside.PNG][{% img http://upload.wikimedia.org/wikipedia/en/d/d5/ChronoTriggerInside.PNG from Wikipedia%}]]
Image from [[http://en.wikipedia.org/wiki/Chrono_Trigger][wikipedia.org]].

I recently revisited [[http://en.wikipedia.org/wiki/Chrono_Trigger][Chrono Trigger]], a 20-year-old Square role playing
game (RPG) for the SNES.  I was inspired by a [[http://www.youtube.com/watch?v%3DV_SFck-xeGM][speed run]] from [[http://gamesdonequick.com/][Awesome
Games Done Quick]] 2012, a charity fundraiser featuring speed runs of
old and new school games.  If [[https://twitter.com/EssentiaFour][Essentia]] could [[http://speeddemosarchive.com/ChronoTrigger.html][beat the game in 5 hours]],
surely, copying her strategies, I could finish it in a reasonable
amount of time.

In the course of my play-through I grew curious about the underlying
mechanics of the Chrono Trigger battle system.  In order to optimize
speed running strategies, Chrono Trigger's mechanics have been
scrutinized to an obsessive degree.  There are numerous guides, one of
which is [[http://strategywiki.org/wiki/Chrono_Trigger/Formulae][here]].  But, none of the guides I found could clearly identify
the mechanics behind Chrono Trigger's [[http://en.wikipedia.org/wiki/Random_number_generation][random number generator]] (RNG).

Most likely, under the hood, the RNG is a variation of a [[http://en.wikipedia.org/wiki/Linear_feedback_shift_register][linear
feedback shift register]].  I recently came across a similar RNG in an
[[http://meatfighter.com/nintendotetrisai/#Picking_Tetriminos][in-depth article about the mechanics of NES Tetris]]. But I'm not
concerned with how the programmers implemented a good RNG.  I'm
concerned with the rules governing how that RNG interacts with the
battle system.

I'm gonna get a little pedantic here, bear with me. In an RPG combat
system, the RNG introduces an element of luck, which makes battles
more interesting and potentially ruining speed runs if not properly
understood.  The speed runners apparently compensate for any
variability of the RNG, but its mechanics have not been laid out.  So
I set out to investigate the mechanics of the RNG in Chrono Trigger,
using basic R commands to tease apart its underlying algorithms.

<!--more-->

**** A brief note on the choice of R
There was no good reason to choose R for this analysis.  I chose R
because I was comfortable using it to quickly do the statistical
analyses summarizing a data set.

**** Chrono Trigger's battle system

Chrono Trigger's battle system has two types of attacks: *[[http://chrono.wikia.com/wiki/Tech][Tech]]*
(including magic) and *[[http://chrono.wikia.com/wiki/List_of_Chrono_Trigger_weapons][weapon attacks]]*.  The Tech system is more
complicated than the basic weapon attack system, so I'll focus on
weapon attacks for now.

Crono's basic weapon attacks use the formula:

#+BEGIN_EXAMPLE
Attack = ((Power * 4/3) + (Weapon * 5/9))
#+END_EXAMPLE

Some of the other characters' attacks use different formulas.  For the
sake of simplicity, I'm going to focus my analysis on Crono.

The parameters *Power (PWR)* and *Weapon* determine the base
amount of damage dealt when a weapon hits, using the formula:

#+BEGIN_EXAMPLE
Damage  = ((Attack * 2) + (Random))
#+END_EXAMPLE

So the base damage Crono can deal, assuming *Random* is 0, is his
double *Attack* value.  This gives us a stable mark to observe the
variability of the RNG.

How is the random number determined?  To answer that question, I
set out to carefully analyze empirical data, accounting for the known
parameters of the *Damage* formula.  That's a fancy way of saying, I
hit the same enemies with the same weapons a bunch of times.  I kept
track of the damage dealt each time.

**** Analysis and Observations
Crono begins the game with 5 *PWR* and his weapon is a Wood Sword,
which has a *Weapon* value of 3. Crono's *Attack* value is:

#+BEGIN_EXAMPLE
Attack = ((5 * 4/3) + (3 * 5/9))
#+END_EXAMPLE

So his *Attack* is 8⅓, which is rounded down to 8.  I think the
rounding down is equivalent to a [[http://en.wikipedia.org/wiki/Floor_and_ceiling_functions][=floor= function]] because, in cases
where the calculated *Attack* value would have a fractional component
above half, the game always rounds down.

I store Crono's *Attack* power in a variable called =apwr=.

#+BEGIN_SRC R
  c.apwr <- 8

#+END_SRC

That means his base damage per hit is double that:

#+BEGIN_SRC R
  calculated.hit <- 16

#+END_SRC

Now we observe a bunch of hits using these parameters.  This is no
simple task because Crono levels up after a few battles, changing the
value of his *Attack* parameter.  I kept the values consistent by
reloading, starting from scratch, each time Crono leveled up.

#+BEGIN_SRC R :session
  ## Crono Level 1, Attack Power 8
  raw.hits <- c(32, 17, 16, 17, 17, 17, 17, 16, 32, 17, 17, 17, 16, 16,
                17, 32, 32, 17, 16, 17, 17, 16, 16, 17, 16, 34, 16, 17,
                16, 17, 16, 17, 16)

#+END_SRC

Here we've got a collection that samples 33 hits by Crono at level 1.

We can get summary statistics:

#+BEGIN_SRC R :session
  summary(raw.hits)
#+END_SRC

#+BEGIN_EXAMPLE
> summary(raw.hits)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
  16.00   16.00   17.00   18.97   17.00   34.00
#+END_EXAMPLE

So, the majority of hits did 16 or 17 damage.  A few were much higher
than that.  The hits doing 32 or 34 damage represent critical hits,
which I failed to realize, would contaminate my data set.  Critical
hits simply deal double damage, a fact you can see by the lack of hits
dealing 33 damage.

A critical hit dealing 33 damage would require raw damage of 16.5,
which would require representing floating point numbers.  Given what
we previously observed about the *Attack* calculation above, it should
come as no surprise that Chrono Trigger's battle system uses integers
only.

We'll ignore critical hits for now.

Crono's calculated damage value is 16.  We see that the hits vary
between 16 and 17.  So the added *Random* modifier is either 0 or 1.

The modifiers occur with about the same frequency, given the tiny sample
size:

#+BEGIN_SRC R :session
  table(raw.hits)
#+END_SRC

#+BEGIN_EXAMPLE
> table(raw.hits)
raw.hits
16 17 32 34
12 16  4  1
#+END_EXAMPLE



**** Summary

There are still questions that remain unanswered.

What RNG parameters govern levels 2 and 3?

Is the RNG governing the Tech system similar?

How does evasion work?  I haven't seen much information about missed hits.

Can I provide a concrete example of the *Attack* value rounding down
when its fractional value would be calculated to be above ½?

All told, it took me a little North of 12 hours to beat the game,
using Essentia's strategies.  I'm no speed runner.

The way Earthbound does things:
#+BEGIN_SRC lua
  local RNG24 = {}
  local RNG26 = {}
  local RNG   = {}
  local bit = 0
  local RNGoffset = -70
  local RNGend = 14592
  local RNGpos = -70
  RNG24[RNGoffset] = 4660
  RNG26[RNGoffset] = 120
  RNG[RNGoffset] = 134

  for i=RNGoffset+1,RNGend do
          RNG24[i] = math.floor((RNG24[i-1]+bit)/2)+32768*math.fmod(RNG24[i-1]+bit,2)
          RNG26[i] = math.fmod(RNG26[i-1]+109, 256)
          RNG[i] = math.fmod(math.floor(math.fmod(RNG24[i],256)*RNG26[i]/16),256)
          bit = math.fmod(math.floor(math.fmod(RNG24[i],256)*RNG26[i]/4),4)
  end

  function search_RNGpos()
          local cur24 = memory.readword(0x7E0024)
          local cur26 = memory.readbyte(0x7E0026)
          RNGpos = RNGoffset
                  for i=RNGoffset, 256 do
                  if(RNG26[i]==cur26) then
                          for j=i, RNGend, 256 do
                                  if(RNG24[j]==cur24) then
                                          RNGpos = j
                                          break
                                  end
                          end
                          break
                  end
          end
  end

  function draw_RNGgraph(x,y,width,height)
          gui.box(x,y,x+width,y+height,"#FFFFFF50")
          gui.line(x+36,y+height+2,x+36,y-2,"#FFFFFF")
          gui.text(210,216,string.format("%5d/%5d",RNGpos,RNGend))
          gui.text(2,172,string.format("RNG:     %3d",RNG[RNGpos]))
          for i=0,width do
                  local color = "#00FF2080"
                  local curRNG = RNG[(RNGpos+i)%14592]
                  if curRNG==0 then
                          color = "#FF1010FF" -- 1/128 Item Drop
                          curRNG=256
                  elseif curRNG==128 then
                          color = "#FFFF30FF" -- 1/128 Item Drop
                  elseif curRNG==255 then
                          color = "#0080FFFF" -- MAX
                          curRNG=256
                  elseif curRNG<=12 then
                          color = "#FF5050FF" -- SMAAAASH!!
                  elseif curRNG>184 then
                          color = "#0030FF90" -- No enemies
                  end
                  gui.line(x+i,y+height,x+i,y+height-math.floor(curRNG/256*height),color)
          end
  end


  function watch_pos()
          local x,y = 150,146
          local xadr = 0x7E9B26 -- MOTHER 2
  --      local xadr = 0x7E9875 -- EARTH BOUND
          gui.text(x,y,
                  string.format("X-Pos: %5d \n",memory.readword(xadr+2))..
                  string.format("X-Sub: %5d \n",memory.readword(xadr-0))..
                  string.format("Y-Pos: %5d \n",memory.readword(xadr+6))..
                  string.format("Y-Sub: %5d \n",memory.readword(xadr+4))
          )

          color = "#00ff80"
          gui.text(208, 146, "No use", color)
          color = "#FF5050FF"
          gui.text(208, 154, "SMAAAASH!!", color)
          color = "#0080FFFF"
          gui.text(208, 162, "No enemies", color)
          color = "#FFFF30FF"
          gui.text(208, 170, "1/128 Item", color)

          m = memory.readwordsigned(0x7E9AE2)
          gui.text(2,144,"Money:    "..m)
          atm = memory.readwordsigned(0x7E9AE6)
          gui.text(2,151,"ATM:      "..atm)
          ss = memory.readwordsigned(0x7E9AE6)
          gui.text(2,158,"Skip S.:  "..ss)
          dr = memory.readwordsigned(0x7EABE5)
          gui.text(2,165,"Drop   :  "..dr)
          gui.text(66,163,"EnemyHP: "..memory.readword(0x7EA431), color)
          gui.text(66,170,"Ness HP: "..memory.readword(0x7E9CC5), color)
          gui.text(2,216,emu.framecount())
  end

  emu.registerbefore(search_RNGpos)

  gui.register(function()
          draw_RNGgraph(0,182,255,32)
          watch_pos()
  end)

#+END_SRC

*** Visualizing Zelda Dungeons                            :design:CommonLisp:


*** Visualizing Zelda Dungeons in Clojure                    :design:Clojure:
"Port it to Clojure, dogg.  There's a nice library by [[https://github.com/ztellman][Zachary Tellman]]
called [[https://github.com/ztellman/rhizome][Rhizome]]," read my notes.  It'll be easy, I think.

*** What's an LFSR?                      :design:algorithm:mechanics:Clojure:

*** Messaging in Unity
See [[file:~/org/personal/gd.org::*Messaging][Messaging]]

SendMessage can lead to a performance hit.  In places where a
SendMessage would be called every frame, then caching a copy of the
target object would be faster.

[[http://forum.unity3d.com/threads/is-sendmessage-really-that-bad.38094/#post-245697]]

*** Level experience progressions

**** Solar 2
Growth Requirements
A Planet - 20 Mass
A Life Sustaining Planet - 80 Mass
A Small Star - 180 Mass
A Medium Star - 1,500 Mass
A Large Star - 2,000 Mass
A Black Hole - 3,000 Mass
The Big Crunch - 1,000,000 Mass

[[http://forums.steampowered.com/forums/showthread.php?t%3D1935621][Source.]]



*** Game Development Performed
[[http://gamasutra.com/view/news/213339/Vlambeers_Performative_Game_Development__the_way_of_the_future.php]]

[[http://kotaku.com/we-made-this-game-when-we-were-angry-1553875111]]

[[http://supergamejam.com/]]

Potential for platforms to become involved prior to release, free
advertising for devs and possible for platform owners to sell ads.  As
it stands, may make more money from straight-up advertising splits
with existing streaming platforms, but no pre-order it now button
incorporated with system.  Potential for more sales may outweigh
advertising revenue for devs.

I've noticed a trend toward livestreaming development emerging among
projects I follow on twitter. This is not because I'm particularly
observant.  It's obvious.

Devs will announce on twitter that they are going to develop for a few
hours, often working on a specific system or feature.  This is a
win-win situation because interested parties can watch and interact
with the dev; and because the developer is held accountable to work,
without goofing off on twitter, while simultaneously marketing to the
core audience.  There are, of course, costs, and the gamasutra article
by Brandon Sheffield does a good job pointing these out.

Of course, broadcasting video gameplay in the form of Let's Plays has
already skyrocketed in terms of viewership and monetization since 2009
(?).  The recent acquisition of Twitch, a popular livestreaming
platform, by YouTube for $1 billion clearly demonstrates the [[http://bits.blogs.nytimes.com/2014/05/19/with-twitch-acquisition-talks-validation-of-games-as-spectator-sport/][value of
broadcasting games]].

Livestreaming has already caught on as a form a interactive content
production, the very production of which can itself be monetized.
Monetization, as such, is not always a selfish thing. Greed is good,
when that greed is directed toward leveraging these interactive
streaming platforms to raise funds for charity, as in the case of
Games Done Quick, Yogscast Christmas Drives, Desert Bus, and the Mario
Marathon.  These streamed charity events, and even non-charity
streams, can themselves then be edited, chopped & screwed into content
for the streamers normal non-streaming content delivery platform.

**** Vlambeer
[[https://twitter.com/Vlambeer/status/463633278965387264]]
and more recently:
[[https://twitter.com/Vlambeer/status/491535617847988224]]
**** Double Fine Massive Chalice

**** Indie House
[[https://twitter.com/infinite_ammo/status/463209517010780160]]

**** Noel F B
[[https://twitter.com/NoelFB/status/463451657234550784]]

[[http://skytorn.tumblr.com/post/84964990403/howd-you-go-at-describing-the-game-in-a-few][What's the game all about?]]


**** Farmer Gnome
Under the Ocean development

[[https://twitter.com/Farmergnome/status/463688831263203330]]

[[https://twitter.com/Farmergnome/status/465137564672745472/photo/1]]


*** Grim Fandango Design Documents

see also: [[http://grumpygamer.com/maniac_mansion_design_doc]]

[[http://www.gamasutra.com/view/news/189266/The_technique_LucasArts_used_to_design_its_classic_adventure_games.php]]

*** Full Throttle Critical Path Checklist

*** Procedural Terrain in Unity
[[http://alastaira.wordpress.com/2013/11/14/procedural-terrain-splatmapping/]]

[[http://www.big-robot.com/2012/07/02/procedural-british-countryside-generation/]]

[[http://forum.unity3d.com/threads/68807-Infinite-Terrain-Free-Project-Source]]
*** Shaders Primer
[[http://notes.underscorediscovery.com/shaders-a-primer/]]
*** ASCII Shader
[[http://pentahelix.github.io/ASCII-Effect/]]

*** Object reuse in Unity
[[https://twitter.com/mikegeig/status/453239221885480960/photo/1]]

<blockquote class="twitter-tweet" lang="en"><p>Everything you ever needed to know about object pooling. <a href="https://twitter.com/search?q=%23unity3d&amp;src=hash">#unity3d</a> <a href="http://t.co/dGxRaxktqo">pic.twitter.com/dGxRaxktqo</a></p>&mdash; Mike Geig (@mikegeig) <a href="https://twitter.com/mikegeig/statuses/453239221885480960">April 7, 2014</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

[[http://unitypatterns.com/resource/objectpool/]]

[[https://github.com/joaokucera/unity-pooling/blob/master/source/Assets/Pooling/GenericPooling.cs]]

*** Game design patterns
[[http://gameprogrammingpatterns.com/index.html]]

*** UI Ideas
[[http://futureinterface.tumblr.com/]]

[[http://visualpunker.tumblr.com/tagged/fui]]

Credit to [[https://twitter.com/turnislefthome/status/463692298455617536]]

*** 1d games
Flappy bird is a 1d game.


*** Thinking about dice games
[[https://twitter.com/JonahD/status/471458517896155137]]

[[http://www.dungeonmorphs.com/]]


*** A World of Consequence: The World of Ruin in FFVI

[[http://www.avclub.com/article/final-fantasy-vi-explores-human-pain-through-its-s-205365?utm_source%3Dtwitter&utm_medium%3DShareTools&utm_campaign%3Ddefault][http://www.avclub.com/article/final-fantasy-vi-explores-human-pain-through-its-s-205365?utm_source=twitter&utm_medium=ShareTools&utm_campaign=default]]

*** Anatomy of a Screenshot
[[https://twitter.com/NoelFB/status/474491040011788288/photo/1]]

*** Text adventures vs. User-editable MUDs
Sort of relates to the [[http://zerosalife.github.io/blog/2014/07/26/space-is-read/][previous discussion]] of interactivity and genre
with regard to Visual novels vs choos your own adventure

[[file:~/org/personal/gd.org::*Finite%20state%20machine%20vs%20state%20transition%20system][Finite state machine vs state transition system]]

*** Displaying an arbitrary number of objects in an arc

Want to go around in a circle, like the numbers 8-4 around the top of
a clock.  Since we have nine reasonable positions, calculate the
modulo of BigBaddie level and 9 spots, then adjust the number of hits
and number of objects to display accordingly.

*** Skill vs RNG
[[https://twitter.com/dom2d/status/494206004318314496/photo/1]]

*** The graph of a map prototype
[[https://twitter.com/bitmOO/status/495364383212838912/photo/1]]


*** Reward Schedules
[[http://www.betabunny.com/behaviorism/Conditioning2.htm]]

*** Pixel Sprites and Unity2d
#unity3d

- Unity
- Unity2d

*** Dialog in Unity
[[https://twitter.com/MattRix/status/525374216225718272/photo/1]]
[[https://twitter.com/MattRix/status/525372446384586752/photo/1]]

[[https://dl.dropboxusercontent.com/u/1063919/Screen%20Shot%202014-10-23%20at%204.34.47%20PM.png]]
[[https://twitter.com/infinite_ammo/status/525375826007982080/photo/1]]

[[https://dl.dropboxusercontent.com/u/9814265/skytorn/dialog2.png]]
[[https://twitter.com/NoelFB/status/525377696571097089]]

[[http://pastebin.com/rArEyKwM]]
[[https://twitter.com/NoelFB/status/525389011850772480]]

*** Implementing an inventory in Twine

*** The Core Gameplay Loop of Drug-seeking Behavior

**** [[http://adriancrook.com/designing-core-loops/]]

**** [[http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2801885/]]

**** See [[*Reward%20Schedules][Reward Schedules]]

*** Self-publishing

**** Write the book

**** Come up with a cover

**** Get it physically published, reach publishing stream

**** Advertise it, so it gets to a community
*** The Primacy of Symmetry
*** Typical video game costs and budgets

[[http://vgsales.wikia.com/wiki/Video_game_costs]]

- production and development costs
  - developer salaries
  - voice acting
  - music and orchestra (as high as $500K[1])
  - licensing
- marketing and promotions
  - television advertisments
  - print advertisements (magazines)
  - online advertisements
  - events and launch parties[2]
- manufacturing and distribution
  - arcade machine production (very expensive)
  - console cartridge production (fairly expensive)
  - optical disc production (fairly cheap)
  - online distribution (very cheap)

*** Jump scares and the startle response

**** The origin of the jump scare
Alone in the Dark
Resident Evil

**** Salient stimuli
"Rewards like sex, money, drugs and novel situations all cause the
release of dopamine in the reward circuit of the brain, a region
buried deep beneath the cortex. Aside from generating a sense of
pleasure, this dopamine signal tells your brain something like, “Pay
attention, this is an important experience that is worth
remembering.”"

**** Characteristic of addiction

*** Why do we play games?
[[http://www.gamasutra.com/blogs/FabianFischer/20141104/229394/Why_do_we_really_play.php?utm_content%3Dbufferda748&utm_medium%3Dsocial&utm_source%3Dtwitter.com&utm_campaign%3Dbuffer][http://www.gamasutra.com/blogs/FabianFischer/20141104/229394/Why_do_we_really_play.php?utm_content=bufferda748&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer]]

*** Okeanos version 1

*** Faith No More
- game

[[http://www.demigiant.com/games/faithnomore/index.php]]

*** 10 questions to focus game design
[[http://www.metkis.com/]]

*** Gamifying pro-social behavior
[[https://twitter.com/Staubfluse/status/540806562613575680/photo/1]]

*** Framed and Manipulated Environments
[[http://www.polygon.com/2014/12/12/7383903/hideo-kojima-framed-game-of-the-year-ios]]

*** Terrain Vocabulary
Useful Geographical Descriptors

[[http://octoswan.tumblr.com/post/77439447520/i-made-these-as-a-way-to-compile-all-the]]

[[http://silentmania.tumblr.com/post/83837712011/octoswan-i-made-these-as-a-way-to-compile-all]]


*** 3D modeling for 2.5D
AngryOctopus made a modeling tool based on an idea by LostGarden

[[https://github.com/angryoctopus/lgmodeler]]

[[http://www.lostgarden.com/2013/10/prototyping-challenge-3d-modeling-tool.html]]

[[http://www.angryoctopus.co.nz/lgmodler/]]


*** Practical Creativity talk at GDC 14
[[http://www.gamasutra.com/view/news/231225/Video_Practical_Creativity__A_way_to_invent_new_kinds_of_video_games.php]]
**** A library of mechanic patterns
- Set packing
- Time limits
- Guessing
- Binary search
- Neighbor count
- Movement rate
- Pickups
- Stats
- Graph traversal
- Optimal path
- Threes optimization
- Exponentiality
- Repeated move chains
- Player judging
- Memory
- Equipment
- Markets
- Triadic relationships
- Open draw pile
- Race tracks
- Diminishing returns
- Push your luck
- Hidden information
- Token state changes
- Knapsack problem
- Wild cards
- Combos
- Item association
- Collection
- Fill the map
- Roles
- Resource limits
- Physics simulation
*** Creating a header ribbon in CSS for Octopress
[[http://www.sitepoint.com/pure-css3-speech-bubbles/]]
[[http://www.sitepoint.com/pure-css3-ribbons/]]
*** Why Adventure Games Suck
[[http://grumpygamer.com/why_adventure_games_suck]]
[[http://www.oldmanmurray.com/features/77.html]]
*** Screenshake in Unity
*** Use a Dictionary of Delegates instead of Switch Case
[[http://stackoverflow.com/questions/2896715/dictionary-with-delegate-or-switch]]
*** Choice in game design
See also: [[*Sid%20Meier's%2010%20Rules%20of%20Game%20Design][Sid Meier's 10 Rules of Game Design]]

[[http://darrellhardy.com/blog/2015/01/19/choice-thoughts-on-game-design/]]
*** Keep losing fun
[[http://www.leagueofgamemakers.com/hey-loser-keeping-players-engaged/?utm_source%3Drss&utm_medium%3Drss&utm_campaign%3Dhey-loser-keeping-players-engaged][http://www.leagueofgamemakers.com/hey-loser-keeping-players-engaged/?utm_source=rss&utm_medium=rss&utm_campaign=hey-loser-keeping-players-engaged]]
*** Metroidvanias
I couldn't say it better than this
[[http://www.gamasutra.com/view/news/236410/The_undying_allure_of_the_Metroidvania.php]].
Best piece on Metroidvanias I've read.

#+BEGIN_QUOTE
The Metroidvania genre is a microcosm of life's journey itself.
#+END_QUOTE
-- Jools Watsham, creator of Xeodrifter
*** porting tiled2unity to mac
[[http://www.mono-project.com/docs/getting-started/application-portability/]]

[[https://github.com/Seanba/Tiled2Unity/tree/master/tool/Tiled2Unity/src]]

[[http://www.seanba.com/tiled2unity]]
*** Telling stories in level design
- design
- level design

[[https://www.youtube.com/watch?v%3DWihe7ScIZjs][https://www.youtube.com/watch?v=Wihe7ScIZjs]]
*** Super Metroid hub and spoke and loop level design tricks
[[https://www.youtube.com/watch?v%3DZGWHxQ2WcBE][https://www.youtube.com/watch?v=ZGWHxQ2WcBE]]
*** Tim Schafer's freewriting technique
[[http://tumblr.austinkleon.com/post/23005382318]]
[[http://generator.acmi.net.au/gallery/media/tim-schafer-discusses-his-writing-methods]]
[[http://generator.acmi.net.au/gallery/media/game-masters-interview-tim-schafer]]
*** Unity division of responsiblity
[[https://gist.github.com/grahamboree/36a815a7aeba50a2c1f2]]


[[https://twitter.com/mtrc/status/588370746323443712]]
*** Fungus for Unity
[[http://fungusgames.com/]]
*** Tagged items in Unity
[[https://twitter.com/infinite_ammo/status/608583381949906944/photo/1]]

*** Names matter
[[http://subtractivedesign.blogspot.com/2013/02/making-platforming-games.html]]

"Names Matter - What you call something when it is being created
defines it. A level called generic level 01 has less potential to be
good than one with a name like Laughing Bouncers. Words have power and
they define things. When you hear words describing something they will
inspire people to do more."

*** IntRangeDrawer and FloatRangeDrawer
[[https://gist.github.com/HilariousCow/560db765cf24eb589b00]]

*** Dungeon Generation
[[http://www.gamesofgrey.com/blog/?p%3D236][http://www.gamesofgrey.com/blog/?p=236]]
[[file:~/Downloads/dungeon-gen-thesis.pdf]]
** STARTED DRAFTS


*** Types of Screenshake
- Random X and Y
  - Looks sort of chaotic, not smooth
- Periodic X and Y
  - Looks kind of swirly, can become a Screenorbit if you're not
    careful.
- Perlin X and Y
  - Smoother than Random X and Y
- Restricting movement to one axis
  - Can look good if there is some component of the scene that
    dictates the movement, i.e. the collision of a ball and a wall.
- Rotating Z (about X and Y)
  - Looks tilty, can be good if there is little movement in X and Y in
    your game and you want to convey a sense of rocking or coming down
    like a see-saw.

*** Simulation Sandbox vs Theme Park
This quote from the artist @sougwen resonates with me because I feel
it encapsulates some aspect of game design.

#+BEGIN_QUOTE
"To “construct” something is to carve the space out of it"
#+END_QUOTE

{% tweet https://twitter.com/sougwen/status/462994273898872832 %}

I don't mean to simply say that sougwen is talking about art and games
are art, so this quote resonates.  No.  I think that there is
something to this carving-out-of-allowed-play that is fundamental to
games.

Theme parks are about creating spectacle rather than true interactivity.

**** Games vs activities
Per this dude's rant:
[[http://www.boardgamegeek.com/blogpost/25274/good-dice-bad-dice-guest-post-by-chad-mestdagh]]

**** Deep simulation vs. superficial simulation

Minecraft: So emergent people hallucinate parts of the game that don't
exist. Retronauts talk a lot about this. The Schoolyard rumor mill
often contains fantastically fabricated anecdotes. "My uncle works at
Mojang..."
[[https://twitter.com/notch/status/463254297283919872]]

**** Smooth vs wrinkly
[[https://twitter.com/AndroidArts/status/463685510691815424]]


**** It's systems all the way down
The resonant thread for me is that it's the systems, stupid.
Interactive systems make a game chunky, giving the players something
to bite into.

*** Nontraditional game jams

Game jams need not simply vary in terms of theme or duration.  There
are plenty of interesting axes upon which they can be projected for
new and interesting results.

**** Game jam as recruitment
Game jams are typically thought of as a way for *participants* to
network.  And they are.  Game jams are unique, if not the most casual
and carefree, spaces for meeting and trial collaboration with others.

But that's not all.  You, yes I mean you, as an organizer are in a
unique position to network with talented game makers of all stripes.
Looking for pixel artists?  Organize a 48 hour game jam with pixel art
graphics as a constraint and a theme of your choice.

Yes, it could be considered manipulative, possibly unscrupulous or
unethical, but no one is twisting anyone's arm to participate.  And,
there's no reason not to be transparent when organizing the game jam.
Say you're looking for great pixel art because you would like to
collaborate on a specific idea.

There's one benefit of recruiting from willing participants in game
jams.  THese are poeple with at least enough free time to commit to
participating in a game jam.  They may be more approachable than
people who are otherwise tied up and unable to commit 24 hours, 48
hours, or a week to start and finish a project.

W.G. Armintrout made a similar plea in a Space Gamer Magizine issue
from 1982, (#52).

**** Examples
[[https://www.kickstarter.com/projects/556682087/in-security-roll-hack-get-promoted-starting-at-jus]]
Game that [[http://boardgamegeek.com/geeklist/168206/congrats-koen-hendrix-randalls-dice-or-no-dice][won a design contest]], and went on to successfully fund a
kickstarter.

[[https://software.intel.com/sites/campaigns/levelup2014/]]

A game jam in which winners will be displayed at a film festival:
[[http://itch.io/jam/space-cowboy-jam]]

[[http://fuckthisjam.com/]]

*** Let's plays are some of the best feedback a designer can get
Imagine having to provide a questionaire with a game prototype to
solicit feedback on a design.  It may look something like this:

1. How much did you play? (approximate number of games)
2. Did you enjoy the game? If so, what made it enjoyable?
3. Was anything broken? Was anything not enjoyable, tedious, fiddly etc?
4. Were the rules/objectives understandable?
5. Any suggestions for improvement or comments?

Now imagine looking over a player's shoulder during the entire
playtesting experience.

Let's play videos and reports represent an entertaining and imminently
watchable form of playtesting.

*** Gamifying Games
Something on top of score counting and death states and
progression. Speed running. Turn taking.  GTA start with 5 stars and
try to stay alive the longest.  Trying to get the game to glitch out.
Playing with systems rather than playing the game or the narrative
within the game.  More bang for your buck, maybe not a problem today,
but definitely a problem growing up when you got one or two new games
a year.

[[https://www.youtube.com/watch?v%3Daq6pGJbd6Iw][https://www.youtube.com/watch?v=aq6pGJbd6Iw]]

Offers a sense of empowerment by extending the life of a product that
has been otherwise consumed, outside of the commercial drive to move
on to the next thing.

My favorite term, gaminess, comes from Michael Cook in a comment on
this very blog.  Gaminess captures the odd taste left in my mouth when
I use the buzzword gamify.

Adding goals to games where the gameplay has long ago been exhausted.

[[http://nowrongwaytoplay.tumblr.com/]]

*** Go big
[[http://www.shutupandsitdown.com/videos/v/susd-play-megagame/]]

To get more people involved, restrict information.  Only people
playing certain roles have access to critical gameplay information.
They also become more invested in the game because they make mechanics
determinations, a fancy way of saying dice rolls, for the team.  This
also creates an organic distrust between the players on the same team
later in the game that creates interesting /intrateam/ dynamics to go
along with the already interesting /interteam/ dynamics.


*** Is House of Leaves a game?
In [[*Space%20is%20Read][the post about Space is Read]] I talked a bit about interactive media
versus more traditional noninteractive media.  That's just a fancy way
of saying games versus, for example, books.  Needless to say, if you
haven't read Mark Z. Danielewski's excellent book, here be spoilers.

The House in /House of Leaves/ is a Big Dumb Object, that's larger on
the inside than the outside.  In this case, I guess it's a Big
Sinister Object.

*** Secrets and Glitches
Axiom Verge is an in development game that elevates glitches from
quirky bugs into generative gameplay content.

The article makes a point of mentioning very old memory manipulation
glitches.  Due to more modern programming practices, these don't crop
up as much these days.  Here's an example from Final Fantasy III
(using Japanese numbering here):

[[http://tasvideos.org/GameResources/NES/FinalFantasy3.html]]

In more recent games there are still glitches that players exploit to
gain an advantage for speed runs.  Here's an example of RNG
manipulation from Symphony of the Night:

[[http://tasvideos.org/GameResources/PSX/SymphonyOfTheNight.html]]

This is not to say that modern games are in any way invulnerable to
memory manipulation tricks.  I think there are two reasons that these
glitches haven't been shown in modern games.  First, automated memory
management and smarter programming through explicit checks will
(probably) protect against some of the old memory manipulation tricks.
Second, there simply hasn't been enough time spent poking at these
games.  People have been playing some of these older games for 30 or
40 years.

Related: the rise and fall of the cheat code
[[http://beta.slashdot.org/story/203799]]

*** 8 bit vs 16 bit color
Listening to the Upper Memory Block Podcast [[http://umbcast.com/episode-22-rollercoaster-tycoon/][Railroad Tycoon episode]]
(start listening at 30:27 for the specific segment on Tech).

3 bits of 8 represent red
3 bits rep green
2 bits for blue

So, 256 colors

2 bytes to map color, 16 bit color

5 bits for red and blue
6 bits for green

Note: I'm assuming that these values are for DOS games, and may not
apply to consoles ([[http://en.wikipedia.org/wiki/Nintendo_Entertainment_System_technical_specifications][like the NES]]).

As an aside, I think [[http://en.wikipedia.org/wiki/Nibble#Table_of_nibbles][this chart showing nibbles]] looks like a cellular
automata thing from Conway's Game of Life.
*** The Yogscast blowback and Generation Like

At the risk of participating in the culture characterized as callow
and vapid by the very documentary I'm sharing, I'd like to call
attention to some of the points made in
[[http://www.pbs.org/wgbh/pages/frontline/generation-like/]] because I
think they shed light on the recent dust-up with the Yogscast.
Specifically here I'm talking about the decision to feature games on a
Youtube channel exclusively in return for a share of the sales profits
for some time during or following the arrangement.  I'm not talking
about [[http://www.polygon.com/2014/7/17/5911947/yogventures-kickstarter-canceled-yogscast-no-obligation][the Yogventures kickstarter fiasco]].

See also this video by TB: [[https://www.youtube.com/watch?v%3D4KclXm0fDo0][https://www.youtube.com/watch?v=4KclXm0fDo0]]

*** The ethics of game design
- design
- ethics

Sarang.  The name sounded familiar to me.  It's a Korean word that
means love.  Some quick googling revealed that I'd seen it recently in
a 2008 movie called Moon.  Without spoiling too much, it is the
soothing name of the moonbase in an otherwise troubling story.  The
Sarang in this story is just as troubling, if not entirely more so due
to the reality of the situation.

[[http://www.gamasutra.com/view/feature/207779/ethical_freetoplay_game_design_.php]]

[[http://www.polygon.com/2014/7/28/5930685/love-child-interview-ethics-game-design]]

[[https://www.youtube.com/watch?v%3DFwI0u9L4R8U][https://www.youtube.com/watch?v=FwI0u9L4R8U]]

Maker vs consumer economies.

No right answer.  No way to make a universally regarded ethical game.
Subjective decision.  Recognize mechanics and design that may cause
issues: charging to change reward schedules, using a powerfully
addictive reward schedule and charging to maintain access to the game.
Reward schedules can be addictive and harmful.  Know methods to
mitigate: warning screen, notice to take a break, change reward
schedule on the fly to a less reinforcing schedule.

*** Iteration
The iterative process diagram from Game Design Workshop

Generate Ideas → Formalize Ideas → Test Ideas → Evaluate Results → If
there are problems, Loop back to Generate Ideas.  Otherwise, You're
done iterating.
*** Player Interaction Patterns
The player interaction patterns diagram from Game Design Workshop

- Single player vs. game
- Player vs. player (2 player)
- Multiple individiual players vs. game
- Unilateral competition (assymetric Player vs player)
- multilateral competition (symmetric player vs. player multiplayer)
- Team competition
- cooperative play (team players vs. game)
*** In-depth longread on Final Fantasy VI

An in-depth #longread on #FFVI. @tgdfweb

- mechanics
- design
- SNES
- RPG
- Final Fantasy
- balance

[[http://thegamedesignforum.com/features/reverse_design_ff6_1.html]]

[[http://kotaku.com/how-to-balance-an-rpg-1625516832]]

Whew.  Lot of contractions in that title.  But you made it through,
most likely because you're interested in reading about FFVI.  Let me
tell you: this article by the game design forum has pretty much taken
the cake.  That's right.  All of it.

That being said, there's little more to add to the exhaustive
exploration of the elements of FFVI's design.  Instead, I'll try to do
my best to define some of the jargon the article uses.

I found the use of complicated sabermetrics-like stats a bit confusing
at first. So assuming you're not some stat-crunching RPG machine, you
can refer back to the definitions here to help decipher the tricky
stats article.  It's worth saying now that if I didn't think that the
author makes a cogent and compelling argument for the value of the
stats, I wouldn't bother defining them.  I'm convinced that having a
grasp, a real gras p at a mathematical level, for the mechanics in
your game can make it a more compelling, fun play experience.  And
wading through design breakdowns liek these articles can make the math
less of a chore, especially when its written about one of the all-time
great examples from the genre.

- NPC Irony
- NPC Sociology

*** Toward a game programming style guide

- design
- algorithms

**** Timing
*Counters* count down a specific number of frames.  *Timers* wait for
 a specified amount of time to elapse.  Both *Counters* and *Timers*
 are *Utilities*.

***** Counters
*Counters* accept a parameter specifying the number of frames to count
down and an optional function to be evaluated when the count has
finished.

- int num :: The number of frames to count
- delegate void FinishFunc() :: The function to be evaluated when the
     count has finished.  Make sure to check that this is not null
     before using it.
- bool IsFinished() :: A function getting the status of whether the
     counter has finished.

***** Timers
*Timers* accept a parameter specifying the duration in seconds to time
and an optional function to be evaluated when the time has elapsed.

**** Grid Map
Contains a 2d array of map nodes.

Contains a hashmap of Grid Map Nodes Positions that maps to neighbors
of the Grid Map Node at that Position.  This is a set of edges for
each node of the graph.

Optionally has a button for saving a screenshot.
***** Grid Map Node
Has *Position* describing the Grid Map Node's location in the grid.
Has *Coordinates* describing the Grid Map Node's location in the game
world space (relative to the dimensions of the Grid Map and the top
right of the Grid Map Node).  Has *CenterCoordinates* that describe
the center of the Grid Map Node.  of the Has an *Icon* that is
rendered if not null.

Optionally, has a Type that determines the Icon.

Optionally implements a Logo showing the name of the Grid Map Node and
a button for saving the Icon.
***** Grid Map Edge
A Grid Map Edge connects two Grid Map Nodes.  It is unidirectional and
takes a *Source* and a *Destination*.  It can be accessed either
semantically with *GetSource* or *GetDestination* or as an array with
=edge(0)= corresponding to the source and =edge(1)= corresponding to
the destination.
*** Sid Meier's 10 Rules of Game Design
Sid Meier's 10 Rules of Game Design

1. Choose a topic you have a passion for. Game Design is about creativity.

2. Do research after the game is done. Tap into the player’s brain.

3. Define your axioms, refine your axioms. Prototype, prototype, prototype; sit in all the chairs.

4. Double it or cut it in half. You are more wrong than you think.

5. Make sure the player is having fun, not the designer/computer.

6. Games should be easy to start playing, but hard to stop playing.

7. Simple systems work together to create complexity.

8. Make it ‘Epic’!

9. Most important part of the game is the first and last 15 minutes.

10. Know when to stop, more is not always better and just because we can, doesn’t mean we should.

==========================

Bonus quote:

"a good game is a series of interesting choices."

*** Gamy Sprite Generator
Following along with a [[http://catlikecoding.com/unity/tutorials/noise/][tutorial over at Catlike Coding]] I was inspired
to create a sprite generator.  I always got a kick out of the randomly
generated user icons "identicons" on github, so I set out to generate
blocky sprites like those.

**** Basic procedural textures

**** Make it random

**** Tyger, tyger, burning bright

Apophenia, pareidolia.

To make parts of the sprite transparent, I had to use a [[http://docs.unity3d.com/Manual/shader-TransparentCutoutFamily.html][cutout shader]].

**** Make it repeatable

**** What's next?
Semantic generation of things.  I've noticed that certain shapes look
like boxes, like containers or items, like faces, like humanoid
bodies.  I'd like to explore the rules of procedural generation that
create these shapes and integreate them into the Gamy Sprite Generator
as optional constraints on the sprite generation algorithm.

Pet rock generator.  Move from a simple textured quad to a more
complicated 3 dimensional mesh.  I want to explore generating
interesting textures for 3 dimensional surfaces instead of simple
blocky sprites.

*** Roguelike Radio Combat Mechanics

**** No enemy has higher HP than 10
Focus is no longer on average damage per second.  You can focus on
tactics like maximizing cool downs, or using situational abilities
(based on position, enemy attack phase, enemy health, etc.).



*** Moon Hunters Kickstarter retrospective
Pie charts are not very helpful.  Bar charts are easier to read. So
I'm going to try to reverse engineer a pie chart from this article.

- Fees & Taxes
- Programming
- Art & Design
- Backer Rewards
- Audio
- Square Enix Collective

The top two take up about 50% of the pie.  Let's estimate Fees and
Taxes at 30% and Programming at 20%.  Art and design and backer
rewards are probably even at 17.5% each.  Audio is probably 10% and
SEC gets 5%.

| Expense        | Percentage |
|----------------+------------|
| Fees & Taxes   |         30 |
| Programming    |         20 |
| Art & Design   |       17.5 |
| Backer Rewards |       17.5 |
| Audio          |         10 |
| SEC            |          5 |


The resulting pie chart I get from this looks similar enough to the
pie chart in the article.  The moral of the story is that fees and
taxes take up a significant chunk of kickstarter funding (!) and that
pie charts, especially small pie charts with 6 wedges, need an
accompanying table of numbers to be worth the pixels they're blit on.

*** Full throttle junkyard puzzle
[[https://www.youtube.com/watch?feature%3Dplayer_detailpage&v%3DWE0Cf1JWsAg#t%3D2264][https://www.youtube.com/watch?feature=player_detailpage&v=WE0Cf1JWsAg#t=2264]]

Adventure games too much in inventory. Full throttle. Donkey and rider
puzzle. Idea of puzzle where everything u need is on te screen In the
double fine adventure Kickstarter one of te extra was a playground
with Tim Schafer playing dott and full their. Tim explains the genesis
of one of ft puzzles at time in video. Then fails to solve it. Turns
out it wasn't. But how could you make such an puzzle?

*** Pay what you mean
For a given service with a given fee structure, how much should you
pay, if you're electing to pay what you want above minimum price, to
ensure that the developers receive the amount of money you intend.

**** Platform coverage
- itch.io
- humble bundle
- steam

*** Microscope as a tool for plotting narratives

*** Twine macro ecosystem



* COMPLETED POSTS


** Trace function for debugging in Unity C#

A handy Unity C# function from @DanPuzey removes debug logging from
production builds

- Unity
- Unity3d
- C#
- tools

Inspired by [[https://www.youtube.com/watch?v%3DbtN095elmh4&feature%3Dyoutu.be&t%3D1985][a video from the excellent Double Fine Documentary
interviews with Massive Chalice artists and developers]], I wanted to
come up with a way of conditionally including debug statements in
development code, but not in production.  Luckily I wasn't the first
person to think of this.   [[http://blog.puzey.net/simple-better-unity-logging/]]

[[https://twitter.com/danpuzey][Dan Puzey]] [[http://blog.puzey.net/simple-better-unity-logging/][wrote an abstraction layer]] over Unity's built-in =Debug=
library.  The library contains several functions for various types of
logging.  The most important piece for me is =VerboseFormat=, which
combines string formatting with conditional attributes.  I'll explain
a bit more about how these pieces work below.

<!--more-->

*** String Formatting

To my surprise, Unity's C# implementation, Mono, doesn't use standard
=printf=-like string formatting syntax.  Instead of =%s= or other
commonly used formatting variables, C# uses curly braces around
numbers to interpolate variables passed in to the =String.Format= call
as arguments.

Dan's =VerboseFormat= function wraps =String.Format=, so you can call
=VerboseFormat= with C# formatting strings.

#+BEGIN_SRC csharp
  using Assets.Phunk.Core

  ...

  Log.VerboseFormat("var1: {0}, var2: {1}", var1, var2);
  // => [VERBOSE] var1: [var1], var2: [var2]
#+END_SRC

*** Conditional Attributes
Above some of the functions in Dan's code you'll see the following
[[https://msdn.microsoft.com/en-us/library/system.diagnostics.conditionalattribute%2528v%3Dvs.110%2529.aspx][conditional attributes]]:

#+BEGIN_SRC csharp
  [System.Diagnostics.Conditional("DEBUG"), System.Diagnostics.Conditional("UNITY_EDITOR")]

#+END_SRC

These two settings tell the C# compiler, in this case the =Verbose=
logging functions, to only compile the code when compiling during
development, i.e. =DEBUG= or =UNITY_EDITOR=.  That means all of the
=Verbose= logging statements in your code will not be compiled in the
production builds of your code.

Cool, huh?  Good thinking, Dan.

*** That's it!

It's always great when you think that a tool would be useful and
someone else has already implemented it for you.  Go on over and give
[[http://puzey.net/][Dan's blog]] a gander.

** C# code blocks in Octopress
- Octopress
- tools
- C#

[[http://octopress.org/][Octopress]] supports [[http://octopress.org/docs/plugins/backtick-codeblock/][backtick code blocks]] with [[http://pygments.org/docs/lexers/][Pygment lexers]] handling
syntax highlighting.  I always forget the syntax for using them,
leading to irritating failures when I build my Octopress blog.  Here's
how you use them.  I'll use ='= instead of =`= for this example.

#+BEGIN_SRC
''' csharp
[csharp code here]
'''
#+END_SRC

** Mobile Frame Football Association
From The Game Design Workshop book:

One good way to train yourself in the design of game mechanics is to
challenge urself with controlled design exercises in which you take an
existing game system, set a new player experience goal, and make
changes to the system to meet that goal

*** Football games
**** Duration of play
Mobile Frame Football Association (MFFA) sanctioned games last 6
turns, consisting of two equal 3-turn halves.  MFFA rules do not allow
for the countdown mechanic from the vanilla Mobile Frame Zero (MF0)
rules.

**** Objective
When time expires, the player with the highest number of goals scored
wins.

**** Teams
Games are played between teams consisting of equal numbers of frames.
Frames may have up to 4 systems installed, with the usual vanilla MF0
benefits for fewer than 4 installed systems (see, e.g., MF0 p. 64).
For more explanation see /Dice Systems/.

**** Field of Play
The game field should be approximately the size of a normal MF0 table,
with goals the size of 1 /movement scale/ on each end of the field.
Lines should be laid out to clearly mark the in bounds/out of bounds
boundary.  There should be at least 1" of space on the sidelines, to
allow for units to be positioned outside of the field during out of
bounds situations.

The size of your available Field of Play can dictate the Movement and
Shooting Scales for your game.  The suggested defaults are based on a
normal MF0 table, your mileage may vary.

*** Deployment
During the deployment phase, you may place your units anywhere on the
field in a legal formation.  Cool your servos, I'll describe the legal
formations in just a sec.

**** Beginning of play
At the beginning of the game, at the beginning of the second half, or
at a kickoff following a goal, players take turns placing units in
bounds, in the half of the field that has been assigned (See:
[[*Determining%20possession][Determining possession]]).  The player in possession of the ball, the
/offensive player/, goes first.  The ball, represented by a d12, is
placed at the center of the field. The offensive player must place a
unit next to the ball, this unit is in possession of the ball.

***** Maintaining possession of the ball
A unit possesses the ball if the ball is in contact with its base
(i.e. its legs).  If two opposing units are in contact with the ball
the unit in possession of the ball first maintains possession unless
the opposing unit steals or tackles.  Similarly if two units on the
same side are in contact with the ball, the unit in possession of the
ball first maintains possession unless it passes successfully to the
second unit.

***** Determining possession at kickoff
A coin flip determines possession at the beginning of the game, with
the winning player electing to be on offense or defense first.  The
losing player gets to determine the side of the field in which to
deploy.

At the half, the possession and sides switch.  Following a scored
goal, the player who was scored on gains possession of the ball at the
kickoff.

**** After a dead ball situation
Play is stopped due to a foul, an out of bounds ball. This is called
a /dead ball/ situation.

***** Out of bounds
Out of bounds balls force a turnover of possession. The ball is placed
on the sideline where it went out of bounds.

Both players may redeploy their units, however the offensive player
may not place a unit beyond the defensive unit closest to the goal.
The defensive player places first, and must move the unit closest to
the goal first, if it will be moved in the redeployment.  Players
alternate placing units.  The offensive player must place a unit next
to the ball.

After the offensive player redeploys the last unit, play resumes with
the unit next to the ball immediately taking its turn, regardless of
its initiative roll.  If the unit next to the ball has an initiative
die, remove it.

****** Corner Kicks and Goal Kicks
Corner kicks occur when a defending unit kicks the ball out of bounds
on the sideline running on its own 'goal' side of the field.  The ball
is placed on the corner sideline on the side it went out of bounds.

Goal kicks occur when an offensive unit kicks the ball out of bounds
on the sideline of the defensive units' 'goal' side of the field.  The
ball is placed in front of the goal.

***** Fouls
Fouls do not force a turnover of possession.  Redeployment following a
foul occurs the same as in the [[*Out%20of%20bounds][Out of bounds]] situation.

***** Redeployment and units that have already taken turns
Redeployment does not normally reset whether a unit has taken its
turn.  If the unit placed next to the ball in a dead ball situation
has already taken its turn, it gets a free turn taken immediately
following deployment, when play resumes.

*** Initiative
For the time being, MFFA uses the older per-unit turn order from MF0
(p. 136).  Enough with the hutching bellyaching, you yabbies.

Players roll 1d10 for each unit, placing the die next to the unit.
Initiative starts at 1 and counts up.  When you reach a unit's
initiative roll in the count, remove the initiative die next to the
unit, that unit takes its turn.

If two units have the same roll, when their number is reached, reroll
the initiative dice. Lowest roll goes first with the next highest
reroll going immediately after.  Once all of the rerolled ties have
been resolved, the initiative count continues as normal.

In a dead ball situation, the initiative count does not reset.

**** Coaching
Coaching adds a layer of complexity to initiative determination.  It
may slow down the game a bit, but it allows for extra tactical
decisions.

Coaching allows players to take control of the assignment of
initiative to each of their units.  Both players roll a number of
initiative dice equal to their units, then take turns assigning to
initiative dice to their units. The defensive player chooses first.
After initiatives are assigned, the initiative count starts and counts
up as normal.


*** Dice systems
As in MF0, frames have 2 white dice representing the frame chassis
plus other dice representing up to 4 additional systems.  Frames get
the usual vanilla MF0 benefits for having fewer than 4 installed
systems (see, e.g., MF0 p. 64).

**** Red dice
Red dice represent the ability of a frame to shoot or pass the ball on
offense.  Unlike the vanilla MF0 rules, there are two legal ranges for
red dice on offense: direct and artillery.  Systems granting hand to
hand dice are not rolled on offense.

When shooting, you must score a successful hit on the goal using the
difficulty table from MF0 to score a goal.  When passing you must
score a successful hit on your ally to successfully pass the ball. You
must declare the range you will be targeting at the beginning of your
turn.

On defense, red dice represent steals (hand to hand range) and slide
tackles (direct range).  Systems granting artillery dice are not
rolled on defense.

Red dice use a special scale that is different from the movement
scale.  See [[*Movement%20Scale%20and%20Shooting%20scale][Movement Scale and Shooting Scale]]

***** Passing and shooting
When in range for a shot or a pass, the player must roll a number of
/hit dice/ equal to the /shot value/ minus the blue /defense value/ of
any units in the line of fire.  Any units in the line of
the pass or shot act as cover, using the normal MF0 cover rules.  If
there is doubt, consult the MF0 cover rules to determine if a unit is
in the line of fire.

If the rolled hit dice successfully /score a hit/, then the ball goes
where the offensive player wants, into the goal or into the possession
of another unit.  Use Damage chart 2 from the MF0 rules (Hit target on
a 5 or 6) if there is no other unit between the shooter and the
target.  Use Damage chart 4 if there is a unit between the shooter and
the target. (Hit target on a 6)

Failure to score a hit is called a /fumble/, and causes the ball to go
wide somewhere in the range of the shot at the opposing player's
discretion (be reasonable here, it's not going to /fly backwards/).
This may cause the ball to go out of bounds, into the possession of a
unit, into the goal, or into the field of play.

***** Stealing and slide tackling
When stealing or slide tackling, /scoring a hit/ results in the ball
coming into the stealing or tackling unit's possession.  The stealing
or tackling unit's player rolls a number of /hit dice/ equal to its
red /shot value/ for the steal or tackle attack minus the blue
/defense value/ of the unit in possession of the ball.

Always use Damage chart 2 for stealing and slide tackling. On a roll
of 5 or 6, the steal or slide tackle scores a hit.  Possible rule: the
player who slide tackles to steal the ball may choose to destroy a
system on the opposing player's unit.

Failure to score a hit is a /fumble/.  Nothing special happens, unless
the player rolls a 1 on one of the hit dice.

Rolling a 1 on a hit die during a fumble results in a foul.  See
/Fouls/.

**** Blue Dice
Blue dice systems remain the same as blue dice systems in the normal
MF0 rules.  However, rather than representing armor, they represent
the ability of a unit to gain or maintain control of the ball.

**** Yellow Dice and Green Dice
Yellow and green dice systems remain the same as vanilla MF0.

**** Hot rodding
A player may choose to hotrod a unit's system by sacrificing a system
to gain a free action with one of the other systems after the unit has
taken its turn.

*** Taking a turn
Taking a turn begins with target declaration.  For the defensive units
this will generally be the unit in possession of the ball.  For the
offensive unit in possession of the ball, this could be targeting a
fellow offensive unit for a pass or targeting the opposing goal.

Attacks don't do anything to units without the ball.  Save that
animosity for the war.

The turn proceeds as per the vanilla MF0 rules. Any unit that would be
activated with the normal MF0 turn rules, i.e. the target of a steal
attempt or a pass, takes its turn as per those rules.

For example: If a unit equipped with a blue system is in the line of
fire and has not rolled to determine the blue /defense value/ this
turn, defending player must declare a target for the unit, roll all of
the unit's dice, and assign a /defense value/.  The unit takes its
turn as normal when its initiative dictates.

*** Movement Scale and Shooting Scale

Normal vanilla MF0 scale is 2".  /Shooting scale/ for MFFA is 2".
/Movement scale/ is double that, 4", to represent the agility of these
hot-rodded sportsframes.

Using two different colored rulers (e.g., 1 red for shooting and 1
green for movement) is a good way to distinguish /movement scale/ and
/shooting scale/.

** Proportion Types
- design
[[http://androidarts.com/misc/proportions_types.jpg]]

Arne over at Android Arts codified a taxonomy of proportion types in
character design.  I've kept track of a few examples I've come across
to share with you below.

*** Ninja Star
- Bravely Default
- Fire Emblem
- Miis
- Fez
- Super Mario Bros.
- Mischief Makers
- Gunstar Heroes
- Monument Valley

*** Cross
- Call of Duty Advanced Warfare
- Minecraft
- N++
- Gears of War
- Warhammer
- Last of Us
- Uncharted

*** Maltese cross
- Mega Man
- Mobile Suit Gundam
- Mazinger Z
- Getter Robo
- Armored Trooper Votoms
- Practically everything from Super Robot Wars
- Ratchet and Clank

** Improvisation vs Preparation
This week I look at how games from JoshuaACNewman, handle
Improvisation vs Preparation as modes of play

- design
- mechanics

Or preparation as play.

This post was inspired by hearing about long set-up times eating into
time-crunched play time for busy adults.

As young adults with minimal time commitment it was nothing to spend
hours preparing for a gaming session among friends.  There was little
concern for an hour or two spent setting up a wargaming afternoon.
But as adults these time commitments quickly eat-in to or completely
consume any time that would otherwise be spent having fun, gaming with
your friends.

Certain games lend themselves more to the /preparation/ side of things
than the /improvisation/ side.

Consider the examples I mentioned above, a gamemaster driven
roleplaying game and a tabletop war game.  Certainly these are fun
pastimes but they require preparation on the part of the individual or
all parties involved.  Roleplaying games require, at least initially,
the generation of player characters for all involved, potentially
consuming the entire first play session.  The gamemaster is required
to plot out a scenario for each play session, necessitating an
substantial noninteractive time investment outside of the normal play
session.  For war games, players must spend time constructing armies,
generally away from the normal interaction at the table.

In the thick of the actual game, both roleplaying and tabletop gaming
can be fun and improvisiational in the same way as the sorts of games
I'm calling /improvisiational/.  I don't deny that.

How does this differ from say playing stickball or baseball with your
friends in an alley or a field with just a stick and a ball?  The game
starts when the minimally necessary instruments arrive and continues
even as players come and go.  It's almost heinous to interrupt these
sorts of improvised games, hence the saying "taking the ball and going
home."

To stretch this metaphor beyond its limit: in this syllogism, the
polar opposite of pickup baseball or basketball would be ice hockey,
something requiring potentially hours of preparation by a Zambonist to
prepare the playing surface so the players can play for a relatively
short time.

Some roleplaying games provide hook generation tables.  Sometimes
rolling on random tables to generate encounters can feel like play,
but it's a relatively lifeless mechanic.

There are a few games that get preparation as play mechanics right,
but I think there is still room for improvement.

  - Shock

  - Fate Core

  - Prime Time Adventures

  - Microscope

  - How to Host a Dungeon

These games all turn the world gen and character background into an
gameplay activity, typically performed during the first group play
session.  Shock even does away with the necessity of a GM, allowing
players to take turns serving as protagonists, antagonists, or neutral
third parties.  These examples go a long way toward what I mean by
preparation as play, but I don't think they've captured it entirely.

What I'm looking for is a separate /asynchronous/ type of game, where
preparation has its own mechanics that boil down to a solo game unto
itself.  The results of the each player's solo game(s) are then
somehow incorporated and allowed to influence the collaborative group
play session.

*** Microscope
Follow up next week

** The map and the territory.
- design
- level design

Thinking about classic platformer maps as examples of good game
design.  Not just thinking about level design, but that's a big part.
Also thinking about beauty and elegance in achieving some level of
communication with the player, both in the aesthetic and practical
sense.  Jeremy Parish has looked at this sort of thing from a holistic
perspective in the Anatomy of Games series.

And others:
[[http://www.themmnetwork.com/blog/2012/08/19/a-critical-look-at-mega-man-3-stages-snake-man]]
[[http://www.themmnetwork.com/blog/?tag%3DA%2BCritical%2BLook%2Bat][http://www.themmnetwork.com/blog/?tag=A+Critical+Look+at]]

Here I'd like to examine how the artifacts of design can communicate
the intention behind the choices made for the design, to the extent
that's at all possible.  I hope that by coming up with a working
vocabulary for this type of classic design, future designers can
leverage it to not only improve their techniques, but to build
systems, based on this design syntax, that can design in a realistic,
authorial manner.

I'll be looking at maps hosted on [[http://www.vgmaps.com/Atlas/PC/index.htm#MegaManIII][vgmaps.com]] and speed runs and other
examples of play.

In a way, design for interactive media is a way of communicating.  The
designer, or more classically author, communicates with the player
asynchronously.  At each turn, the designer must think like a player,
novice to advanced, and create clever scenarios to keep the player
intrigued.  In the medium of the platformer genre, the elements of
design communication are the level and the enemies, which are
minibosses, bosses, or cannonfodder.  The designer rarely has a chance
to see how the game will be played before the ability to refine or
modify the design is long gone.

** Shovel Knight's Old-school Tricks
- design
- mechanics

Great article about parallax scrolling and  plenty of other stuff from
Shovel Knight:
[[http://gamasutra.com/blogs/DavidDAngelo/20140625/219383/Breaking_the_NES_for_Shovel_Knight.php]]

Even some indies are getting into the spirit:
[[https://twitter.com/NoelFB/status/487185061972680705/photo/1]]

Interview with the Shovel Knight creators Yacht Club Games:
[[https://www.nintendoworldreport.com/connectivity/38203/episode-144-ive-seen-some-badass-canes]].
The interview starts about 28 minutes into the podcast.

*** Resolution
Shovel Knight runs on displays meant to run 1080p down to pocket-sized
3DS screens.  The fine article mentions that scaling Shovel Knight's
NES-style graphics up to 1080p results in virtual pixels of about 4.5
x 4.5 1080p pixels.  It also mentions that the effective resolution
they shoot for is 400 x 240, resulting in an aspect ratio of 5:3.
According to the fine article and [[http://en.wikipedia.org/wiki/Nintendo_Entertainment_System_technical_specifications][wikipedia]], that's pretty close to a
stretched out version of the original NES resolution.  For nothing
else but my own reference here, the DS' resolution is 256 x 192,
according to [[http://www.usgamer.net/articles/final-fantasy-iii-pc-port][this article]].  The Gameboy is 160 x 144 according to
[[http://jams.gamejolt.io/gbjam3][#gbajam]].  Typical NES background tiles are 16 x 16 pixels, foreground
sprites are either 8 x 8 or 8 x 16 (Sources:
[[http://wayofthepixel.net/index.php?topic%3D10784.5%3Bwap2][http://wayofthepixel.net/index.php?topic=10784.5;wap2]];
[[http://en.wikipedia.org/wiki/Nintendo_Entertainment_System_technical_specifications]]).
For reference, Link's sprite in Legend of Zelda, an NES game, is 16 x
16, Link's sprite in Link's Awakening, a gameboy game, is 16 x 16, and
Link's sprite in A Link to the Past, an SNES game, is 32 x 32.

http://www.fortressofdoors.com/the-quest-to-upscale-pixel-art/

And [[http://en.wikipedia.org/wiki/Neo_Geo_(system)][NeoGeo]] is:
#+BEGIN_QUOTE
Display resolution: 320×224 (many games only used the centermost 304 pixels)
Color palette: 65,536 (16-bit) (Not RGB565, but RGB666, where the lowest bit of each channel is shared with one bit[14])
Maximum colors on screen: 4,096 (12-bit)
Maximum sprites on screen: 380
Minimum sprite size: 1×2
Maximum sprite size: 16×512
Maximum sprites per scanline: 96
Simultaneous scroll planes: 3
Aspect ratio: 4:3
#+END_QUOTE

And LDTV is:
[[http://en.wikipedia.org/wiki/Low-definition_television#References]]

More modern resolutions considered:
[[http://gamedevelopment.tutsplus.com/articles/quick-tip-what-is-the-best-screen-resolution-for-your-game--gamedev-14723]]

PS1: 320 pixel wide resolution.  SOTN: 356 pixels wide, tiling pattern
consists of 16x16 blocks tiling with 16 colors each.

So the Shovel Knight screen is 25 x 15 tiles.

I find choosing an aesthetically pleasing aspect ratio to be a crucial
design decision; one that I often approach on a trial and error basis.
Knowing what others have--in my humble opinion successfully--chosen
gives a nice starting point /a priori/ for projects with similar
scope.

[[http://2-dimensions.com/2014/08/20/mighty-gunvolt-fine/]]

Axiom Verge: 480x270

*** Backgrounds

*** One comment on designer-player interaction through design

According to [[http://www.usgamer.net/articles/inside-shovel-knights-launch][this article]] by Chris Holt, the Shovel Knight designers
were realtively wishy washy about including the fishing pole.  For the
record, I like the addition of yet another superfluous minigame.  And
it's useful for fishing up money bags left in pits when you die, so
there.

The use of sparkles to mark pits containing potential fishing spoils
illustrates a clever bit of design and interaction with the player
through design.  You, the player, will notice that the pit in the
fish-themed level has the sparkles.  So, naturally, you're very likely
to fish there.  Bada-bing bada-boom: fish spoils.  The designers have
communicated what the sparkles in the pits mean without having to
resort to lame exposition from a tutorial or a helper character.

The great games of the NES-era that Shovel Knight emulates were
littered with these kinds of ingenious communicative design patterns.
Here's [[http://iwataasks.nintendo.com/interviews/#/wii/nsmb/0/3][an interview with Shigeru Miyamoto]] talking about the deliberate
design behind communicating the purpose of the iconic mushroom
power-up in Super Mario Bros.

*** Another fine example of introducing new mechanic in Shovel Knight.

In Treasure Knight's level you come across rocket platforms that fly
horizontally when you activate a lever by hitting it with your shovel.
For my play-through this was the first time I encountered these
platforms.

Since they are your means of conveyance to avoid spikes below, the
devs could have been mischievous about it. As your intrepid game
design blogger is well versed in virtual button pressing, my first
reaction is to hop on the platform and press boot-ton--viciously
strike the lever with the shovel. Ah, but doing so leads to a spikey
death for those with slow reaction times--your intrepid blogger, yeah,
yeah.

The second time through YIB, meaning me, and likely you, meaning you,
would be more wary; carefully timing the necessary jump to avoid the
spikes. The devs, in their wise and studied ways, saw fit to embed a
dig-able reward nugget in the wall. It's lodged in such a way that
when you knock it loose it lands just so, so when you shovel it to
dislodge the pecuniary treats within, you also hit the lever,
activating te rocket platform. Now you know to look ahead and
carefully time your jump. No harm no foul. No wordy tutorial, telling
you, "Hey, listen. This platform shoots off when you hit the lever."

You learned the new mechanic, and thus the behavior necessary to
interact with it, through previously ingrained behavior beaten into
your head with a thousand gem pickups.  It's devilishly clever.

*** Shovel Knight's toolset

**** Physics
Box2D

**** Level Editor
Tiled Map Editor

**** Pixel Editor
Pro Motion

**** Audio Engine
FMOD Sound System

**** Rendering
Angle

**** Rendering and Input
SDL

** Feature Complete
What makes a game feature complete?

Of course the makeup of a list of game features depend on the
particular project in question.  This list of features required to
make /Threes/ feature complete comes from early on in the published
emails about the game's development.

The final product has certainly received many times more polish than
the time spent implementing these features and the list may have
changed.  But, from time to time, it's nice to see what other
successful projects have deemed necessary to get a better sense of how
to plan for your own projects.

*** Features

- Core Game
- Tutorial
- Menu Flow
- Music
- SFX
- Monster Animation
- Game Rotation (for the iPad/PC)
- Leaderboards
- Achievements
- Twitter
- Skin Packs
- IAP
- (Undos?)
- Puzzlejuice Cross-promotion


** Mario Design Interview

Distilling an interview with Shigeru Miyamoto.

- design

In the interest of preserving an interview that could easily vanish
into the ether following a Nintendo website redesign, I'm going to
collect some wisdom from [[http://iwataasks.nintendo.com/interviews/#/wii/nsmb/0/0][an Iwata Asks with Shigeru Miyamoto]].

*** Elements of a fun game
- "A fun game should be easy to understand -- you should be able to
  take one look at it and know what you have to do straight away."
- "It should be so well constructed that you can tell at a glance what
  your goal is and, even if you don't succeed, you'll blame yourself
  rather than the game."
- "The people standing around watching the game have also got to be
  able to enjoy it."
*** Form follows function
A repeated theme that emerges in the interview is that constraints of
the hardware or display technology restricted the designs.  Miyamoto
and crew had to come up with simple, evocative designs that
communicate the function for each of the entities in the game world.
Following the maxim that a fun game should be easy to understand,
straightforward designs that show an entity's purpose in an easily
recognizable manner communicate the designer's intent to the player.
*** Try it and see
Gameplay staples from the Mario series that seem unequivocally
well-designed emerged from a simple iterative prototyping process.
The designers had an idea, for example, "What if we double the size of
our main character?"  They then implemented it in a development build
of the game, and tested it out to see if it was fun.  By testing this
particular design choice, the designers came up with the idea for a
mechanic in the game to double the size of the main character as the
result of picking up a power-up.
*** Communicating through design
The simple introduction of the mushroom power-up is a clever bit of
communication through the design of a level.  By this point the player
has likely learned that stomping on Goombas squashes them.  The
placement of a power-up block above the player situates it so you have
no choice but to hit it when you try to squash the Goomba.  By keeping
the player trapped under a line of blocks, the power-up has time to
bounce off of a pipe (blatantly informing the player that power-ups
can bounce) and the player is likely to run into it, thus discovering
its purpose.

Notice how the construction of the level (one of the elements of fun),
its design, makes it easy to understand (another element of fun) the
function of these power-ups.  At no point is it necessary to wrest
control of the player to blabber on about what power-ups are, why the
player may want to pick them up, what other power-ups exist in the
world, /et cetera ad infinitum ad nauseum/.
*** Feel and smell
These two terms refer to the subjective aesthetic impression of the
perceptual and interactive elements of a game.  These can be a nice
way to distinguish your game from the others out there.

Miyamoto uses the term smell to refer to the overall impression that a
game leaves on your senses.  By really making a distinct impression on
the player, the experience is likely to stick, leading to
replayability.

The feel of a game refers to the subjective feeling the player gets
when pressing buttons on the controller.  Every game uses the same
controller (more or less), but the feeling that a player gets upon
pressing a button can differ drastically depending on the game.
Miyamoto mentions, and I agree, that sound effects have a huge impact
on the feel of a game.
**** Jan Willem Nijman of Vlambeer on game feel
[[http://words.underscorediscovery.com/jan-willem-on-game-feel/]]



Martin Jonasson petri purho juice it or lose it


cactus igs 2009

[[https://www.youtube.com/watch?feature%3Dplayer_detailpage&v%3DAJdEqssNZ-U#t%3D381][https://www.youtube.com/watch?feature=player_detailpage&v=AJdEqssNZ-U#t=381]]

The people behind the Nuclear Throne wiki have put this philosophy
into practice.  The wiki has screen shake every time you click the
mouse, and there's an easter egg where pressing a button will play the
sound of an airhorn.  I'm going to go on record here and say that the
airhorn onomatopoeia shall henceforth be:
"Byubyubyubyubyuuuuuuuuuuuuu."

Bullets shouldn't be small.  It's no fun when they're small.  Make it
about the size of the character's chest.  Also make the first frame of
animation a circle so that you have a muzzle flash.

Camera lerp

Pause the action for 20 ms when something cool happens.  That's about
10% of [[http://www.humanbenchmark.com/tests/reactiontime/stats.php][average human reaction time]].  So, ignoring nonhuman players,
that means that this introduces a subliminal pause that adds a kind of
weight to the action.


** Chevy Ray's level design notes
Documented some lovely notes from @ChevyRay

[[https://twitter.com/ChevyRay/status/567124249626689536/photo/1]]

*** Macro
- teach mechanics to the player
- progress left → right (?)
- "challenges" stringed together
- avoid repeat challenges unless they are harder/different than before
- levels should "tell" a story (aka "be" one)
- finale?
- difficulty progression: get harder, but dip down as player learns
  new mechanics
- can avoid all enemies? should the player need a reason to fight the
  enemies?
- playful/interactive, lots of movement, reactive things,
  bounce/squish/feel/touch
- should be long or short?
- linear or branching progression?
- how is a level completed?

*** Micro
- jumps, gaps
- simple enemies?
- hit things with sword - blocks/bushes?
- spike traps
- bounce gaps with w/ mushrooms

*** Coda
Every level should *feel* unique, be identifiable in some form or
another, whether it be aesthetically or mechanically, or both

** Sprite wisdom from NITW
[[https://twitter.com/infinite_ammo/status/607863708576972800/photo/1]]
** Yarn by Infiniteammo and crew
https://github.com/InfiniteAmmoInc/Yarn

*** Sample JSON output
#+BEGIN_SRC js
  [
    {
      "title": "Start",
      "tags": "",
      "body": "Frank: Hey, it's me. Frank.\nSammy: W-who?\nFrank: Frank! Ya know?\nSammy: Umm. N-no, I don't... know?\n[[Why don't you know?|WhyNot]]\n[[Anyways, whatever.|Whatever]]",
      "position": {
        "x": 540,
        "y": 260
      }
    },
    {
      "title": "WhyNot",
      "tags": "",
      "body": "Frank: Why not?\nSammy: Because this is stupid.",
      "position": {
        "x": 330,
        "y": 505
      }
    },
    {
      "title": "Whatever",
      "tags": "",
      "body": "Frank: Whatever.\nSammy: That's the spirit!",
      "position": {
        "x": 785,
        "y": 496
      }
    }
  ]
#+END_SRC

** uTiled
https://bitbucket.org/vinull/utiled/overview

** Cheeky Tinted Blobs
Following along with @pentadact's tutorial video [[https://youtu.be/I5qxIhdEx28?t%3D1m33s][here]] (You can see the
finished result around 6 minutes into the video).

*** The goal
We want to generate a splotchy blurred out nebular background.
Without going into to too much detail, I'm interested in something
that would go well underneath a procedurally generated space station
map

*** The algorithm
The algorithm @pentadact explains works like this:

1) Draw an extremely faint white *blob*
2) Tint the *blob* one of two randomly generated *colors*
3) Randomly place the tinted *blobs*


*** How it works
The blobs are white, which is represented in RGB color as 100% in all
three values (black is 0%).  This corresponds to 255 in 8-bit
colorspace and =1.0= in Unity's colorspace.  Since the blobs are
faint, the actual RGB values will approach, but not reach 100%.

When we apply a tint to the blobs' sprites we are essentially
multiplying each of the RGB values by our desired color's value.  The
resulting value will approach the full /intensity/ of the color as our
raw blob approaches 100% white, if that makes sense.  So the result is
a faint blob of any desired color we want.

The colored blobs overlap each other, generating interesting patterns
of lighter and darker mixtures of the two colors.

*** Blobonia
I fired up my favorite image editing program and made a 256 x 256
=png= blob sprite.  Using the airbrush tool, I plopped a blob in the
middle of the canvas.

The settings I used were:

- 128 pixel diameter
  - To avoid any artifacts around the edges of the canvas
- Very soft hardness
  - To avoid sharp edges
- 20% opacity
  - To help with blending later on

*** Setting the scene, blob prefab
Back in Unity, create a fresh 2D project and imported the blob sprite.
We drag the sprite into the scene to create a =GameObject= with the
blob sprite.

We then add a =Sorting Layer= named =Blobs= and set the sprite's
sorting layer to =Blobs=.  While we're at it, we also create a sorting
layer named =BG= behind the =Blobs= layer for the background.

We name the =GameObject= =Blob= and drag it to the =Prefabs=
directory, creating a prefab from it.

Blob prefab in hand, we still needed a couple more pieces to prepare
the scene.

*** Backdrop

I create an black =Background= UI object and set the =X scale= and =Y
scale= to =1000=, to be sure Background covered the whole screen.  I
then set the sorting layer of the sprite to =BG=.  Remember how I set
that layer up earlier?  How prescient!

*** One GameObject To Hold Them All
We're planning to create a whole metric ton of blobs, so we create a
=Blobs= =GameObject= to hold all of the blobs.  By setting the
instantiated blob's =transform.parent= to the =Blobs.transform= all of
the instantiated blobs fall under the parent =Blobs= =GameObject= and
it keeps the Hierarchy in our Scene nice and tidy.

*** BlobGen
We have a background, a Blob prefab and even a =GameObject= that will
hold all of the blobs we plan to create. Now we just need to make a
=BlobGenerator= script to randomly place the blobs.

The =BlobGenerator= takes a reference to the Blob =Prefab=, a
reference to the parent Blobs =GameObject=, an integer number of blobs
to create, and maximum and minimum coordinates to control the spread
of the created blobs.

The =BlobGenerator= generates two random colors using a function
called =RandomColor=,
#+BEGIN_SRC csharp
  Color RandomColor() {
      return new Color(Random.value, Random.value, Random.value);
  }
#+END_SRC
Which it then zips up into an array called =colors=.  =Random.value=
returns a random =float= between =0.0= and =1.0=, which we use to
generate a new =Color=.

Then the =BlobGenerator= gets into the main routine, =PlaceBlobs=.
Briefly, =PlaceBlobs= instantiates clones of the blob prefab at random
positions within the maximum and minimum boundaries we specify, makes
the cloned blob a child of the parent Blobs =GameObject=, and sets the
color tint of the cloned blob to one of the two colors generated
above.

#+BEGIN_SRC csharp
  void PlaceBlobs() {
      for (int i = 0; i < numberOfBlobs; i++) {
          GameObject blockClone = Instantiate(blobPrefab,
                                              new Vector3(Random.Range(xMin, xMax),
                                                          Random.Range(yMin, yMax),
                                                          0f),
                                              Quaternion.identity) as GameObject;
          SpriteRenderer sprite = blockClone.GetComponent<SpriteRenderer>();
          blockClone.transform.parent = blobs.transform;
          sprite.color = colors[Random.Range(0, colors.Length)];
      }
  }


#+END_SRC

That's all there is to it.

*** Moving forward

It would be nice to have more fine-grained control over the local
density of the blobs in regions, so the map would become a little less
uniform.  But I think the effect we've achieved works nice as a
background.
