
* Setting up octopress
** Clone into the octopress repo
#+BEGIN_EXAMPLE
git clone git://github.com/imathis/octopress.git zerosalife.github.io
#+END_EXAMPLE

** Install dependencies and setup github pages

#+BEGIN_EXAMPLE
bundle install
rake install

#+END_EXAMPLE

Make sure git is set up to use the correct user information.

#+BEGIN_EXAMPLE
git config --list
#+END_EXAMPLE


#+BEGIN_EXAMPLE
rake setup_github_pages
#+END_EXAMPLE

** Su wu
#+BEGIN_EXAMPLE
/su:zerosalife@machine:
#+END_EXAMPLE

** Add image to header
[[http://blog.bigdinosaur.org/changing-octopresss-header/]]

** Add about page
[[http://gangmax.me/blog/2012/05/04/add-about-page-in-octopress/]]

** Code blocks in octopress
[[http://octopress.org/docs/plugins/codeblock/]]

** Markdown cheatsheet
[[http://ddloeffler.blogspot.com/2013/04/keybindings-for-emacs-markdown-mode.html]]

[[https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet]]

** Favicon editor
[[http://favicon-generator.org/editor/]]
0
** Read more
Use the =<!--more-->= tag.

[[http://octopress.org/docs/blogging/plugins/]]
** Center text
you can center text by surrounding it with the =-> text <-= symbols

** Modal dialogs in octopress
Modal content

[[http://octopressthemes.com/blog/2012/11/10/adding-a-modal-dialog-to-octopress-with-foundation-zurb/]]

Even better:
[[https://github.com/rayfaddis/octopress-BootstrapModal]]

* Chrono Trigger Random Number Generator               :analysis:R:mechanics:
categories:
- analysis
- algorithms
- R
- mechanics

** Introduction
[[http://en.wikipedia.org/wiki/File:ChronoTriggerInside.PNG][{% img http://upload.wikimedia.org/wikipedia/en/d/d5/ChronoTriggerInside.PNG from Wikipedia%}]]
Image from [[http://en.wikipedia.org/wiki/Chrono_Trigger][wikipedia.org]].

I recently revisited [[http://en.wikipedia.org/wiki/Chrono_Trigger][Chrono Trigger]], a 20-year-old Square role playing
game (RPG) for the SNES.  I was inspired by a [[http://www.youtube.com/watch?v%3DV_SFck-xeGM][speed run]] from [[http://gamesdonequick.com/][Awesome
Games Done Quick]] 2012, a charity fundraiser featuring speed runs of
old and new school games.  If [[https://twitter.com/EssentiaFour][Essentia]] could [[http://speeddemosarchive.com/ChronoTrigger.html][beat the game in 5 hours]],
surely, copying her strategies, I could finish it in a reasonable
amount of time.

In the course of my play-through I grew curious about the underlying
mechanics of the Chrono Trigger battle system.  In order to optimize
speed running strategies, Chrono Trigger's mechanics have been
scrutinized to an obsessive degree.  There are numerous guides, one of
which is [[http://strategywiki.org/wiki/Chrono_Trigger/Formulae][here]].  But, none of the guides I found could clearly identify
the mechanics behind Chrono Trigger's [[http://en.wikipedia.org/wiki/Random_number_generation][random number generator]] (RNG).

Most likely, under the hood, the RNG is a variation of a [[http://en.wikipedia.org/wiki/Linear_feedback_shift_register][linear
feedback shift register]].  I recently came across a similar RNG in an
[[http://meatfighter.com/nintendotetrisai/#Picking_Tetriminos][in-depth article about the mechanics of NES Tetris]]. But I'm not
concerned with how the programmers implemented a good RNG.  I'm
concerned with the rules governing how that RNG interacts with the
battle system.

I'm gonna get a little pedantic here, bear with me. In an RPG combat
system, the RNG introduces an element of luck, which makes battles
more interesting and potentially ruining speed runs if not properly
understood.  The speed runners apparently compensate for any
variability of the RNG, but its mechanics have not been laid out.  So
I set out to investigate the mechanics of the RNG in Chrono Trigger,
using basic R commands to tease apart its underlying algorithms.

<!--more-->

** A brief note on the choice of R
There was no good reason to choose R for this analysis.  I chose R
because I was comfortable using it to quickly do the statistical
analyses summarizing a data set.

** Chrono Trigger's battle system

Chrono Trigger's battle system has two types of attacks: *[[http://chrono.wikia.com/wiki/Tech][Tech]]*
(including magic) and *[[http://chrono.wikia.com/wiki/List_of_Chrono_Trigger_weapons][weapon attacks]]*.  The Tech system is more
complicated than the basic weapon attack system, so I'll focus on
weapon attacks for now.

Crono's basic weapon attacks use the formula:

#+BEGIN_EXAMPLE
Attack = ((Power * 4/3) + (Weapon * 5/9))
#+END_EXAMPLE

Some of the other characters' attacks use different formulas.  For the
sake of simplicity, I'm going to focus my analysis on Crono.

The parameters *Power (PWR)* and *Weapon* determine the base
amount of damage dealt when a weapon hits, using the formula:

#+BEGIN_EXAMPLE
Damage  = ((Attack * 2) + (Random))
#+END_EXAMPLE

So the base damage Crono can deal, assuming *Random* is 0, is his
double *Attack* value.  This gives us a stable mark to observe the
variability of the RNG.

How is the random number determined?  To answer that question, I
set out to carefully analyze empirical data, accounting for the known
parameters of the *Damage* formula.  That's a fancy way of saying, I
hit the same enemies with the same weapons a bunch of times.  I kept
track of the damage dealt each time.

** Analysis and Observations
Crono begins the game with 5 *PWR* and his weapon is a Wood Sword,
which has a *Weapon* value of 3. Crono's *Attack* value is:

#+BEGIN_EXAMPLE
Attack = ((5 * 4/3) + (3 * 5/9))
#+END_EXAMPLE

So his *Attack* is 8⅓, which is rounded down to 8.  I think the
rounding down is equivalent to a [[http://en.wikipedia.org/wiki/Floor_and_ceiling_functions][=floor= function]] because, in cases
where the calculated *Attack* value would have a fractional component
above half, the game always rounds down.

I store Crono's *Attack* power in a variable called =apwr=.

#+BEGIN_SRC R
  c.apwr <- 8

#+END_SRC

That means his base damage per hit is double that:

#+BEGIN_SRC R
  calculated.hit <- 16

#+END_SRC

Now we observe a bunch of hits using these parameters.  This is no
simple task because Crono levels up after a few battles, changing the
value of his *Attack* parameter.  I kept the values consistent by
reloading, starting from scratch, each time Crono leveled up.

#+BEGIN_SRC R :session
  ## Crono Level 1, Attack Power 8
  raw.hits <- c(32, 17, 16, 17, 17, 17, 17, 16, 32, 17, 17, 17, 16, 16,
                17, 32, 32, 17, 16, 17, 17, 16, 16, 17, 16, 34, 16, 17,
                16, 17, 16, 17, 16)

#+END_SRC

Here we've got a collection that samples 33 hits by Crono at level 1.

We can get summary statistics:

#+BEGIN_SRC R :session
  summary(raw.hits)
#+END_SRC

#+BEGIN_EXAMPLE
> summary(raw.hits)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
  16.00   16.00   17.00   18.97   17.00   34.00
#+END_EXAMPLE

So, the majority of hits did 16 or 17 damage.  A few were much higher
than that.  The hits doing 32 or 34 damage represent critical hits,
which I failed to realize, would contaminate my data set.  Critical
hits simply deal double damage, a fact you can see by the lack of hits
dealing 33 damage.

A critical hit dealing 33 damage would require raw damage of 16.5,
which would require representing floating point numbers.  Given what
we previously observed about the *Attack* calculation above, it should
come as no surprise that Chrono Trigger's battle system uses integers
only.

We'll ignore critical hits for now.

Crono's calculated damage value is 16.  We see that the hits vary
between 16 and 17.  So the added *Random* modifier is either 0 or 1.

The modifiers occur with about the same frequency, given the tiny sample
size:

#+BEGIN_SRC R :session
  table(raw.hits)
#+END_SRC

#+BEGIN_EXAMPLE
> table(raw.hits)
raw.hits
16 17 32 34
12 16  4  1
#+END_EXAMPLE



** Summary

There are still questions that remain unanswered.

What RNG parameters govern levels 2 and 3?

Is the RNG governing the Tech system similar?

How does evasion work?  I haven't seen much information about missed hits.

Can I provide a concrete example of the *Attack* value rounding down
when its fractional value would be calculated to be above ½?

All told, it took me a little North of 12 hours to beat the game,
using Essentia's strategies.  I'm no speed runner.

* Some thoughts on Attack of the Friday Monsters       :review:3DS:mechanics:
categories:
- review
- 3DS
- mechanics

It's hard to say anything new about Attack of the Friday Monsters, a
game that splashed on the scene months ago.  The work of its creator
was lovingly lauded by [[https://twitter.com/rdbaaa][Ray Barnholt]]--a noted /[[http://en.wikipedia.org/wiki/Boku_no_Natsuyasumi][Boku no Natsuyami]]/
fanatic--in such a reverent way in his [[http://scroll.vg/issues/10][SCROLL magazine]] that it's
almost sacrilegious to try to write more.  So instead of doing a
point-by-point review, I'll mention some details that stand out to me,
personally.

I played through most of Attack of the Friday Monsters on a flight the
day after I watched Miyazaki's [[http://en.wikipedia.org/wiki/Arrietty][Secret World of Arrietty]].  Sure one had
beautiful water colors and amazing visual tricks mimicking real
camerawork and the other used pre-rendered backgrounds with blocky
polygonal actors on the stage, but these art styles complimented one
another.  They didn't clash.

[[http:///images/aotfm.JPG][{% img center /images/aotfm.JPG 320 320 %}]]

I was struck by the ambient sounds that bring the pre-rendered
backgrounds and polygonal characters to life. The periodic train
sounds, presaging the arrival of an in-engine rendered train--sort of
quirky and quaint with today's game engines powerful enough to render
both background and foreground objects--remind me of a previous
exposure to Japanese culture: the first time I watched [[http://en.wikipedia.org/wiki/Neon_Genesis_Evangelion][Neon Genesis
Evangelion]] as a teenager.  There are the ubiquitous cricket or cicada
sounds that were also present in Eva, but for me, they hearken back to
a youth spent in the rural South.  The drone of cicadas in the sticky
summer heat reminds me of falling asleep in a Mississippi home, of
walking into cool woods after standing in a sunny meadow.

The whole game engine is full of quirks and reminders of the PS1 era
of gaming.  But one of the mechanics seems rather novel, an addition
seemingly for its own sake, with little influence on actual plot or
gameplay.  I'm talking about the spell casting mechanic, reminiscent
of games children used to play in 70s Japan, the time in which Attack
of the Friday Monsters takes place.

If you win the sometimes annoying, somewhat forgettable,
rock-paper-scissors card game, fueled by collectibles strewn
throughout the world, you gain the ability to cast spells on your
buddies, knocking them down.  It has no bearing on the outcome of the
story.  The spell system is simply decoration that deepens the story
by providing a more complete world, accurately capturing what it feels
like to grow up as a child in Japan during the 70s.

You are allowed to pick, and reorder, the phrases of the spell your
character speaks.  This type of cosmetic customization is typical in
modern games, and in Attack of the Friday Monsters it's nothing more
than cosmetic, but it could have been used in surprising ways.

I realized the potential depth of this mechanic during a phone
conversation with my brother. As I told him about the spell casting,
he mentioned a Kickstarted pen and paper RPG called [[http://www.magiciansrpg.com/][Magicians]].
Magicians uses spells spoken in another language as both an impulse
toward learning the language and a mechanic for determining the
success or failure of an action. The game my brother described
involved a Harry Potter-esque international school for magicians in
Korea.

To use magic, the characters, and thus the players, have to correctly
speak Korean words--at least accurately enough to satisfy the
voice-recognition system of an online translation service.  This sets
up the potential for a rather clever scenario in which characters'
/[[http://en.wikipedia.org/wiki/Bildungsroman][Bildungsroman]]/ stories are echoed by the players' acquisition of the
language.

At present, on the 3DS, the kind of voice recognition required for
this sort of is [[http://www.gamefaqs.com/boards/997781-/58911600][immature]].  But it's certainly possible on more
powerful platforms.

One way to exploit the 3DS, and other devices with touch interfaces,
involves learning written language, such as Japanese /[[http://en.wikipedia.org/wiki/Hiragana][hiragana]]/ or
/[[http://en.wikipedia.org/wiki/Katakana][katakana/]].  I can imagine a magic mechanic that involves correctly
writing scrolls, where the fidelity of the player's calligraphic
strokes determines the strength and efficacy of the scrolls.

Another possible approach is to build up language comprehension by
constructing words out of syllables.  Given several options, one would
choose the correct syllable to complete the necessary word, in order
to perform an action or cast a spell.  A similar sort of approach
would work for learning syntax, completing or building a sentence with
the appropriate words.

Attack of the Friday Monsters is a quick experience, but the depth of
its design has made it a memorable one.  If you'd like to learn more
about the game and its creator, you can check out [[http://scroll.vg/extras/summer-vacation-confidential/#a][this interview]] by
Ray Barnholt, which covers Attack of the Friday Monsters and other
games by creator, Kaz Ayabe.

* Visualizing Zelda Dungeons                              :design:CommonLisp:

* Visualizing Zelda Dungeons in Clojure                      :design:Clojure:
"Port it to Clojure, dogg.  There's a nice library by [[https://github.com/ztellman][Zachary Tellman]]
called [[https://github.com/ztellman/rhizome][Rhizome]]," read my notes.  It'll be easy, I think.

* An entity component system for Pygame :design:python:pygame:entity:component:

* What's in a name?

* An in-depth tour of Tetris
categories:
- AI
- design
- mechanics
- NES

{% img center
http://upload.wikimedia.org/wikipedia/en/a/ae/Tetris_NES_play.png %}
Image from [[http://en.wikipedia.org/wiki/Tetris][wikipedia.org]].

This week I've spent quite some time reading [[http://meatfighter.com/nintendotetrisai/][this article]] on
[[http://meatfighter.com/][MeatFighter.com]].  The article reverse engineers the inner-workings of
[[http://en.wikipedia.org/wiki/Tetris#NES][NES Tetris]].  With great visual aids, the author, [o__1] [1], surveys
the mechanics and data structures used to implement Tetris on the NES.
Then o__1 designs and implements an AI script to play Tetris with
super-human speed and precision.  o__1 even describes how to try it at
home, providing instructions and the necessary Lua scripts to run the
AI on your own copy of Tetris.

I hope to see more articles looking back on classic games with this
tremendous attention to detail.  An older [[http://home.comcast.net/~jpittman2/pacman/pacmandossier.html][article looking at Pac-man
AI]] shows similar obsessive depth.  Articles like these help supplement
our appreciation of these games as works of art by documenting the
essential technical complexities underlying these games.  I think
that's a good thing for everyone from hobby developers to professional
developers, as well as designers and fans.

[1]: I'm referring to the author by the contact email listed on the
website.

* What's an LFSR? :design:algorithm:mechanics:Clojure:
