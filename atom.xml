<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[zero's a life]]></title>
  <link href="http://zerosalife.github.io/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2014-11-01T12:57:24-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make things that make things: #procjam 2014]]></title>
    <link href="http://zerosalife.github.io/blog/2014/11/01/make-things-that-make-things-number-procjam-2014/"/>
    <updated>2014-11-01T12:48:46-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/11/01/make-things-that-make-things-number-procjam-2014</id>
    <content type="html"><![CDATA[<p>I&rsquo;m thrilled to announce that I&rsquo;m going to participate in the <a href="http://itch.io/jam/procjam">upcoming procedural game jam called #procjam</a>.  #procjam is a global game jam and a live-streamed conference in London focused on making things that make things. You can keep up to date by following the jam tumblr <a href="http://procjam.tumblr.com/">procjam.tumblr.com</a>. There&rsquo;s already a <a href="http://procjam.tumblr.com/post/99689402659/procedural-generation-tutorials-getting-started">handy list of procedural generation tutorials available on the tumblug</a>.</p>

<p>In addition to submitting one or two projects I&rsquo;ve been working on, I&rsquo;d like to cover the content of the talks with perspective and reactions, and to check out the contest entries after it&rsquo;s finished <a href="http://zerosalife.github.io/blog/2014/07/26/space-is-read/">like I did for <em>Space Is Red</em> from #spacecowboyjam</a>.</p>

<p>Needless to say this will be a month-long endeavor, what with my weekly (ish) blogging schedule.  With one or two posts focused on submissions, I think four blog posts may be conservative, so I&rsquo;ll keep writing as long as I&rsquo;m interested.</p>

<p>To make it easier to follow along, I&rsquo;ll tag up all the posts with the procjam category and I&rsquo;ll try to do the same for the tweet announcements, even if it&rsquo;s out of style because the jam was weeks ago.  That&rsquo;s how committed I am to making this happen.</p>

<p>If you get the sense that I&rsquo;m trying to psych myself up for this, I am.</p>

<p>The next couple of months will be very busy in my life.  I&rsquo;ll be traveling and attending conferences, activities that have traditionally consumed my precious blogging time like so many Frito pies.</p>

<p>I may be setting the bar high, but if anything the purpose for aiming high is success.  All too often I hear about jams in the middle when everyone is tweeting out cool prototypes and in the thick of design, or I&rsquo;ll hear about a jam when the contest is long over because someone pointed out that the winning entry was amazing.  Through dumb luck and exquisite taste in following <a href="https://twitter.com/mtrc">@mtrc on twitter</a>, I heard about this gamejam with enough lead time to mark it on my calendar.</p>

<p>Even if I don&rsquo;t produce anything interesting or important, by gum, I&rsquo;m going to participate in and cover this gamejam.  I&rsquo;m not going to let another really cool gamejam slip under the radar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play balance for party vs in-depth fighting games]]></title>
    <link href="http://zerosalife.github.io/blog/2014/10/18/play-balance-for-party-vs-in-depth-fighting-games/"/>
    <updated>2014-10-18T10:33:31-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/10/18/play-balance-for-party-vs-in-depth-fighting-games</id>
    <content type="html"><![CDATA[<p>Here I&rsquo;m drawing a comparison between games that are subjectively perceived as party games and games that are more in-depth.  I&rsquo;m avoiding using loaded terms like casual and hardcore, but I think the distinction is likely the same.  Both types of games can be complex, but subtle balancing issues can affect the subjective sense of fun when playing these games.</p>

<p>For discussion I&rsquo;m going to focus on relatively advanced moves in <em><a href="http://www.smashbros.com">Super Smash Bros.</a></em> and <em><a href="http://www.towerfall-game.com/">TowerFall</a></em>: L-canceling and dodge canceling, respectively.  I was inspired to examine this balance issue by a recent tweet by <em>TowerFall</em> creator, and, in the interest of full disclosure, my close personal 3DS friend, <a href="https://twitter.com/MattThorson">@MattThorson</a>.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p>L-cancelling was actually my model of what to avoid with dodge cancelling in TowerFall</p>&mdash; Matt Thorson (@MattThorson) <a href="https://twitter.com/MattThorson/status/519576823533801472">October 7, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>




<!--more-->


<p>Thorson previously pointed out an interesting <a href="https://twitter.com/DamianSommer/status/519537228582633473">discussion</a> on the mechanic of L-canceling by <a href="https://twitter.com/DamianSommer/status/519537228582633473">@DamianSommer</a> among others. Sommer wants to focus on how the L-canceling mechanic reflects the design intent of the creators of <em>Super Smash Bros.</em></p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p>I&#39;m of the opinion that it creates an unnecessary disparity between low and high-skill players because there&#39;s no reason to not L-cancel.</p>&mdash; Demon Summoner (@DamianSommer) <a href="https://twitter.com/DamianSommer/status/519537749754658816">October 7, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p><a href="https://twitter.com/Sonic9jct">@Sonic9jct</a> highlights the dichotomy that I am exploring here.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/DamianSommer">@DamianSommer</a> I always imagined the first 3 Smashes were designed and balanced as party games, especially Brawl, as opposed to fighting&#8230;</p>&mdash; John-Chocula Holmes (@Sonic9jct) <a href="https://twitter.com/Sonic9jct/status/519538190764343296">October 7, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p><a href="http://supersmashbros.wikia.com/wiki/L-canceling">L-canceling</a> requires extremely precise timing of inputs when the character is in a particular state.  You must press L within 6 frames of landing on the ground while performing an <a href="http://supersmashbros.wikia.com/wiki/Aerial_attack">aerial attack</a>.  Since <em>Super Smash Bros.</em> runs at 60 frames per second, this requires you to press the button within 100 milliseconds of hitting the ground.  To put this in perspective, the average human reaction time is about 250 milliseconds.</p>

<p><a href="https://twitter.com/whatisian">@whatisian</a> brilliantly captures the distinction in design that makes this a more difficult, in-depth, technically demanding mechanic.  If there is no drawback, then the execution of the L-cancel is practically mandatory at high levels of play.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/DamianSommer">@DamianSommer</a> if L-Cancelling is never detrimental, then it&#39;s execution is a measure of dexterity, not cleverness.</p>&mdash; ‚ùß Demon Cider (@whatisian) <a href="https://twitter.com/whatisian/status/519555442012217344">October 7, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>Let&rsquo;s look at how this differs from <a href="http://steamcommunity.com/sharedfiles/filedetails/?id%3D250779585">dodge canceling</a> in <em>TowerFall</em> a game that Thorson intentionally designed to be welcoming to new players, while still keeping them competitive with skilled players.</p>

<p>Dodge canceling requires similarly herculean inputs to pull off, to perform a dodge cancel you must press the dodge button a second time after initiating a dodge maneuver.  The dodge lasts 367 milliseconds or 22 frames at 60 fps.  This seems like a lot of time to perform the dodge cancel compared to the scant 6 frames for an L-cancel, but there&rsquo;s a catch.  In order to get the most momentum, to carry the most speed through the dodge cancel, you must perform the move on exactly the right frame.</p>

<p>Sounds pretty tough, right?  If you think this would require some impressive technical skills to pull it off, you&rsquo;re right.  But there&rsquo;s a catch, turning or firing from the dodge cancel reduces the character&rsquo;s speed, making the character an easier target.</p>

<p>Thorson&rsquo;s mechanic provides a similar advantage to L-canceling with the addition of the risk of failure.  Dodge cancels could allow the player to zing around the level at will, firing arrows every which way, but Thorson decided to introduce drawbacks for imprecise play that create risks for more advanced players to put them closer to parity with less skilled players.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/then00b">@then00b</a> I wanted it to provide an advantage, but to also have risk associated with it, and I think it does :)</p>&mdash; Matt Thorson (@MattThorson) <a href="https://twitter.com/MattThorson/status/519634020561203200">October 7, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>These are just my thoughts on this interesting discussion.  I&rsquo;m not a high-level player of either of these games, so I may have missed some of the subtleties to which Thorson or others refer.  If you think I&rsquo;m off the mark, or you just want to weigh in on the merits of designing for &ldquo;party&rdquo; vs. &ldquo;fighting&rdquo; games, drop me a line in the comments or on <a href="https://twitter.com/zerosalife">twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Betting in Super Smash Bros. spectator mode]]></title>
    <link href="http://zerosalife.github.io/blog/2014/10/11/betting-in-super-smash-bros-spectator-mode/"/>
    <updated>2014-10-11T08:51:13-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/10/11/betting-in-super-smash-bros-spectator-mode</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;d like to look at how to bet in the spectator mode of <em>Super Smash Bros. on 3DS</em>.  I&rsquo;m surprised by how much I enjoy /Super Smash Bros.&lsquo;/ spectator mode.  It adds the thrill of a horse race alongside an already great game.</p>

<p>Here are some of the betting strategies I&rsquo;ve found useful:</p>

<ul>
<li>Always bet the full amount</li>
<li>Always bet your earnings</li>
<li>Bet the odds</li>
<li>Don&rsquo;t be afraid to take your money and run</li>
<li>Know the metagame</li>
<li>Know the good players, you may see them again.</li>
<li>Set limits</li>
<li>Trust your judgment</li>
</ul>


<!--more-->


<h2>Always bet the full amount</h2>

<p>Any winnings will offset your losses from betting the full amount.  You stand to multiply your winnings, if you bet your earnings.  And the larger your initial bet, the larger your potential winnings will be at the end of three rounds.</p>

<h2>Always bet your earnings</h2>

<p>Betting your earnings allows you to place a bet that is larger than the normal cap of 100 gold.  Keep in mind that you only stand to lose your initial 100 gold bet from your gold reserve, so this is a pretty good deal.</p>

<p>I tend to play the odds more conservatively when betting my earnings, but I&rsquo;m not sure it&rsquo;s completely necessary.  Again, you only stand to lose 100 from your cash reserves, so there&rsquo;s little risk associated with these bets.</p>

<h2>Bet the odds</h2>

<p>The payout odds shown next to a gold coin above the character portraits are there for a reason.  The odds vary from 2.0 to 10.0, meaning that you will receive 200 to 1000 gold payout for a 100 gold bet.  The favored player, that is to say the player with the lowest payout multiplier, is likely to win a given match, according to the game&rsquo;s algorithm.</p>

<h2>Don&rsquo;t be afraid to take your money and run</h2>

<p>It&rsquo;s a good idea to bet your earnings, but you shouldn&rsquo;t let that persuade you to make a bad bet.  If you&rsquo;re on a winning streak and you come across a match with no obvious good bet, hit <code>B</code> to take your money and run.  You can always bet on a different match.  It&rsquo;s not worth risking all of the winnings from a streak on a relatively even match.  I&rsquo;ve lost a lot of gold this way, not from my reserve gold, mind you, but still a lot of winnings.</p>

<h2>Know the metagame</h2>

<p>The game just came out, so the metagame is likely still forming.  But there is still useful information available.</p>

<p>For example consider Conquest, the in-game periodic match up between characters recording the win-loss record of nearly everyone who plays them.  Character choice may trump the odds of there is a significant influence of the meta game. In other words, some characters are just OP especially relative to specific other characters.  The Conquest match ups are good indicators that certain characters are OP compared to others.</p>

<p>For the record, Duck Hunt seems pretty OP.</p>

<h3>Know the good players, you may see them again</h3>

<p>Pay attention to the names of the players in the matches you bet on.  You may see the same player, and even the same match ups, popping up again and again.  If a player seems to be highly skilled, go with that player on subsequent matches.</p>

<h2>Set limits</h2>

<p>Set a loss floor and a win ceiling.  Take breaks when you reach those limits.  <a href="http://www.ncbi.nlm.nih.gov/pubmed/21915653">Fatigue can affect your judgment</a>.  (Don&rsquo;t worry, I don&rsquo;t have access to the Journal of Gambling Studies either&mdash;the abstract sums up what you need to know).  And anyway, it&rsquo;s good to keep a nestegg so you have a bankroll for your future bets.</p>

<h2>Trust your judgment</h2>

<p>If you have a hunch that goes against the odds that the game presents you go for it.  If you&rsquo;re following the rule of setting limits, your judgment should be fresh and not fatigued, and you will not go too deep into the hole when taking risks.  The only time when I would not advocate risky bets is when continuing bets&mdash;there&rsquo;s too much to lose on a risky bet.  (Yes I know this goes against what I said before.  I&rsquo;m a hypocrite.)</p>

<h2>Conclusion</h2>

<p>These are just my thoughts on betting strategy in <em>Super Smash Bros. for 3DS</em>.  These strategies have worked for me, but of course, your mileage may vary.</p>

<p>I&rsquo;m interested in starting a dialog about these and other strategies because I find the spectator mode deeply compelling.  So if you agree, disagree, or have other strategies that work for you, feel free to contact me either by leaving a comment on the post or hitting me up on twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Do ethics matter in game design?]]></title>
    <link href="http://zerosalife.github.io/blog/2014/10/04/do-ethics-matter-in-game-design/"/>
    <updated>2014-10-04T11:38:33-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/10/04/do-ethics-matter-in-game-design</id>
    <content type="html"><![CDATA[<p>I reached out on twitter in a somewhat misguided appeal to #gamedev, asking whether devs consider ethics when designing games.  Apparently there is so much traffic on #gamedev that any tweet will be lost in a deluge of announcements and automated bot retweets.  Oh well, I thought, I&rsquo;ll go it alone.  Given the <a href="http://bits.blogs.nytimes.com/2014/10/02/intel-pulls-ads-from-site-after-gamergate-boycott/">recent tone in the communities surrounding games</a>, I feel the need to examine this question: <strong>Do ethics matter in game design?</strong></p>

<!--more-->


<p>I&rsquo;m interested in the question of whether game designers should consider the ethical and moral implications of the game, product, or artifact that they are creating.</p>

<p>Full disclosure: I should state here that I&rsquo;m not smart enough of or trained well enough to think about these sorts of things.  So I&rsquo;ve appealed to <a href="http://innovate.ucsb.edu/wp-content/uploads/2010/02/Winner-Do-Artifacts-Have-Politics-1980.pdf">an article by Langdon Winner called <em>Do Artifacts Have Politics?</em></a>, which I will summarize here.</p>

<p>My overall thesis is that the things that game designers create carry intentional messages that should reflect the morals and ethics with which the game designers are comfortable.  In other words, I&rsquo;m arguing that game design should be conducted in an ethical manner.  I don&rsquo;t always think that this should necessarily <strong>restrict</strong> design, but I do think this easily neglected aspect of design matters.</p>

<p>Let&rsquo;s be clear here, art and artifacts that are designed are still art, and I&rsquo;m not advocating for some sort of restriction on artistic ideaspace and expression.  What I am trying to do is increase awareness, without necessarily coming to prescriptive conclusions.</p>

<h2>Do Artifacts Have Politics?</h2>

<p>According to the article &ldquo;there is no idea more provocative than the notion that technical things have political qualities.&rdquo;  The main focus of the article is whether &ldquo;machines, structures, and systems of modern material culture,&rdquo; the <strong>artifacts</strong> in question, should be &ldquo;judged not only for their contributions of efficiency and productivity&hellip;but also for the ways in which they can embody specific forms of power and authority.&rdquo;  Winner deals primarily with the environmental and public health issues from rapid modernization and industrialization in the 20th century, challenging the assumption that development and innovation (especially that of scientific investigation) will drive inexorably toward improved circumstance.</p>

<p>I&rsquo;m not as interested in the focus of the article as I am in the thesis it applies.  I&rsquo;d like to argue, with help from Langdon Winner, that games, objects of art designed by game designers, do embody, and in fact reinforce, specific types of power and authority.  As far as the prescriptive moral obligations I outlined in my earlier thesis statement, we&rsquo;ll have to see about that when we get there.  Offering guidelines may be out of the scope of this blog post.</p>

<p>Before you press the submit button on a hasty naysaying screed, Winner acknowledges, &ldquo;We all know that people have politics, not things.&rdquo;  Although, I would argue that in the age of Citizens United, fewer people would be so quick to judge the contention that constructed objects have politics as mistaken.</p>

<p>Winner highlights an overt case of expressing politics through technological systems in which the master builder of roads in a New York city designed overpasses that were too low to allow public transit buses to pass.  Winner cites evidence from a biography of the designer, indicating that these designs were predicated on &ldquo;social-class bias and racial prejudice.&rdquo;  Here we see an example of a technology that on the surface appears designed, albeit poorly, in a neutral manner.  However, when the underlying motivations are revealed, it becomes clear that the design technological system had an express political purpose and political consequences.</p>

<p>So, it&rsquo;s clear that any technological system can, in Winner&rsquo;s words, &ldquo;be used in ways that enhance the power, authority, and privilege of some over others&rdquo;.  These underlying politics of the system can produce a particular set of consequences without any particular user imposing a set of ideals through the application of the technology.  Winner sums up the need to consider these underlying politics well in the following excerpt:</p>

<blockquote><p>If our moral and political language for evaluating technology includes
only categories having to do with tools and uses, if it does not
include attention to the meaning of the designs and arrangements of
our artifacts, then we will be blinded to much that is intellectually
and practically crucial.</p></blockquote>

<h2>Consequences of design</h2>

<p>When creating a technological thing, Winner identifies two sets of choices that confront the designer with regard to how the technology &ldquo;can affect the relative distribution of power, authority, and privilege in a community&rdquo;.  First is simply do or don&rsquo;t: will you design the thing or won&rsquo;t you?  Second, how will you design specific aspects of the technology?</p>

<p>Winner highlights specific technologies that arguably may have been better for the social fabric had they not been designed.  It&rsquo;s difficult to support Winner&rsquo;s argument here in a general sense, but I see one important lesson for the designer.  Winner talks about criticisms about designers attempting to design politically just systems as idealistic: &ldquo;Whatever claims one may wish to make on behalf of liberty, justice, or equality can be immediately neutralized when confronted with arguments to the effect: &lsquo;Fine, but that&rsquo;s no way to run a railroad&rsquo; (or a steel mill, or airline, or communications system, and so on).&rdquo;  I&rsquo;ll add here, superfluously, that of course this applies to video games as well.</p>

<h2>Own your art</h2>

<p>Like Winner, I hesitate to draw any hard and fast prescriptive conclusions on what should or shouldn&rsquo;t be designed.  There will always be subjective opinion on the political nature of the things that game designers design.</p>

<p>The important thing is for you as the designer of a thing to be aware of the choices, implicit and explicit, that surround your creation.  That sounds kind of <a href="https://www.youtube.com/watch?v%3Dxos2MnVxe-c">Frankenstein-ish</a>, doesn&rsquo;t it?  What I mean is, <strong>own your art</strong>.  Design things that you feel comfortable with.</p>

<p>When the designers of <a href="http://kotaku.com/ubisoft-responds-to-assassins-creed-female-character-co-1589413130">a triple-A game</a> say they can&rsquo;t implement a female 3d model for the main character, they avow a political position in the design of their technological thing.  They should own up to the consequences of that design choice, including all of the ethical and political ramifications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Text encoding: further improvements to using git for Unity projects]]></title>
    <link href="http://zerosalife.github.io/blog/2014/09/27/text-encoding-further-improvements-to-using-git-for-unity-projects/"/>
    <updated>2014-09-27T09:51:41-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/09/27/text-encoding-further-improvements-to-using-git-for-unity-projects</id>
    <content type="html"><![CDATA[<p>Brief note here.  Following a Summer of travel and visitors, posts should be returning to a more regular schedule soon.  It&rsquo;s great when I can post here regularly, but I&rsquo;m not going to get bent out of shape when I have other commitments.  So, if there are unannounced, prolonged absences, you can assume that it has something to do with spending my weekends traveling or socializing, which is undoubtedly a good thing.</p>

<p>I recently came across <a href="http://stackoverflow.com/questions/18225126/how-to-use-git-for-unity3d-source-control">this stackoverflow answer</a> introducing git for version control in Unity projects.  Note, the question specifically refers to Unity3D, but this will work for Unity2D as well.</p>

<p>I&rsquo;ve <a href="http://zerosalife.github.io/blog/2014/05/17/dot-gitignore-for-unity-projects/">already written</a> about setting up a <code>.gitignore</code> file.  Here are some steps you can take to optimize the way Unity stores information, so git can track it.</p>

<p>Git was built to work by <code>diffing</code> large files containing text, specifically code.  Git works just fine with binary files, but it defaults to a less efficient method to <code>diff</code> those files, which can result in bloated git repositories.  Nobody wants a bloated git repository.</p>

<p>Here I&rsquo;ll summarize two of the steps from the answer that I found helpful, using Unity v4.5+.  It&rsquo;s worth noting that these steps will increase the size of your project&mdash;although I&rsquo;m unsure whether they affect the size of any deployed binaries.</p>

<p>So if the size of the project on your development machine is a critical issue, you may want to think about keeping the default settings.  The project I tried the steps on went from 86.7 MB on disk (including its bloated git repository) to 86.9 MB, so it&rsquo;s probably not going to create an appreciable change in most projects.</p>

<h2>Switch to Visible Meta Files</h2>

<p>Switch to <code>Visible Meta Files</code> in the Edit ‚Üí Project Settings ‚Üí Editor ‚Üí Version Control Mode Menu.</p>

<p>If the <code>Visible Meta Files</code> option is turned on, the <code>.meta</code> files associated with parts of your project will have textual information rather than binary.</p>

<h2>Switch to Force Text</h2>

<p>Switch to <code>Force Text</code> in the Edit ‚Üí Project Settings ‚Üí Editor ‚Üí Version Control Menu.</p>

<p>If you choose <code>Force Text</code> this will cause Unity to use text to serialize assets that it would normally store as binary files.</p>

<h2>Save</h2>

<p>Save the Scene and project for these changes to take effect.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating blog deployment with Octopress]]></title>
    <link href="http://zerosalife.github.io/blog/2014/09/06/automating-blog-deployment-with-octopress/"/>
    <updated>2014-09-06T11:27:35-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/09/06/automating-blog-deployment-with-octopress</id>
    <content type="html"><![CDATA[<p>Based on Kevin van Zonneveld&rsquo;s (<a href="https://twitter.com/kvz">@kvz</a>) <a href="http://kvz.io/blog/2012/09/25/blog-with-octopress/">article</a> on setting up Octopress,
I&rsquo;ve adapted a <code>Makefile</code> to make building my blog easier&#x2026; with
<a href="http://www.gnu.org/software/make/">make</a>.  The following <code>Makefile</code> allows me to build and deploy my blog
by typing <code>make blog</code> at the command prompt.</p>

<!--more-->


<pre><code>all: blog

preview:
        bundle exec rake generate &amp;&amp; bundle exec rake preview

blog:
        git pull &amp;&amp; \
        bundle install &amp;&amp; \
        bundle exec rake integrate &amp;&amp; \
        bundle exec rake generate &amp;&amp; \
        bundle exec rake deploy &amp;&amp; \
        git add .; \
        git commit -am "blog update $$(date +%Y-%m-%d)"; \
        git push origin source

.PHONY: blog                   # Force blog to run regardless of the changes to the files.
</code></pre>

<h2>Additional Notes</h2>

<h3>rake build didn&rsquo;t work for me</h3>

<p>I think this is because I haven&rsquo;t written any tasks that use <code>rake
build</code>.</p>

<h3>Remote for the source of my blog</h3>

<p>I push the source code of my blog to a branch named <code>source</code> rather
than <code>master</code>.</p>

<h3>The percent symbol screwed everything up</h3>

<p>Not sure exactly why, but including the <code>%</code> after blog on the line
<code>.PHONY: blog%</code> gave me an error saying <code>make: `blog' is up to date.</code>.
Removing the <code>%</code> allowed me to run <code>make blog</code> as expected.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing a pachinko RPG]]></title>
    <link href="http://zerosalife.github.io/blog/2014/08/23/designing-a-pachinko-rpg/"/>
    <updated>2014-08-23T10:48:48-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/08/23/designing-a-pachinko-rpg</id>
    <content type="html"><![CDATA[<p>What would make a pachinko RPG?  <a href="http://zerosalife.github.io/blog/2014/08/16/one-tap-quest-a-pachinko-rpg/">Last week</a>, I wrote about how I&rsquo;m sort of enamored with <em><a href="http://shimage.net/one-tap-quest/">One Tap Quest&rsquo;s</a></em> tap-and-let-them-go interaction, which I think mirrors the play-style of pachinko.  In pachinko, you have some control over launching the little metal balls, but once they&rsquo;re in play, they&rsquo;re on their own.  This mechanism stands in contrast to pinball, where you interact with a single or multiple pinballs with the paddles, and cue sports (especially bumper pool), where you launch a billiard ball repeatedly with a cue.</p>

<p>As I said last week, I think the basic gameplay in <em>One Tap Quest</em> is interesting enough for a 10-minute session.  But I&rsquo;d like to take this concept and run with it, if you&rsquo;ll let me.  What follows are some concepts that, I think, extend the <em>One Tap Quest</em> pachinko RPG model.</p>

<h2>Player characters</h2>

<p>As I conceive of it, a pachinko RPG is sort of like <em><a href="http://en.wikipedia.org/wiki/The_Wonderful_101">Wonderful 101</a></em>.  A changing stock of characters go up against an overwhelming group of enemies.  Just like pachinko rewards players with more pachinko balls, worth real money, a pachinko RPG would need to reward the player with ever more&mdash;and ever more interesting&mdash;characters to bolster the stock and the player&rsquo;s score.  A given character can gain levels when unleashed on the board, a little more unique than generic pachinko balls.  Perhaps characters added to the stock later in the game come at a higher starting level, sort of like characters recruited in later sections of <em><a href="http://en.wikipedia.org/wiki/Final_Fantasy_Tactics">Final Fantasy Tactics</a></em> or <em><a href="http://en.wikipedia.org/wiki/Ogre_Battle:_The_March_of_the_Black_Queen">Ogre Battle</a></em>.</p>

<h2>Environment</h2>

<p>Procedurally generated &ldquo;boards&rdquo; could make a game interesting.  Presenting a variable layout of enemies, terrain, and power-ups can challenge players who are already familiar with the basic gameplay.  I don&rsquo;t think that using roguelike elements, such as varying the effects of power-ups like potions in <em><a href="http://www.nethack.org/">Nethack</a></em> would work very well.  However, incorporating a quest or narrative adventure framework above the level of boards could be engaging.  Here I&rsquo;m using the word level to refer to a conceptual level of hierarchical relationships, rather than an experience level or a stage in a game.  I&rsquo;m talking about the approach that <em><a href="http://www.ftlgame.com/">FTL</a></em> and the built-in 3DS RPG, <em><a href="http://nintendo.wikia.com/wiki/Find_Mii_%283DS%29">Find Mii</a></em>, take.  Each &ldquo;board&rdquo; is a gameplay experience in itself, and the &ldquo;boards&rdquo; have a larger (in terms of conceptual scope) map that ties them together and gives the player a sense of progression or quest completion.</p>

<p>Obstacles on the &ldquo;boards&rdquo; that impair the movement of either player characters or enemies could add another layer of strategy.  In effect these terrain elements could construct a puzzle that they player has to solve by starting their player character down the correct &ldquo;lane&rdquo;, and being lucky enough to gain the required number of levels to beat the &ldquo;board&rdquo;.</p>

<p>This approach to using obstacles to make puzzles would require some clever level design.  A puzzle where there is a single right way to complete it would be boring, once you find it you simply wait until you get the required number of levels through sheer luck&mdash;pointless repetition without interesting choices.  However puzzles where there are (or seem to be) multiple routes to complete the &ldquo;board&rdquo; can be interesting.</p>

<h2>Interaction</h2>

<p>I think it might be cool to maintain control over the character after you launch.  In a sense you would be an invisible hand, maintaining control over the pachinko ball as it rolls through the machine.  This game would be sort of like an inverted bullet-hell shoot &lsquo;em up.  Rather than dodging enemies, you would guide your character toward them.  It is probably worth iterating on this mechanic, because <em><a href="http://zh.monst.wikia.com/wiki/Monster_Strike_%E7%BB%B4%E5%9F%BA">Monster Strike</a></em> seems to use it with relative success.  But I think maintaining control over the character would block out the cheering-your-character-on-from-the-sidelines aspect that I enjoyed in One Tap Quest, and would like to emulate.</p>

<h2>Enemies</h2>

<p>As I mentioned previously, added depth of enemy behavior and power-ups could prolong the experience.  I&rsquo;m not sure exactly what this would entail at this point, but I think iterating on the basic concepts laid out in <em>One Tap Quest</em> could lead to some interesting variation.  That sentence pretty much sums up my take on what would make an interesting pachinko RPG.  Thanks for letting me spew some thoughts that are little more than design notes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Tap Quest: a pachinko RPG]]></title>
    <link href="http://zerosalife.github.io/blog/2014/08/16/one-tap-quest-a-pachinko-rpg/"/>
    <updated>2014-08-16T10:39:34-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/08/16/one-tap-quest-a-pachinko-rpg</id>
    <content type="html"><![CDATA[<p>I recently played <em><a href="http://shimage.net/one-tap-quest/">One Tap Quest</a></em>, a game in which you tap to place an RPG character who marches upward, gaining levels by bumping into enemies, to tackle bigger and badder foes.  What&rsquo;s interesting to me, if you&rsquo;ll bear with me, is that this is a game that amounts to a pachinko RPG.  I&rsquo;ll start by talking about what I liked about <em>One Tap Quest</em>.  <a href="http://zerosalife.github.io/blog/2014/08/23/designing-a-pachinko-rpg/">Next week</a>, I&rsquo;ll get into what I mean by a pachinko RPG.</p>

<p>It&rsquo;s rare that I come to a new gameplay experience completely naive these days. The only way I feel I can effectively spend my time with a game is typically after having read some sort of guide because my time is extremely limited.</p>

<p>What the <em>One Tap Quest</em> accomplished so well for me was going from barely being able to read the screen to beating the game over the course of 10 minutes.  Admittedly it&rsquo;s a very short and simple game.  But I felt a sense of accomplishment every time my understanding of the mechanics grew.</p>

<p>Oh, these little critters are stronger than these other little critters, better avoid them.  Oh these are power ups, not critters, better aim for them.  With these skills under my belt it only took a little luck to send my character on a march toward victory.</p>

<p>The place where this idea shines is in the power-ups.  I&rsquo;m not sure whether I&rsquo;ve encountered all of them, but they range from simple buffs that grant free levels to expanding your party into a 3-character-wide enemy-wrecking plow.  For what it&rsquo;s worth, the power-ups were deep enough to keep me interested over 10 minutes of gameplay.  If I were going to engage with this experience over a longer term, I would suggest adding more depth to the power-ups and the enemies, which are as far as I can tell simply harder to kill, and possibly bigger, versions of the puny slimes that move back and forth.  Some of the enemies have variations on the simple random walk style movement of the slimes, but a richer variety of movement and behavior from the enemies would increase the required skill to play the game, and add to replayability.</p>

<p>I think the power-up mechanics add a level of depth and strategy to what otherwise would be a hands-off luck-of-the-draw game.  By aiming for power-ups you have a sense of agency in the action, just like turning the knob controls the velocity at which pachinko balls are launched.  It makes cheering for your lemming-like character(s) more enjoyable: if they could just get a little closer and grab the power-up you aimed at&mdash;no.  Nope, they died.</p>

<p>Go give this great little game a try.  Hopefully it will pique your interest like it piqued mine.  Quirky variations on RPGs seem to be part of the <em>Zeitgeist</em>, with <em><a href="http://www.atlus.com/rollers/">Rollers of the Realm</a></em> and <em><a href="http://zh.monst.wikia.com/wiki/Monster_Strike_%E7%BB%B4%E5%9F%BA">Monster Strike</a></em> blending pinball and console genre gameplay with the potential synergy <em><a href="http://en.wikipedia.org/wiki/Sonic_the_Hedgehog_Spinball">Sonic Spinball</a></em> never achieved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persistent Data in Unity]]></title>
    <link href="http://zerosalife.github.io/blog/2014/08/09/persistent-data-in-unity/"/>
    <updated>2014-08-09T11:09:15-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/08/09/persistent-data-in-unity</id>
    <content type="html"><![CDATA[<p>I&rsquo;m interested in having some data remain available, even though I&rsquo;m switching Scenes in Unity.  In other words, I want this data to remain persistent.  As you&rsquo;ll see below I was tempted to use <code>PlayerPrefs</code> to store the data, but, according to <a href="https://www.youtube.com/watch?v%3DJ6FfcJpbPXE">this Unity Live Training on Data Persistence</a>, <code>PlayerPrefs</code> is not the best way to make data persist over multiple Scenes.  <code>PlayerPrefs</code> is an okay place to store non-critical data, like the audio volume, window size, full-screen state&#x2013;you know preferences.  I&rsquo;ll go ahead and show what I believe to be the correct way to store persistent data before talking about <code>PlayerPrefs</code> later.</p>

<!--more-->


<h2>Persistent data</h2>

<p>To safely and reliably store persistent data, the Unity tutorials suggest that you need to assign a &ldquo;kinda&rdquo; Singleton design patterny script to an empty <code>GameObject</code> that will persist across Scenes.</p>

<pre><code>using UnityEngine;
using System.Collections;

public class GameControl: MonoBehaviour {
  public static GameControl control;

  public float health;
  public float experience;

  void Awake() {
    if(control == null){
      DontDestroyOnLoad(gameObject);
      control = this;
    } else if(control != this) {
      // There can be only one!
      Destroy(gameObject);
    }
  }
}
</code></pre>

<p>The <code>static</code> reference means that we can just access the values in the <code>GameControl</code> script.</p>

<h2>How to access data in the GameController.</h2>

<pre><code>GameController.control.health = 100;
</code></pre>

<h2>Writing persistent data to a binary file</h2>

<p>The persistent data that&rsquo;s under the control of the <code>GameController</code> is perfectly happy hanging out when your application is running.  It will persist between Scenes when other data is wiped out by Unity&rsquo;s garbage collection.  But what if you want to maintain persistent data when the application is closed.</p>

<p>Ah hah!  Finally, an answer to my nagging question about writing persistent data to plain text files, like <code>PlayerPrefs</code> or simply a file in a local directory.  Wouldn&rsquo;t a player be able to modify the data?</p>

<p>Enter the binary format:</p>

<pre><code>// Add two more libraries
using System;
using System.Runtime.Serialzation.Formatters.Binary;
</code></pre>

<p>Where do we save it?  The persistent data path: <code>Application.persistentDataPath</code>.  We&rsquo;ll need one more library to do some input and output to files:</p>

<pre><code>// Requires one more library and we're ready to get cooking with some
// methods
using System.IO;

public void Save() {
  BinaryFormatter bf = new BinaryFormatter();
  FileStream file = File.Open(Application.persistentDataPath + "/gameInfo.dat",
                              FileMode.Open);

  PlayerData data = new PlayerData();
  data.experiencePoints = experiencePoints;
  data.playerLevel = playerLevel;

  bf.Serialize(file, data);
  file.Close();
}

public void Load() {
  if(File.Exists(Application.persistentDataPath + "/gameInfo.dat")) {
    BinaryFormatter bf = new BinaryFormatter();
    FileStream file = File.Open(Application.persistentDataPath + "/gameInfo.dat",
                                FileMode.Open);
    PlayerData data = (PlayerData)bf.Deserialize(file);
    file.Close();

    experiencePoints = data.experiencePoints;
    playerLevel = data.playerLevel;
  }
}
</code></pre>

<p>Now we need to make the <code>PlayerData</code> class that we will tag with <code>[Serializable]</code> so Unity will know that we want to write this to a binary file at some point in the future.  This affects how Unity stores the data internally, but it doesn&rsquo;t really change how we interact with it.</p>

<pre><code>[Serializable]
class PlayerData {
  // TODO: see about making gets and sets.
  // TODO: automate the generation of this data structure.  See:
  // http://forums.devx.com/showthread.php?170650-How-to-dynamically-add-property-to

  // Add new variables for loading and saving here.
  public int experiencePoints;
  public int playerLevel;
}
</code></pre>

<p>After writing up this article, I came across an older, possibly better article on Unity Gems.  Please check out that write-up and all of the great content on the site.  <a href="http://unitygems.com/saving-data-1-remember-me/">http://unitygems.com/saving-data-1-remember-me/</a></p>

<p>My full <code>GameController</code> data persistence Singleton script is available in <a href="https://gist.github.com/zerosalife/6f6e811b27761d287ea5">this gist</a>.</p>

<p>So, that&rsquo;s the best solution I&rsquo;ve found to date for having persistent data across scenes and play sessions.  I&rsquo;ve included my rough first stabs at the problem below.  Keep in mind that anything following this point is just included just to make my notes available, and it&rsquo;s not meant to be a guide.</p>

<h2>Old notes: PlayerPrefs</h2>

<p>In order to have persistent data between Scenes, I was previously going to make use of Unity&rsquo;s <code>PlayerPrefs</code>, a class that implements persistent data storage for <code>ints</code>, <code>floats</code>, and <code>strings</code>.  Notably absent are useful data types like <code>Vector3</code> to maintain, for example, <code>transform</code> data between Scenes.  Some of the solutions I found may still be helpful for more storing complex data types in <code>PlayerPrefs</code>.</p>

<p>One potential solution is to simply set a <code>GameObject</code>&rsquo;s <code>transform.position</code> to some constant <code>Vector3</code> value in the freshly loaded Scene.  While this is possible in some applications, I&rsquo;m going to assume that eventually you&rsquo;ll want to transfer some dynamic position information between Scenes.</p>

<p>Here are two potentially helpful sources to achieve this:</p>

<p><a href="http://www.theappguruz.com/tutorial/store-vector3-data-easily-using-json-parsing-possible-using-playerprefs/">http://www.theappguruz.com/tutorial/store-vector3-data-easily-using-json-parsing-possible-using-playerprefs/</a>, based on work by Mehta Dakshil.  While JSON parsing looks interesting, it requires an external <code>.dll</code>, <code>JsonFx.Json.dll</code>.  And I&rsquo;m not interested in external dependencies here.  It may work great for you.</p>

<p><a href="http://wiki.unity3d.com/index.php?title%3DArrayPrefs">&lt;http://wiki.unity3d.com/index.php?title=ArrayPrefs></a>, based on work by Mario Madureiera Fontes and Daniel P. Rossi.  (Note: since <code>GetVector3</code> depends on <code>GetFloatArray</code>, there could be some error due to <code>GetFloatArray</code> casting strings to floats.  But the error introduce in the resulting <code>Vector3</code> is unlikely to be noticeable.)</p>

<p>Actually, see a more updated version here: <a href="http://wiki.unity3d.com/index.php/ArrayPrefs2">http://wiki.unity3d.com/index.php/ArrayPrefs2</a>, which is based on work by Eric Haines.</p>

<p>According to the text, the script should be placed in the <code>Standard Assets</code> directory, so that it can be accessed from both <code>C#</code> and <code>Boo</code> scripts.</p>

<p>To see a faster implementation for mobile devices, where the data to be saved in PlayerPrefs is cached in memory, see: <a href="http://www.previewlabs.com/writing-playerprefs-fast/">http://www.previewlabs.com/writing-playerprefs-fast/</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Static and Dynamic Colliders in Unity]]></title>
    <link href="http://zerosalife.github.io/blog/2014/08/02/static-and-dynamic-colliders-in-unity/"/>
    <updated>2014-08-02T12:54:15-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/08/02/static-and-dynamic-colliders-in-unity</id>
    <content type="html"><![CDATA[<p>According to the <a href="http://www.raywenderlich.com/70344/unity-2d-tutorial-physics-and-screen-sizes">Ray Wenderlich Unity 2D tutorial</a> by <a href="http://www.raywenderlich.com/u/clapollo">Christopher LaPollo</a>, Unity&rsquo;s physics engine builds a simulation based on the <a href="http://docs.unity3d.com/Manual/CollidersOverview.html">Colliders</a> present in a scene.  If some those <code>Colliders</code> are declared to be <code>static</code>, then the entire simulation is rebuilt when those colliders move.  Of course, rebuilding a physics simulation when it&rsquo;s unnecessary is inefficient.  By declaring objects to have <code>dynamic</code> <code>Colliders</code>, the physics engine does not have to rebuild the simulation at runtime, that is to say when the game is running.</p>

<p>As with a lot of things in Unity, it is not immediately apparent how you should go about declaring a collider to be <code>static</code> or <code>dynamic</code>.  It would be great if there were just a checkbox in the <code>Collider</code> component.  But there isn&rsquo;t.  It appears that there are some complex things going on under the hood that preclude a simple declaration.</p>

<p>By default a <code>GameObject</code> with a <code>Collider</code> component attached is treated as <code>static</code> by Unity&rsquo;s physics engine.  This would work for a non-moving wall or impassable bit of scenery, but for moving objects like enemies we need to mark them as <code>dynamic</code>.  In order for a <code>GameObject</code>&rsquo;s <code>Collider</code> to qualify as <code>dynamic</code> it requires a <a href="http://docs.unity3d.com/Manual/class-Rigidbody.html"><code>Rigidbody</code> component</a>.  If you don&rsquo;t want the normal features of the <code>Rigidbody</code>, i.e. conferring control of the <code>GameObject</code>&rsquo;s position to the physics system, then you can check the <code>Is Kinematic</code> checkbox.  A kinematic object&rsquo;s position is under the control of the attached scripts, rather than the physics system.</p>

<p>One other trick from the <a href="http://www.raywenderlich.com/70344/unity-2d-tutorial-physics-and-screen-sizes">tutorial</a> is to set the <code>Collider</code> component&rsquo;s <code>isTrigger</code> property to <code>true</code>.  This prevents the <code>Collider</code> from being treated as a solid object in the physics simulation, which could lead to unintended bumping and pushing among various <code>Colliders</code> in a scene.</p>

<p><strong>Update:</strong> <a href="https://twitter.com/involvingsalmon">@InvolvingSalmon</a> points out that the instructions here depend on the version of Unity that you are using.  This article was written for Unity version <code>4.5.2f1</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Space Is Read]]></title>
    <link href="http://zerosalife.github.io/blog/2014/07/26/space-is-read/"/>
    <updated>2014-07-26T11:08:44-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/07/26/space-is-read</id>
    <content type="html"><![CDATA[<p>The cinematically inspired <a href="http://tdlk.itch.io/space-is-red">Space Is Red</a> is not so much a game as it is a visual novel.  Out of the games I tried from the <a href="http://itch.io/jam/space-cowboy-jam">#spacecowboygamejam</a>, it&rsquo;s one that sticks with me.</p>

<!--more-->


<p>On the spectrum of play, these sorts of games are loosely analogous to Choose Your Own Adventure books.  Just as a Choose Your Own Adventure book expects the player to turn to a given page according to the rules laid out at the bottom of the pages to proceed in a consistent, logical fashion, the tropes of a visual novel require the player to interact with the game in order for the story to proceed.  A novel will proceed with the only &lsquo;player&rsquo; interaction consisting of turning to the next page.  I&rsquo;m oversimplifying the difference between <em>real choices</em>, as I would argue, Choose Your Own Adventure Books allow, and <em>mere interactivity</em>, like turning the page of a novel, but you get what I mean.</p>

<p>Visual novels can have real choices and interactivity.  In this case, I&rsquo;d argue that Space Is Red is only interactive.  There are no real choices, short of figuring out the next bit to tap on in order to move the story along.  For me, it&rsquo;s the music that makes the experience gel as something more than an animated e-book.</p>

<p>I don&rsquo;t mean to be presumptuous in my analysis of Space Is Red&rsquo;s gameplay, don&rsquo;t get me wrong.  I&rsquo;m not interested in arguments about merit simply based on A <strong>is</strong> a game but B <strong>isn&rsquo;t</strong>, so A is better.  I just think it&rsquo;s important to think about these sorts of things when considering the underlying design.</p>

<p>I left the game looping <a href="https://soundcloud.com/postpre">PostPre</a>&rsquo;s driving soundtrack for 15 minutes, even though my first play-through lasted only 2 or 3.  Maybe that&rsquo;s the benefit of interactivity and choices, to extend and prolong the mindshare of some experience or product with the player.  I don&rsquo;t necessarily mean that in a cynical way, although the typical model of play can be subverted for more manipulative means (and, of course, it is!).</p>

<p>For me, Space Is Red hit all the right notes and left me with something to think about.  That is what I call a successful gamejam game.  You can see Space Is Red and the other #spacecowboygamejam entries <a href="http://itch.io/jam/space-cowboy-jam">here</a>.  If you&rsquo;re interested in learning more about Space Is Red&rsquo;s creator <a href="http://toddluke.com/">Todd Luke</a>, you can find an interview <a href="http://www.gamasutra.com/blogs/TalhaKaya/20140711/220825/Finding_Beauty_in_Imperfection_Interview_with_Todd_Luke.php">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Strength of the Pitch: Jodorowsky's Dune]]></title>
    <link href="http://zerosalife.github.io/blog/2014/07/19/the-strength-of-the-pitch-jodorowskys-dune/"/>
    <updated>2014-07-19T10:42:35-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/07/19/the-strength-of-the-pitch-jodorowskys-dune</id>
    <content type="html"><![CDATA[<p>I was fortunate enough to catch a screening of <em><a href="http://jodorowskysdune.com/">Jodorowsky&rsquo;s Dune</a></em>, the documentary about <a href="http://en.wikipedia.org/wiki/Alejandro_Jodorowsky">visionary director Alejandro Jodorowsky&rsquo;s</a> failed attempt to adapt the science fiction novel <em><a href="http://en.wikipedia.org/wiki/Dune_(novel">Dune</a>)</em> to the silver screen.  Having seen a similar <a href="http://www.imdb.com/title/tt0308514/">documentary about Terry Gilliam&rsquo;s attempt at adapting Don Quixote</a>, I consider myself a fan of the genre, despite its niche appeal.</p>

<p>One quick note before we go on.  It looks like <em>Jodorowsky&rsquo;s Dune</em> has hit Netflix on DVD, and seems a likely candidate to be available for streaming.  So you can check it out for yourself to see if you agree with my take.</p>

<!--more-->


<h2>Pitching</h2>

<p>Jodorowsky looks back, with good-natured humor, on a massively overambitious project for its time.  Aside from the amazing concept art and avant-garde stylings, I took away two messages from the documentary that I would like to share.  The first deals with the art of pitching your ideas and the second with locating oneself in close to proximity to the best and the brightest potential collaborators.</p>

<p>Jodorowsky set out to create a huge book&mdash;more of a cinder block.  It&rsquo;s probably what we could call a design bible today, which would be delivered to production companies in order to secure funding.  By creating a book of storyboards and character designs, Jodorowsky wanted to show that the project was large in scope but feasible, because it had been so intricately planned.</p>

<p>Jodorowsky reached out to a variety of concept artists to help with the design of the movie.  To visual and technical artists, Jodorowsky made impassioned pitches, claiming that they would become &ldquo;spiritual warriors&rdquo; for their collective vision, and implored them to come live and work (for little or no pay) in Paris.</p>

<p>What stands out is the strength of Jodorowsky&rsquo;s pitch.  At a time when artists like <a href="http://www.chrisfossart.com/">Chris Foss</a>, <a href="http://en.wikipedia.org/wiki/Jean_Giraud">Moebius</a>, and <a href="http://www.hrgiger.com/">H.R. Giger</a> were each becoming established in their own rights, Jodorowsky was able, through the sheer strength of an imagined story, to convince them to devote years of effort to the project.  That takes a lot of gumption.  It didn&rsquo;t hurt that Jodorowsky had a strong track record of visually and thematically impressive avant-garde cinema.  Even still, Jodorowsky is great at selling the idea, and that is something that game designers must do, to communicate ideas to others in order to capitalize on the individual talents and assemble a great team.</p>

<h2>Placement</h2>

<p>The second message I took away deals with putting yourself into the right place at the right time.  It&rsquo;s also about leveraging that placement to connect and collaborate.</p>

<p>The documentary showed a curious problem of the movie&rsquo;s mid-Seventies inception.  How do you find people to collaborate with, or even people at all, before the Internet?</p>

<p>The solution: go to Paris.  That&rsquo;s where all the intelligentsia congregate.  This was more or less true for several hundred years before the Internet.  If you want <a href="http://en.wikipedia.org/wiki/Salvador_Dal%25C3%25AD">Salvador Dali</a> in your movie, playing the <a href="http://dune.wikia.com/wiki/Padishah_Emperor">Emperor of the Known Universe</a>, go to Paris and you&rsquo;ll probably run into Dali.</p>

<p>Now we all live in our decentralized <a href="http://en.wikipedia.org/wiki/Temporary_Autonomous_Zone">temporary autonomous zones</a>.  But for as much as they can fragment, social media have the ability to connect disparate artists and thinkers.</p>

<p>I think that Twitter is a platform that serves as a modern Paris, for like-minded people to seek each other out and communicate.  Go congregate with the intelligentsia and let your ideas speak for themselves.  Hit me up on the proverbial tweets, and let me hear your ideas and pitches.  I&rsquo;m constantly working on mine&mdash;writing here, trying to refine my skills.  Maybe we are both looking for the talents that we can provide.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playable Call For Papers]]></title>
    <link href="http://zerosalife.github.io/blog/2014/06/21/playable-call-for-papers/"/>
    <updated>2014-06-21T10:20:23-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/06/21/playable-call-for-papers</id>
    <content type="html"><![CDATA[<p><a href="http://www.twitter.com/mtrc">Michael Cook</a> made a &ldquo;needlessly interactive&rdquo; <a href="http://www.exag.org/playablecfp/">playable call for papers</a> for the <a href="http://www.exag.org/">Experimental AI in Games conference</a>, taking place in October in Raleigh, NC.  It&rsquo;s a minimally expressive Twine story, with really one simple interactive experience of role-playing the interaction a recipient feels upon receiving yet another CFP email, <em>click</em>.</p>

<p>It&rsquo;s a tricky thing to get right.  While it makes sense for a game-related conference to have a text adventure announcement, I don&rsquo;t want to have to play a game of Frogger to purchase movie tickets from the automated kiosk at the movie theater.  It would be nice if the playable CFP included prominent and consistent links to exit the game, in order to read the ordinary CFP on the conference website.</p>

<p>I believe the motivating idea is sound.  Turning banal daily routine into a playful interactive experience is a worthy goal for game design.  It has the ability to startle the player into paying more attention to mundane activities, which I think is the intended goal&mdash;for a CFP to stand out from piles of other CFP emails.</p>

<p>Let me know if you&rsquo;ve come across games in strange places.  I don&rsquo;t mean finding a boxed copy of Mario Kart at the flea market&mdash;I mean conceptually strange places.  Hit me up on twitter if you&rsquo;ve got ideas like this to discuss, because I think this approach of creating small play experiences to &ldquo;gamify&rdquo; mundane tasks is an emerging theme of design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you should start simple]]></title>
    <link href="http://zerosalife.github.io/blog/2014/06/07/why-you-should-start-simple/"/>
    <updated>2014-06-07T13:58:34-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/06/07/why-you-should-start-simple</id>
    <content type="html"><![CDATA[<p><a href="http://twitter.com/hobbygamedev">@HobbyGameDev&rsquo;s</a> long-read <a href="http://www.hobbygamedev.com/beg/incremental-learning/">&ldquo;Reasons for Modest First Projects and Incremental Learning&rdquo;</a> tells the tragic tale of overambitious novice developers.</p>

<!--more-->


<p>In a response to a doubting tweeter, HGD advocates starting modestly to slowly build skills, so that you can tackle more complicated projects later on.  Avoiding overambitious projects that are way outside of your comfort zone is one of the stumbling points for novice and hobby game developers, like myself.</p>

<p>In the <a href="http://zerosalife.github.io/blog/2014/05/31/hammock-driven-creativity/">previous post about Hammock Driven Creativity</a>, I highlighted Rich Hickey&rsquo;s suggestion to keep multiple projects going in order to avoid stagnation.  While I agree with this, it&rsquo;s important to judge the scope of those projects with a critical eye.</p>

<p>Far too often, my ideas start, at least in my mind, with ambitious artwork, animation, and multiple complex combinations of mechanics.  I am neither talented nor skilled enough to pull these projects off.  So it&rsquo;s easy to get stuck.</p>

<p>I often find myself implementing some ad-hoc animation system, spending time reinventing the frame-based or skeletal wheel, as it were.  Animation shouldn&rsquo;t take priority, especially considering that my best artwork is derivative and possibly one step above programmer art.  I should focus on creating compelling prototypes, and worry about polish later.</p>

<p>To build your skillset, HGD suggests starting out by remaking historical games.  By implementing tried-and-true mechanics that are necessarily simple in scope given their ancient hardware, you can confront the problems involved in creating a full game rather than a half-finished proof-of-concept.</p>

<p>By half-finished, I&rsquo;m thinking of a time where I completely abandoned a concept because I was hung-up on optimizing a tile-based room system.  Rather than making the actual gameplay fun and complete, I was focusing all of my time figuring out how to make walls.  Walls are nice in a finished game, and you could make the case that they are required constraints to achieve good gameplay, but they are not where the fun is.  As HGD and my previous post point out, you can keep trying to work on these overly ambitious projects, but your productivity will suffer.</p>

<p>Best to reap the rewards that come from continued productivity and, as HGD says, pick a fight you can win.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hammock Driven Creativity]]></title>
    <link href="http://zerosalife.github.io/blog/2014/05/31/hammock-driven-creativity/"/>
    <updated>2014-05-31T11:28:40-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/05/31/hammock-driven-creativity</id>
    <content type="html"><![CDATA[<p>In 2010, <a href="https://twitter.com/richhickey">Rich Hickey</a> spoke at Clojure Conj about <a href="http://www.youtube.com/watch?v%3Df84n5oFoZBc">&lsquo;Hammock Driven Development&rsquo;</a>.  Hickey was talking about the benefit of down-time for noodling about software design.  Specifically, Hickey means using down-time after considerably &lsquo;loading up&rsquo; your mind with aspects of the problem, in order to leverage background offline processes to solve those difficult problems.</p>

<!--more-->


<h2>Wait</h2>

<p>Hickey&rsquo;s advice is to wait for it.  Wait overnight.  Get good rest and make sure that you are sleeping well.  Then you will be able to think about the clearly on the next day.  If you are lucky perhaps you will receive inspiration from a dream and wake up with the problem solved.  This sort of inspiration is what Hickey means by leveraging background processing.</p>

<h2>Multiply</h2>

<p>Hickey mentions working on more than one project.  By having multiple projects, you avoid the problems of creative block, or writer&rsquo;s block.  You can be productive simply by working on another project.  One drawback is that frantically flitting from project to project can lead to problems finishing any single project.  I am often guilty of this.</p>

<p>Eventually, I plan on writing about properly scoping projects to make it possible to get them to a finished state.  One method that works for me is getting something to the point that I can write a blog post about it.  Even if it&rsquo;s not &lsquo;finished&rsquo; finished, I get some satisfaction with putting it out there in a relatively well thought out and complete form.</p>

<p>My solution is to <strong>record, record, record</strong>.  I keep lots of notes, both in more structured form on this blog and in more sketchy form in files on my computer.  I also draw out visual design ideas in a notebook.  Sometimes I will set up skeleton game projects simply to test out an idea.  If I have some sudden insight into a problem, then all of these ideas are available later.</p>

<h2>Switch</h2>

<p>Hickey says to avoid being stuck, switch.  That is why having multiple projects can help.  Hickey also mentions a great suggestion of talking about design hiccups and problems with other people.  Tweet about your design roadblocks.  Write a blog post about them.  Telepathically communicate about them before you go to sleep, so magical dream elves can come and solve them for you.</p>

<h2>Final Thoughts</h2>

<blockquote><p>Summary: There is no summary.  This is a rant.</p></blockquote>

<p>-Rich Hickey</p>

<p>Unless you are Rich Hickey or&#x2013;I dunno&#x2013;Gary Gygax, simply thinking about a problem <em>a priori</em> will not result in a great game.  There is still something to be said for getting your hands dirty and iterating on a design.  However the techniques highlighted in Hickey&rsquo;s talk can be useful when you are stuck on a design problem.</p>

<p>Hit me up in the comments or on the <a href="https://twitter.com/zerosalife">tweet tweet</a> if you have any great Hammock Driven Design tips that I haven&rsquo;t covered here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quarries of Scred Roadmap]]></title>
    <link href="http://zerosalife.github.io/blog/2014/05/24/quarries-of-scred-roadmap/"/>
    <updated>2014-05-24T15:49:08-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/05/24/quarries-of-scred-roadmap</id>
    <content type="html"><![CDATA[<p>The <a href="http://darkestkale.itch.io/quarries-of-scred">Quarries of Scred</a> <a href="https://twitter.com/darkestkale">developer</a> released an image showing the overview of Scred&rsquo;s 14-day game development.  I find it informative for a couple of reasons.  First it&rsquo;s not limited to the core features of the game, Kale&rsquo;s also included public relations and marketing information.  Second, the fact that it&rsquo;s incomplete shows how Kale&rsquo;s prioritized critical elements of the game.</p>

<p>Rather than blatantly stealing the <a href="http://www.indiedb.com/games/quarries-of-scred/images/quarries-of-scred-roadmap-2013-11-28-01">roadmap for Quarries of Scred</a>, I&rsquo;ll give you a few seconds to go and capture an eidetic mental image.  Got it?  Great.  I guess all you cheaters who opened it another tab can follow along too.</p>

<!--more-->


<h2>Core Gameplay</h2>

<p>Looking at the presumably completed &lsquo;green light&rsquo; items, Core Gameplay is almost finished.  And it should be.  Without Core Gameplay, there&rsquo;s not much game to be played.</p>

<p>It looks like they have not included actual aspects of the core mechanic implementation on this roadmap.  However, they&rsquo;re using the roadmap as a method of cataloging oft-overlooked features that add polish to the final game.</p>

<p>They have a milestone for implementing a persistent high score system.  This hurdle is easy to imagine, since we see it in almost every game we play.  But it can be tricky to implement in a robust and efficient manner.</p>

<p>Several elements of UI are included on the roadmap.  They could be neglected in a prototype, these UI elements can make a finished game welcoming for new players and compelling enough to replay.  Info screens can clarify the world for tyros and explicitly show unique challenge states to experienced players.  Death information, like gravestones in Nethack, provides potentially entertaining feedback for the players attempting to hone their skills at the game.</p>

<p>I&rsquo;m not sure whether they finished implementing rocket ship building gameplay in Quarries of Scred, but this should be a goal for every game.</p>

<h2>PR</h2>

<p>Marketing is an aspect of game development that is easy to overlook as an inexperienced indie or hobby gamedev with a few gamejams under your belt.  The pressure to simply finish a game, any shippable game, overshadows what to do with it once it&rsquo;s released.</p>

<p>Setting up an IndieDB page to track the progress is a great idea.  And, since it doesn&rsquo;t necessarily require a finished product, it can be done early on in the development process.  The priorities of creating an IndieDB Icon, Header Image, and Preview Image show Kale&rsquo;s clearly interested in branding Scred as a marketable indie title.</p>

<p>I can confirm that a <a href="https://www.youtube.com/watch?v%3DBrZ_POiKJO4">Trailer</a>, <a href="http://darkestkale.itch.io/quarries-of-scred">Website</a>, and <a href="http://img.itch.io/aW1hZ2UvODc0LzQ0MTIucG5n/original/Npan5L.png">Box Art</a> came along in due time.  The inclusion of Box Art in a download only indie title is particularly charming, even in an atmosphere awash with these things, the art for Scred&rsquo;s box is fun and quaint, in a good way.</p>

<h2>Further Content</h2>

<p>Further Content looks like features that would directly build on those already implemented in the game.  Rather than being classified as Fluff, these extra features would complement the content and features already implemented in the game.</p>

<p>It&rsquo;s important to have the courage to &lsquo;kill your darlings&rsquo; in cases like this.  Some of the items under Fluff like pretty important to making a good game, but if they are too demanding to fit in the schedule allotted to create the game, they have to go.</p>

<p>One of the buildings has made it in.  And I think the second building is in the final game. Not sure whether the Rare Flower survived.</p>

<h2>Bookending</h2>

<p>The Bookending category looks like a lot of the UI improvements I talked about above.  They certainly improve players&#8217; experience, but they may not be absolutely necessary to get the game out the door.</p>

<p>I can only speculate that configurable keys are highlighted in gray because it would be silly not to include them.  For that matter, everything except troubleshooting info adds delicious spice to the well-seasoned dish that the Core Gameplay milestones create.</p>

<h2>Fluff</h2>

<p>It looks like the Fluff category represents additional features that aren&rsquo;t required to make a working game.  The ability to select a seed is probably a new system that requires designing and implementing, much like the UI stuff in the Bookending category.  New Sprites and Death Animation are probably a similar story.</p>

<p>You may argue that music and sound are critical for a completed game.  But if you are not a musically inclined person, the shear amount of work required to get something that sounds like the death-throes of a thousand Gameboys (note: this is not a good thing) could double your production time.  The New Sprites mentioned in the previous paragraph are probably a similar case of requiring too much time that could be more productively devoted elsewhere in the project.</p>

<h2>Closing Thoughts</h2>

<p>This kind of frank openness about game design is unusual to get prior to the publication of a game.  It&rsquo;s really great to see the design documents behind a game, even if it comes out years after release.  It&rsquo;s especially informative to see an in-progress version where the developer is unafraid to lay the goals out there, to show where the project succeeds and possibly falls short.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.gitignore for Unity projects]]></title>
    <link href="http://zerosalife.github.io/blog/2014/05/17/dot-gitignore-for-unity-projects/"/>
    <updated>2014-05-17T11:48:06-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/05/17/dot-gitignore-for-unity-projects</id>
    <content type="html"><![CDATA[<p>I found a solution on the <a href="http://answers.unity3d.com/questions/369755/unity-on-github.html">Unity website</a> that pointed me toward <a href="http://t-machine.org/index.php/2012/07/03/unity-git-source-control-a-basic-gitignore/">this blogpost</a>.  But a better solution is out there.  The Double Fine Game Club&rsquo;s Bad Golf Community Edition <a href="https://github.com/Double-Fine-Game-Club/bad-golf-community-edition/blob/master/.gitignore">.gitignore</a> looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>Ll<span class="o">]</span>ibrary/
</span><span class='line'><span class="o">[</span>Tt<span class="o">]</span>emp/
</span><span class='line'><span class="o">[</span>Oo<span class="o">]</span>bj/
</span><span class='line'>build_Data/
</span><span class='line'>
</span><span class='line'><span class="c"># Autogenerated VS/MD solution and project files</span>
</span><span class='line'>*.csproj
</span><span class='line'>*.unityproj
</span><span class='line'>*.sln
</span><span class='line'>*.exe
</span><span class='line'>*.userprefs
</span><span class='line'>
</span><span class='line'><span class="c"># OS generated files #</span>
</span><span class='line'><span class="c">######################</span>
</span><span class='line'>.DS_Store
</span><span class='line'>.DS_Store?
</span><span class='line'>._*
</span><span class='line'>.<span class="o">[</span>Ss<span class="o">]</span>potlight-V100
</span><span class='line'>.<span class="o">[</span>Tt<span class="o">]</span>rashes
</span><span class='line'><span class="o">[</span>Ee<span class="o">]</span>hthumbs.db
</span><span class='line'><span class="o">[</span>Tt<span class="o">]</span>humbs.db
</span><span class='line'>*~
</span><span class='line'>*#*
</span></code></pre></td></tr></table></div></figure>


<p>This is the <code>.gitignore</code> I&rsquo;m currently using in my projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Follow-up to the centrality of caves]]></title>
    <link href="http://zerosalife.github.io/blog/2014/05/10/follow-up-to-the-centrality-of-caves/"/>
    <updated>2014-05-10T10:27:49-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/05/10/follow-up-to-the-centrality-of-caves</id>
    <content type="html"><![CDATA[<p>My <a href="http://zerosalife.github.io/blog/2014/05/03/why-are-caves-central-to-so-many-games/">post last week</a> about caves struck a nerve.  I received a lot of encouraging retweets and favorites.  I also received some great feedback.</p>

<p>Paul Diaz points out one design constraint granted by caves that I hadn&rsquo;t considered.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/psysal">@psysal</a> <a href="https://twitter.com/ZerosALife">@ZerosALife</a> very nice. One that supports linearity and design is cave&#39;s are dark. Helps direct attention w/ lighting/effects.</p>&mdash; Paul Diaz (@SleepyTearyEyed) <a href="https://twitter.com/SleepyTearyEyed/statuses/462624220447391744">May 3, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>I think Paul is right, that this falls within the scope of caves&#8217; linearity.  I&rsquo;ve been thinking a bit about a possible taxonomy of cave environments in games, but for the purposes of these posts I&rsquo;ll keep it more general.  A cave is a cave, right?  <a href="http://en.wikipedia.org/wiki/I_know_it_when_I_see_it">We know it when we see it.</a></p>

<p>Any old screen in a game can be cave-like in the way its environmental design constraints fit into the game world.  Here I&rsquo;m using &lsquo;screen&rsquo; to refer to a room in a metroid-like game or a level in other sorts of games&#x2013;some arbitrary atomic unit of division of the game environment constituting a discrete area.</p>

<p>For the purpose of argument, Paul&rsquo;s point forces us to think of the most cave-y of caves, which I think was the intent behind the original question in the first place.  Because caves are dark environments, dank environments, <em>interior</em> environments, they lack the uniform lighting that typically characterizes the exterior &lsquo;overworld&rsquo; in games.  As Paul states, lighting cues can serve as guideposts for the player, directing attention toward the critical path.</p>

<p>I view this example as a manifestation of the fundamental reduction in degrees of freedom of play achieved by the interiority, and thus, linearity of caves.  The fact that there are more walls, and therefore fewer possible places for the player to go, allows for the designer, using careful construction, to communicate intent to the player through the environment itself.  I don&rsquo;t mean to say here that such communication is impossible outside of caves, just that caves are one simple and straightforward way to achieve this constrained, communicative sort of design.  This vocabulary of design showed up early on in the history of games, it worked, and it has persisted.</p>

<p>Thanks and shout outs to <a href="https://twitter.com/sleepytearyeyed">Paul Diaz</a>, whose feedback inspired this follow-up post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why are caves central to so many games?]]></title>
    <link href="http://zerosalife.github.io/blog/2014/05/03/why-are-caves-central-to-so-many-games/"/>
    <updated>2014-05-03T09:46:11-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/05/03/why-are-caves-central-to-so-many-games</id>
    <content type="html"><![CDATA[<p>On twitter, <a href="https://twitter.com/psysal">@psysal</a> posed this question to the game dev community:</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p>Can someone very smart in game design share insight as to why caves are so central to so many games?</p>&mdash; Calvin French (@psysal) <a href="https://twitter.com/psysal/statuses/456314611428372480">April 16, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>You can see all the responses by following the link to the original tweet.</p>

<p>The consensus is that caves are essential features for games for three reasons.</p>

<ol>
<li>Linearity</li>
<li>Repeatability of composition</li>
<li>Curiosity</li>
</ol>


<!--more-->


<h2>Caves are linear</h2>

<p>In terms of their schematic representation in the design of a game, caves can boil down to one enclosed &lsquo;area&rsquo; or room with a single entrance.  This doesn&rsquo;t account for some of the amazing environments in intricately designed games like <a href="http://en.wikipedia.org/wiki/Super_Metroid">Super Metroid</a>, recently broken down by <a href="https://twitter.com/gamespite">@gamespite</a> in <a href="http://www.anatomyofgames.com/2013/12/08/the-anatomy-of-super-metroid-01-moving-pictures/">the Anatomy of Games series</a>.</p>

<p>But, at the most basic level, a cave must have a mouth, or an entrance, and at least one room.  This simplifies the representation of the critical path of play, because once the cave has been fully explored there are no possible branches that the player could have taken to leave the cave.  The single entrance is also a single exit.  Even if there are many internal rooms, this representation holds true, as long as there are ultimately no &lsquo;back doors&rsquo; out of the cave.</p>

<p>The designer can rely on the fact that once the player has received any rewards for exploring the cave, the player can reasonably be expected to pop out of the entrance of the cave looking for the next available challenge surmountable with any freshly acquired toys.</p>

<h2>Caves offer repeatable composition</h2>

<p>For whatever atavistic significance they hold in our psyches, caves do not have to rely on realistic representations in game design.  Any old hole in some rock will almost invariably create a believable sense of cave-ness.  Yeah, I said cave-ness. You know cave-ocity, general cave-itude.</p>

<p>Since we don&rsquo;t spend much time in caves, day-to-day, we don&rsquo;t hold them to the same level of fidelity to which we would hold, say, buildings or automobiles.  The same architectural details necessary to represent a house in a video game can be painted in broad strokes to represent a cave.</p>

<p>In tile-based games, this means that a designer can reuse tiles over and over again to craft a general shape without worrying too much about players noticing, or being bothered by, the similarities.  Caves are thus more defined by the space created rather than the graphics used to define them.  This sense of space is what drives the third essential feature of caves in game design, a sense of curiosity, the drive to explore.</p>

<h2>Caves are inherently curious</h2>

<p>I&rsquo;m not sure I buy the argument that we have some evolutionary instinct that drives us to explore caves, but the fact remains.  Something about caves begs exploration.</p>

<p>Call it the <em>Will to Spelunk</em>.</p>

<p>Once a space has been created, the player wants to explore every nook and cranny for collectible power ups or items.  Certainly the rewards are powerful motivators.  But there is something to the exploration for exploration&rsquo;s sake.  Simply completing one&rsquo;s mental map of the space becomes a goal in itself.</p>

<h2>Coda</h2>

<p>It&rsquo;s intriguing that caves are such a fixture in the established vocabulary of game design.  The three features highlighted in this post make it clear that caves remain a useful game design pattern because they serve an essential purpose in the ludic lexicon of games.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Rhizome Labeled Edge Tutorial]]></title>
    <link href="http://zerosalife.github.io/blog/2014/04/26/clojure-rhizome-labeled-edge-tutorial/"/>
    <updated>2014-04-26T09:47:18-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/04/26/clojure-rhizome-labeled-edge-tutorial</id>
    <content type="html"><![CDATA[<p>I&rsquo;m using the <a href="https://github.com/ztellman/rhizome">Rhizome package</a> for Clojure to rapidly prototype the dependency graph for a crafting system.  It&rsquo;s nice to be able to add and remove components while generating visualizations on-the-fly.  Clojure&rsquo;s simple, composable syntax, aided by <a href="https://www.youtube.com/watch?v=D6h5dFyyUX0">paredit</a>, makes shuffling around key-value pairs, and even whole dictionaries, quick and easy.</p>

<p>The existing Rhizome documentation shows simple examples for labeling the nodes of a directed graph.  In order to show the relationship between nodes on the graph, I&rsquo;d like to also label the edges, or the arrows connecting the nodes.</p>

<p>Rhizome provides a keyword argument <code>:edge-&gt;descriptor</code> to most of its functions.  Consulting the source code and the tests for the Rhizome package, I learned that the functions expect <code>:edge-&gt;descriptor</code> to be a function accepting two arguments for each edge: <code>src</code>, the source node, and <code>dst</code>, the destination node.  In order to label the edges, the anonymous function I&rsquo;m binding to <code>:edge-&gt;descriptor</code> will return a dictionary containing the key <code>:label</code> and the value for the edge&rsquo;s label.</p>

<p>Here&rsquo;s an example using the simple graph from the Rhizome documentation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;rhizome.viz</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">g</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:a</span> <span class="p">[</span><span class="ss">:b</span> <span class="ss">:c</span><span class="p">]</span>
</span><span class='line'>     <span class="ss">:b</span> <span class="p">[</span><span class="ss">:c</span><span class="p">]</span>
</span><span class='line'>     <span class="ss">:c</span> <span class="p">[</span><span class="ss">:a</span><span class="p">]})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">view-graph</span> <span class="p">(</span><span class="nb">keys </span><span class="nv">g</span><span class="p">)</span> <span class="nv">g</span>
</span><span class='line'>            <span class="ss">:node-&gt;descriptor</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">n</span><span class="p">]</span> <span class="p">{</span><span class="ss">:label</span> <span class="nv">n</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://zerosalife.github.io/images/assets/graph-unlabeled-edges.png"></p>

<p>Now, I&rsquo;ll use a dictionary of dictionaries to associate the source and destination nodes with a label for each edge.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">g-edges</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:a</span> <span class="p">{</span><span class="ss">:b</span> <span class="ss">:makes</span>
</span><span class='line'>       <span class="ss">:c</span> <span class="ss">:takes</span><span class="p">}</span>
</span><span class='line'>   <span class="ss">:b</span> <span class="p">{</span><span class="ss">:c</span> <span class="ss">:takes</span><span class="p">}</span>
</span><span class='line'>   <span class="ss">:c</span> <span class="p">{</span><span class="ss">:a</span> <span class="ss">:makes</span><span class="p">}})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">view-graph</span> <span class="p">(</span><span class="nb">keys </span><span class="nv">g</span><span class="p">)</span> <span class="nv">g</span>
</span><span class='line'>            <span class="ss">:node-&gt;descriptor</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">n</span><span class="p">]</span> <span class="p">{</span><span class="ss">:label</span> <span class="nv">n</span><span class="p">})</span>
</span><span class='line'>            <span class="ss">:edge-&gt;descriptor</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">src</span> <span class="nv">dst</span><span class="p">]</span> <span class="p">{</span><span class="ss">:label</span> <span class="p">(</span><span class="nf">dst</span> <span class="p">(</span><span class="nf">src</span> <span class="nv">g-edges</span><span class="p">))}))</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://zerosalife.github.io/images/assets/graph-labeled-edges.png"></p>

<p>I&rsquo;ve submitted a <a href="https://github.com/ztellman/rhizome/pull/8">pull request</a> to Rhizome to add this example to the documentation.</p>
]]></content>
  </entry>
  
</feed>
