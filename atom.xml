<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[zero's a life]]></title>
  <link href="http://zerosalife.github.io/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2016-07-02T09:58:09-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I am Setsuna uses a State Stack: Map and Dialog]]></title>
    <link href="http://zerosalife.github.io/blog/2016/07/02/how-i-am-setsuna-uses-a-state-stack-map-and-dialog/"/>
    <updated>2016-07-02T09:48:42-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/07/02/how-i-am-setsuna-uses-a-state-stack-map-and-dialog</id>
    <content type="html"><![CDATA[<p>I recently watched <a href="https://www.youtube.com/watch?v%3DGUwmNnMXd4A">some footage of <em>I Am Setsuna</em> from E3</a>.</p>

<p>Here&rsquo;s my analysis of the evolving <a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)">state stack</a>, as you play this spritual successor to the classic RPG <a href="https://en.wikipedia.org/wiki/Chrono_Trigger"><em>Chrono Trigger</em></a>.</p>

<!--more-->


<h2>Map and Dialog</h2>

<p>There&rsquo;s likely a catch-all map state in which characters can run around, interacting with the world by opening chests, entering doors and new areas, and talking to NPCs.</p>

<p>The gameplay starts in a snowy forest.  So, there&rsquo;s a <code>Map</code> state pushed onto the state stack that has a reference to the map for this snowy forest.</p>

<pre><code>| Map |
</code></pre>

<p>As the player wanders around the forest, the player encounters talking NPCs.  These NPCs likely have triggers that push a <code>Dialog</code> state with a reference to the NPC&rsquo;s dialog onto the stack.</p>

<pre><code>| Dialog ←PUSH |
| Map          |
</code></pre>

<p>As the player advances and completes the dialog, the player is returned to the previous state, the snowy forest <code>Map</code>.</p>

<pre><code>| Dialog →POP |

| Map |
</code></pre>

<p>The gameplay is controlled by the current state at the top of the state stack.  This provides a more convenient way to track the appropriate controls and UI elements than to sprinkle a bunch of complicated conditionals throughout some monolithic game code.</p>

<p>Next time I&rsquo;ll talk about combat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[/r/proceduralgeneration's spaceship challenge]]></title>
    <link href="http://zerosalife.github.io/blog/2016/06/25/slash-r-slash-proceduralgenerations-spaceship-challenge/"/>
    <updated>2016-06-25T09:53:41-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/06/25/slash-r-slash-proceduralgenerations-spaceship-challenge</id>
    <content type="html"><![CDATA[<p>The June contest on <a href="https://www.reddit.com/r/proceduralgeneration/">/r/proceduralgeneration</a> is to create a <a href="https://www.reddit.com/r/proceduralgeneration/comments/4mn9gj/monthly_challenge_7_june_2016_procedural/">ProceduralSpaceship/Fleet generator</a>.</p>

<p>Here&rsquo;s a look at some of the entries, so far.</p>

<!--more-->


<h2>a1studmuffin</h2>

<p><a href="https://github.com/a1studmuffin/SpaceshipGenerator">a1studmuffin&rsquo;s</a> entry is a Python script that interfaces with Blender to create 3d spaceships.  I&rsquo;m digging the choices with textures.  I also appreciate that a1studmuffin has commented to describe the phenotype of some of the parameters.  I feel like this code would be good for a future deep dive explaining it.</p>

<h2>Ladus</h2>

<p><a href="http://i.imgur.com/rgs0b5y.png">Ladus&#8217;</a> entry is only shown in a screenshot and a WIP video available on the reddit thread.  The 3d ships rendered in Unreal engine look good.  More of a stylized look in contrast to a1studmuffin&rsquo;s gritty ships.</p>

<h2>NoDownvotesPlease</h2>

<p><a href="http://i.imgur.com/MrjkVU3.gif">NoDownvotesPlease&rsquo;s</a> entry gets bonus points for creating a galaxy for 2d spaceships to explore.</p>

<h2>Hans_Meiser_Koeln</h2>

<p><a href="http://i.imgur.com/XcCBnoh.png">Hans_Meiser_Koeln&rsquo;s</a> entry has some good looking 2d ships.</p>

<h2>green_meklar</h2>

<p><a href="http://imgur.com/a/OZqSv">green_meklar&rsquo;s</a> entry has some nicely <a href="https://en.wikipedia.org/wiki/Greeble">greebled</a> 2d ships made in JavaScript/HTML5.  I&rsquo;d be interested in seeing the code.</p>

<h2>Conclusion</h2>

<p>I&rsquo;m excited to revisit a1studmuffin&rsquo;s code after the contest ends.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Frame Football Association]]></title>
    <link href="http://zerosalife.github.io/blog/2016/06/18/mobile-frame-football-association/"/>
    <updated>2016-06-18T11:35:49-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/06/18/mobile-frame-football-association</id>
    <content type="html"><![CDATA[<h2>Inspiration</h2>

<p>I asked myself the question, in a universe where mecha are used for primarily for military-industrial applications, how did the technology
get to that point?</p>

<p>Sure, some routes for technical advancement are funded purely by governments, but think of the racing sport&rsquo;s influence on the
automobile industry.</p>

<p>So I asked the question, what if mecha became a dominant technology because of sports applications?</p>

<p>In which kind of sports could mecha thrive?  There have previously been pugilistic representations of robots, but I deemed these as too
costly and too on the nose for the future military application.</p>

<p>Likewise, pure racing, while plausible, seemed to be ground that had
already been explored.</p>

<p>I settled on the possibility that the military-industrial applications mecha technology and piloting ability of the Mobile Frame Zero universe grew out of a pursuit of the world&rsquo;s (universe&rsquo;s?) most popular sport, (Association) Football a.k.a. Soccer.</p>

<p>Thus, the Mobile Frame Football Association, a rules mod for <a href="https://twitter.com/JoshuaACNewman">Joshua AC Newman&rsquo;s</a> <a href="http://mobileframezero.com/mfz/">Mobile Frame Zero</a>, was born.</p>

<!--more-->


<h2>Football games</h2>

<h3>Duration of play</h3>

<p>Mobile Frame Football Association (MFFA) sanctioned games last 6 turns, consisting of two equal 3-turn halves.  MFFA rules do not allow for the countdown mechanic from the vanilla Mobile Frame Zero (MF0) rules.</p>

<h3>Objective</h3>

<p>When time expires, the player with the highest number of goals scored wins.</p>

<h3>Teams</h3>

<p>Games are played between teams consisting of equal numbers of frames.  Frames may have up to 4 systems installed, with the usual vanilla MF0 benefits for fewer than 4 installed systems (see, e.g., MF0 p. 64).  For more explanation see <em>Dice Systems</em>.</p>

<h3>Field of Play</h3>

<p>The game field should be approximately the size of a normal MF0 table, with goals the size of 1 <em>movement scale</em> on each end of the field.  Lines should be laid out to clearly mark the in bounds/out of bounds boundary.  There should be at least 1&#8221; of space on the sidelines, to allow for units to be positioned outside of the field during out of bounds situations.</p>

<p>The size of your available Field of Play can dictate the Movement and Shooting Scales for your game.  The suggested defaults are based on a normal MF0 table, your mileage may vary.</p>

<h2>Deployment</h2>

<p>During the deployment phase, you may place your units anywhere on the field in a legal formation.  Cool your servos, I&rsquo;ll describe the legal formations in just a sec.</p>

<h3>Beginning of play</h3>

<p>At the beginning of the game, at the beginning of the second half, or at a kickoff following a goal, players take turns placing units in bounds, in the half of the field that has been assigned (See: Determining possession).  The player in possession of the ball, the <em>offensive player</em>, goes first.  The ball, represented by a d12, is placed at the center of the field. The offensive player must place a unit next to the ball, this unit is in possession of the ball.</p>

<ol>
<li><p>Maintaining possession of the ball</p>

<p>A unit possesses the ball if the ball is in contact with its base (i.e. its legs).  If two opposing units are in contact with the ball the unit in possession of the ball first maintains possession unless the opposing unit steals or tackles.  Similarly if two units on the same side are in contact with the ball, the unit in possession of the ball first maintains possession unless it passes successfully to the second unit.</p></li>
<li><p>Determining possession at kickoff</p>

<p>A coin flip determines possession at the beginning of the game, with the winning player electing to be on offense or defense first.  The losing player gets to determine the side of the field in which to deploy.</p>

<p>At the half, the possession and sides switch.  Following a scored goal, the player who was scored on gains possession of the ball at the kickoff.</p></li>
</ol>


<h3>After a dead ball situation</h3>

<p>Play is stopped due to a foul, an out of bounds ball. This is called a <em>dead ball</em> situation.</p>

<ol>
<li><p>Out of bounds</p>

<p>Out of bounds balls force a turnover of possession. The ball is placed on the sideline where it went out of bounds.</p>

<p>Both players may redeploy their units, however the offensive player may not place a unit beyond the defensive unit closest to the goal.  The defensive player places first, and must move the unit closest to the goal first, if it will be moved in the redeployment.  Players alternate placing units.  The offensive player must place a unit next to the ball.</p>

<p>After the offensive player redeploys the last unit, play resumes with the unit next to the ball immediately taking its turn, regardless of its initiative roll.  If the unit next to the ball has an initiative die, remove it.</p>

<ol>
<li><p>Corner Kicks and Goal Kicks</p>

<p>Corner kicks occur when a defending unit kicks the ball out of bounds on the sideline running on its own &lsquo;goal&rsquo; side of the field.  The ball is placed on the corner sideline on the side it went out of bounds.</p>

<p>Goal kicks occur when an offensive unit kicks the ball out of bounds on the sideline of the defensive units&#8217; &lsquo;goal&rsquo; side of the field.  The ball is placed in front of the goal.</p></li>
</ol>
</li>
<li><p>Fouls</p>

<p>Fouls do not force a turnover of possession.  Redeployment following a foul occurs the same as in the Out of bounds situation.</p></li>
<li><p>Redeployment and units that have already taken turns</p>

<p>Redeployment does not normally reset whether a unit has taken its turn.  If the unit placed next to the ball in a dead ball situation has already taken its turn, it gets a free turn taken immediately following deployment, when play resumes.</p></li>
</ol>


<h2>Initiative</h2>

<p>For the time being, MFFA uses the older per-unit turn order from MF0 (p. 136).  Enough with the hutching bellyaching, you yabbies.</p>

<p>Players roll 1d10 for each unit, placing the die next to the unit.  Initiative starts at 1 and counts up.  When you reach a unit&rsquo;s initiative roll in the count, remove the initiative die next to the unit, that unit takes its turn.</p>

<p>If two units have the same roll, when their number is reached, reroll the initiative dice. Lowest roll goes first with the next highest reroll going immediately after.  Once all of the rerolled ties have been resolved, the initiative count continues as normal.</p>

<p>In a dead ball situation, the initiative count does not reset.</p>

<h3>Coaching</h3>

<p>Coaching adds a layer of complexity to initiative determination.  It may slow down the game a bit, but it allows for extra tactical decisions.</p>

<p>Coaching allows players to take control of the assignment of initiative to each of their units.  Both players roll a number of initiative dice equal to their units, then take turns assigning to initiative dice to their units. The defensive player chooses first.  After initiatives are assigned, the initiative count starts and counts up as normal.</p>

<h2>Dice systems</h2>

<p>As in MF0, frames have 2 white dice representing the frame chassis plus other dice representing up to 4 additional systems.  Frames get the usual vanilla MF0 benefits for having fewer than 4 installed systems (see, e.g., MF0 p. 64).</p>

<h3>Red dice</h3>

<p>Red dice represent the ability of a frame to shoot or pass the ball on offense.  Unlike the vanilla MF0 rules, there are two legal ranges for red dice on offense: direct and artillery.  Systems granting hand to hand dice are not rolled on offense.</p>

<p>When shooting, you must score a successful hit on the goal using the difficulty table from MF0 to score a goal.  When passing you must score a successful hit on your ally to successfully pass the ball. You must declare the range you will be targeting at the beginning of your turn.</p>

<p>On defense, red dice represent steals (hand to hand range) and slide tackles (direct range).  Systems granting artillery dice are not rolled on defense.</p>

<p>Red dice use a special scale that is different from the movement scale.  See Movement Scale and Shooting Scale</p>

<ol>
<li><p>Passing and shooting</p>

<p>When in range for a shot or a pass, the player must roll a number of <em>hit dice</em> equal to the <em>shot value</em> minus the blue <em>defense value</em> of any units in the line of fire.  Any units in the line of the pass or shot act as cover, using the normal MF0 cover rules.  If there is doubt, consult the MF0 cover rules to determine if a unit is in the line of fire.</p>

<p>If the rolled hit dice successfully <em>score a hit</em>, then the ball goes where the offensive player wants, into the goal or into the possession of another unit.  Use Damage chart 2 from the MF0 rules (Hit target on a 5 or 6) if there is no other unit between the shooter and the target.  Use Damage chart 4 if there is a unit between the shooter and the target. (Hit target on a 6)</p>

<p>Failure to score a hit is called a <em>fumble</em>, and causes the ball to go wide somewhere in the range of the shot at the opposing player&rsquo;s discretion (be reasonable here, it&rsquo;s not going to <em>fly backwards</em>).  This may cause the ball to go out of bounds, into the possession of a unit, into the goal, or into the field of play.</p></li>
<li><p>Stealing and slide tackling</p>

<p>When stealing or slide tackling, <em>scoring a hit</em> results in the ball coming into the stealing or tackling unit&rsquo;s possession.  The stealing or tackling unit&rsquo;s player rolls a number of <em>hit dice</em> equal to its red <em>shot value</em> for the steal or tackle attack minus the blue <em>defense value</em> of the unit in possession of the ball.</p>

<p>Always use Damage chart 2 for stealing and slide tackling. On a roll of 5 or 6, the steal or slide tackle scores a hit.  Possible rule: the player who slide tackles to steal the ball may choose to destroy a system on the opposing player&rsquo;s unit.</p>

<p>Failure to score a hit is a <em>fumble</em>.  Nothing special happens, unless the player rolls a 1 on one of the hit dice.</p>

<p>Rolling a 1 on a hit die during a fumble results in a foul.  See <em>Fouls</em>.</p></li>
</ol>


<h3>Blue Dice</h3>

<p>Blue dice systems remain the same as blue dice systems in the normal MF0 rules.  However, rather than representing armor, they represent the ability of a unit to gain or maintain control of the ball.</p>

<h3>Yellow Dice and Green Dice</h3>

<p>Yellow and green dice systems remain the same as vanilla MF0.</p>

<h3>Hot rodding</h3>

<p>A player may choose to hotrod a unit&rsquo;s system by sacrificing a system to gain a free action with one of the other systems after the unit has taken its turn.</p>

<h2>Taking a turn</h2>

<p>Taking a turn begins with target declaration.  For the defensive units this will generally be the unit in possession of the ball.  For the offensive unit in possession of the ball, this could be targeting a fellow offensive unit for a pass or targeting the opposing goal.</p>

<p>Attacks don&rsquo;t do anything to units without the ball.  Save that animosity for the war.</p>

<p>The turn proceeds as per the vanilla MF0 rules. Any unit that would be activated with the normal MF0 turn rules, i.e. the target of a steal attempt or a pass, takes its turn as per those rules.</p>

<p>For example: If a unit equipped with a blue system is in the line of fire and has not rolled to determine the blue <em>defense value</em> this turn, defending player must declare a target for the unit, roll all of the unit&rsquo;s dice, and assign a <em>defense value</em>.  The unit takes its turn as normal when its initiative dictates.</p>

<h2>Movement Scale and Shooting Scale</h2>

<p>Normal vanilla MF0 scale is 2&#8221;.  <em>Shooting scale</em> for MFFA is 2&#8221;.  <em>Movement scale</em> is double that, 4&#8221;, to represent the agility of these hot-rodded sportsframes.</p>

<p>Using two different colored rulers (e.g., 1 red for shooting and 1 green for movement) is a good way to distinguish <em>movement scale</em> and <em>shooting scale</em>.</p>

<h2>Licensing note</h2>

<p>This rules expansion for Mobile Frame Zero is made in accordance to the Creative Commons, Non-commercial, Share-Alike license of the original game.</p>

<h2>Playtesting</h2>

<p>If you&rsquo;re interested in playtesting these rules go for it.  I&rsquo;d love to hear suggestions and reports here in the comments or on <a href="https://twitter.com/zerosalife">twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redesign exercise]]></title>
    <link href="http://zerosalife.github.io/blog/2016/06/11/redesign-exercise/"/>
    <updated>2016-06-11T10:13:29-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/06/11/redesign-exercise</id>
    <content type="html"><![CDATA[<p>From <a href="http://www.gamedesignworkshop.com/">The Game Design Workshop book</a>:</p>

<blockquote><p>One good way to train yourself in the design of game mechanics is to
challenge yourself with controlled design exercises in which you take
an existing game system, set a new player experience goal, and make
changes to the system to meet that goal.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What makes a game feature complete?]]></title>
    <link href="http://zerosalife.github.io/blog/2016/05/21/what-makes-a-game-feature-complete/"/>
    <updated>2016-05-21T09:47:38-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/05/21/what-makes-a-game-feature-complete</id>
    <content type="html"><![CDATA[<p>Of course, the makeup of a list of game features depend on the particular project in question.  This list of features required to make <a href="http://asherv.com/threes/"><em>Threes</em></a> feature complete comes from <a href="http://asherv.com/threes/threemails/#threemails">early on in the published emails about the game&rsquo;s development</a>.</p>

<h2>Features</h2>

<ul>
<li>Core Game</li>
<li>Tutorial</li>
<li>Menu Flow</li>
<li>Music</li>
<li>SFX</li>
<li>Monster Animation</li>
<li>Game Rotation (for the iPad/PC)</li>
<li>Leaderboards</li>
<li>Achievements</li>
<li>Twitter</li>
<li>Skin Packs</li>
<li>IAP</li>
<li>(Undos?)</li>
<li>Puzzlejuice Cross-promotion</li>
</ul>


<p>The final product has certainly received many times over more polish than the time spent implementing these features and the list may have changed.  But, from time to time, it&rsquo;s nice to see what other successful projects have deemed necessary to get a better sense of how to plan for your own projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mario Design Interview]]></title>
    <link href="http://zerosalife.github.io/blog/2016/04/30/mario-design-interview/"/>
    <updated>2016-04-30T08:48:07-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/04/30/mario-design-interview</id>
    <content type="html"><![CDATA[<p>In the interest of preserving an interview that could easily vanish into the ether following a Nintendo website redesign, I&rsquo;m going to collect some wisdom from <a href="http://iwataasks.nintendo.com/interviews/#/wii/nsmb/0/0">an Iwata Asks with Shigeru Miyamoto</a>.</p>

<!--more-->


<h2>Elements of a fun game</h2>

<ul>
<li>&ldquo;A fun game should be easy to understand &#x2013; you should be able to take one look at it and know what you have to do straight away.&rdquo;</li>
<li>&ldquo;It should be so well constructed that you can tell at a glance what your goal is and, even if you don&rsquo;t succeed, you&rsquo;ll blame yourself rather than the game.&rdquo;</li>
<li>&ldquo;The people standing around watching the game have also got to be able to enjoy it.&rdquo;</li>
</ul>


<h2>Form follows function</h2>

<p>A repeated theme that emerges in the interview is that constraints of the hardware or display technology restricted the designs.  Miyamoto and crew had to come up with simple, evocative designs that communicate the function for each of the entities in the game world.</p>

<p>Following the maxim that a fun game should be easy to understand, straightforward designs that show an entity&rsquo;s purpose in an easily recognizable manner communicate the designer&rsquo;s intent to the player.</p>

<h2>Try it and see</h2>

<p>Gameplay staples from the Mario series that seem unequivocally well-designed emerged from a simple iterative prototyping process.</p>

<p>The designers had an idea, for example, &ldquo;What if we double the size of our main character?&rdquo;  They then implemented it in a development build of the game, and tested it out to see if it was fun.  By testing this particular design choice, the designers came up with the idea for a mechanic in the game to double the size of the main character as the result of picking up a power-up.</p>

<h2>Communicating through design</h2>

<p>The simple introduction of the mushroom power-up is a clever bit of communication through the design of a level.  By this point the player has likely learned that stomping on Goombas squashes them.  The placement of a power-up block above the player situates it so you have no choice but to hit it when you try to squash the Goomba.  By keeping the player trapped under a line of blocks, the power-up has time to bounce off of a pipe (blatantly informing the player that power-ups can bounce) and the player is likely to run into it, thus discovering the power-up&rsquo;s purpose.</p>

<p>Notice how the construction of the level (one of the elements of fun), its design, makes it easy to understand (another element of fun) the function of these power-ups.  At no point is it necessary to wrest control of the player to blabber on about what power-ups are, why the player may want to pick them up, what other power-ups exist in the world, <em>et cetera, ad infinitum, ad nauseum</em>.</p>

<h2>Feel and smell</h2>

<p>These two terms refer to the subjective aesthetic impression of the perceptual and interactive elements of a game.  These can be a nice way to distinguish your game from the others out there.</p>

<p>Miyamoto uses the term smell to refer to the overall impression that a game leaves on your senses.  By really making a distinct impression on the player, the experience is likely to stick, leading to replayability.</p>

<p>The feel of a game refers to the subjective feeling the player gets when pressing buttons on the controller.  Every game uses the same controller (more or less), but the feeling that a player gets upon pressing a button can differ drastically depending on the game.  Miyamoto mentions, and I agree, that sound effects have a huge impact on the feel of a game.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improvisation vs Preparation]]></title>
    <link href="http://zerosalife.github.io/blog/2016/04/23/improvisation-vs-preparation/"/>
    <updated>2016-04-23T09:44:50-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/04/23/improvisation-vs-preparation</id>
    <content type="html"><![CDATA[<p><em>Or preparation as play.</em></p>

<p>This post was inspired by long set-up times eating into time-crunched
play time for busy adults.</p>

<p>As a young adult with minimal time commitment I had no problem
spending hours preparing for a gaming session among friends.  And
there was little concern for an hour or two spent setting up a
wargaming afternoon.  But in adulthood these time commitments quickly
eat-in to or completely consume any time that would otherwise be spent
having fun, gaming with your friends.</p>

<p>Certain games are suited more to the <em>preparation</em> side of things than
the <em>improvisation</em> side.</p>

<!--more-->


<p>Consider the examples I mentioned above, a gamemaster driven
roleplaying game and a tabletop war game.  Certainly these are fun
pastimes but they require preparation on the part of the individual or
all parties involved.</p>

<p>Roleplaying games require, at least initially, the generation of
player characters for all involved, potentially consuming the entire
first play session.  The gamemaster is, at least ostensibly, required
to plot out a scenario for each play session, necessitating an
substantial noninteractive time investment outside of the normal play
session.</p>

<p>For war games, players must spend time constructing armies, generally
away from the interaction at the table.</p>

<p>How does this differ from say playing stickball or baseball with your
friends in an alley or a field with just a stick and a ball?  The game
starts when the minimally necessary instruments arrive, and continues
even as players come and go.  Interrupting these improvised games is
an almost heinous offense, hence the saying &ldquo;taking the ball and going
home.&rdquo;</p>

<p>To stretch this metaphor beyond the breaking point: in this syllogism,
the polar opposite of pickup baseball or basketball would be ice
hockey, something requiring potentially hours of preparation by a
Zambonist to prepare the playing surface so the players can play for a
relatively short time.</p>

<p>There are a few games that get preparation as play mechanics right,
but I think there is still room for improvement.</p>

<ul>
<li><p><a href="http://glyphpress.com/talk/shock-pdf">Shock</a></p></li>
<li><p><a href="http://www.evilhat.com/home/fate-core/">Fate</a></p></li>
<li><p><a href="http://www.dog-eared-designs.com/primetime-adventures/">Primetime Adventures</a></p></li>
<li><p><a href="http://www.lamemage.com/microscope/">Microscope</a></p></li>
<li><p><a href="http://planet-thirteen.com/Dungeon.aspx">How to Host a Dungeon</a></p></li>
<li><p><a href="http://bullypulpitgames.com/games/fiasco/">Fiasco</a></p></li>
</ul>


<p>These games all turn the world gen and character background into an
gameplay activity, typically performed during the first group play
session.  Shock and Fiasco even do away with the necessity of a GM,
allowing players to take turns serving as protagonists, antagonists,
or third parties.  These examples go a long way toward what I mean by
preparation as play, but I don&rsquo;t think the games have captured the
concept entirely.</p>

<p>What I would be interested in seeing is a separate <em>asynchronous</em> type
of game, where the preparation has mechanics that boil down to a solo
game.  The results of the each player&rsquo;s solo game(s) are then somehow
incorporated and allowed to influence the collaborative group play
session.  If you know of such a game, drop me a line in the comments
or on <a href="https://twitter.com/zerosalife">twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Original Diablo Pitch]]></title>
    <link href="http://zerosalife.github.io/blog/2016/04/02/the-original-diablo-pitch/"/>
    <updated>2016-04-02T09:48:33-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/04/02/the-original-diablo-pitch</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/davidbrevik/status/711420722225106945">David Brevik</a>, one of the original developers of Diablo has released the <a href="http://graybeardgames.blogspot.com/2016/03/original-diablo-pitch-document.html">original pitch document</a>.  Check it out!</p>

<!--more-->


<h2>Anatomy of Diablo&rsquo;s pitch document</h2>

<ul>
<li>Summary</li>
<li>Game Design

<ul>
<li>Overview</li>
<li>Plot and Setting</li>
<li>Gameplay</li>
</ul>
</li>
<li>Marketing</li>
<li>Development</li>
</ul>


<p>In addition to illuminating how to write these documents in general, I find interesting to see how the Diablo devs were planning on leveraging the success of <em>Magic: The Gathering</em>&rsquo;s business model to sell DLC.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Dungeonmans teaches diagonal movement]]></title>
    <link href="http://zerosalife.github.io/blog/2016/03/19/how-dungeonmans-teaches-diagonal-movement/"/>
    <updated>2016-03-19T09:25:44-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/03/19/how-dungeonmans-teaches-diagonal-movement</id>
    <content type="html"><![CDATA[<p>Listening to <a href="http://www.roguelikeradio.com/2016/01/episode-114-gameplay-orientated.html">Roguelike Radio</a>, I heard the creator of <a href="https://twitter.com/dungeonmans">Dungeonmans</a> talk about designing levels to teach gameplay concepts.</p>

<!--more-->


<p><a href="http://www.dungeonmans.com/">Dungeonmans</a> has an interesting strategy to teach players to move diagonally early in the game, without requiring a wordy tutorial.</p>

<p>The first level has caves with loot inside.  Some caves are straightforward, allowing players to reach loot without needing to perform a diagonal step.</p>

<pre><code>###
#o#
#.#
</code></pre>

<p>But other caves are different, requiring diagonal movement to get the loot.</p>

<pre><code>###
#o#
##.
</code></pre>

<p>Presenting the diagonal movement mechanic this way is easy and low risk.  If you don&rsquo;t pick it up, it&rsquo;s ok.  You won&rsquo;t die, you just miss out on some loot.</p>

<p>It&rsquo;s also low disturbance.  There&rsquo;s no dialog popping up saying, &ldquo;Hey!  Listen!&rdquo;  The players will either get a kick out of figuring out how to get that pesky loot or simply move on and play more of the game.</p>

<p>It&rsquo;s a win-win situation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Proportion Types]]></title>
    <link href="http://zerosalife.github.io/blog/2016/03/05/proportion-types/"/>
    <updated>2016-03-05T12:52:00-06:00</updated>
    <id>http://zerosalife.github.io/blog/2016/03/05/proportion-types</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/androidarts">Arne</a> over at <a href="http://www.androidarts.com/">Android Arts</a> <a href="http://androidarts.com/misc/proportions_types.jpg">codified a taxonomy of proportion types in character design</a>.  I&rsquo;ve kept track of a few examples I&rsquo;ve come across to share with you below.</p>

<!--more-->


<h2>Ninja Star</h2>

<ul>
<li>Bravely Default</li>
<li>Fire Emblem</li>
<li>Miis</li>
<li>Fez</li>
<li>Super Mario Bros.</li>
<li>Mischief Makers</li>
<li>Gunstar Heroes</li>
<li>Monument Valley</li>
</ul>


<h2>Cross</h2>

<ul>
<li>Call of Duty Advanced Warfare</li>
<li>Minecraft</li>
<li>N++</li>
<li>Gears of War</li>
<li>Warhammer</li>
<li>Last of Us</li>
<li>Uncharted</li>
</ul>


<h2>Maltese cross</h2>

<ul>
<li>Mega Man</li>
<li>Mobile Suit Gundam</li>
<li>Mazinger Z</li>
<li>Getter Robo</li>
<li>Armored Trooper Votoms</li>
<li>Practically everything from Super Robot Wars</li>
<li>Ratchet and Clank</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Library]]></title>
    <link href="http://zerosalife.github.io/blog/2016/02/27/the-library/"/>
    <updated>2016-02-27T09:28:58-06:00</updated>
    <id>http://zerosalife.github.io/blog/2016/02/27/the-library</id>
    <content type="html"><![CDATA[<p>An introductory FATE Accelerated Edition (FAE) adventure in the spirit
of Ghostbusters International</p>

<!--more-->


<h1>Dramatis Personae</h1>

<h2>The Library Supervisor</h2>

<p>Has a problem the players need to solve</p>

<h2>The Librarian</h2>

<p>+2 to Poltergeistery, Attacking people with overdue books
-2 to Yelling, doing anything outside of the library</p>

<h3>Stress</h3>

<ul>
<li>[ ]</li>
<li>[ ]</li>
</ul>


<h2>The Summoner</h2>

<p>Andrea Runyon, daughter of Poke Runyon, high priestess of Astarte</p>

<h2>Rock Lions</h2>

<p>+2 to growling
-2 to acid rain</p>

<h3>Stress</h3>

<ul>
<li>[ ]</li>
</ul>


<h2>Bat Books</h2>

<p>+2 to flapping around
-2 to preventing combustion</p>

<h3>Stress</h3>

<p>None (first hit takes them out)</p>

<h2>The Lieutenants</h2>

<p>The players will encounter these if the pacing feels a little fast
when they approach the summoning circle in the basement.  Be careful,
because the lieutenants are tough.</p>

<p>First lieutenants of Bael&rsquo;s legion</p>

<h3>Stress</h3>

<ul>
<li>[ ]</li>
<li>[ ]</li>
</ul>


<h2>Clan&#8217;thael</h2>

<p>&ldquo;Clancy&rdquo;
Second Lieutenant of the 23rd Legion of Spirits under Bael&rsquo;s rule</p>

<p>+2 to Slurping, phasing between walls
-2 to resisting hunger</p>

<p>Cross between a toad and Slimer.</p>

<h3>Stress</h3>

<ul>
<li>[ ]</li>
<li>[ ]</li>
</ul>


<h1>At the shop</h1>

<p>Introduce the characters, awarding fate points / discovering aspects
about the setting as appropriate.</p>

<h1>Call to action</h1>

<p>The players get a call to investigate a disturbance at the Library.
The Library Supervisor has ordered the library evacuated because
patrons have reported a ghostly apparition.</p>

<p>The Library Supervisor says</p>

<blockquote><p>You have to help us.  There&rsquo;s no one else to call.  It was horrible.
Books were flying everywhere.  One patron was knocked out.  And those
cries from the office, &lsquo;Overdue&#x2026;. Overdue&#x2026;&rsquo;  They sounded so
menacing&#x2026; I didn&rsquo;t even get my briefcase before evacuating everyone.</p></blockquote>

<h1>Arriving at the library</h1>

<p>Two statues of lions at the front steps of the library come alive.</p>

<p>Read the following text when the players arrive at the library:</p>

<blockquote><p>You pull up at the entrance to the library. Tall marble columns cap
the staircase leading to the door. At the foot of the staircase sit
two marble statues.</p></blockquote>

<p>If the players approach the entrance, the statues come to life.</p>

<p>Read the following text when the statues come to life</p>

<blockquote><p>You hear cracking and scraping as the lion statues come to life,
stepping down from their pedestals with a graceful thud. The lions
mouths open as if giving mighty roars but no sounds escape the
statues&#8217; throats.</p></blockquote>

<h1>First floor</h1>

<h2>The circulation desk</h2>

<p>The desk is full of books. In closer inspection each book has been
marked overdue. The desk also has overdue stamps all over it as well
as if someone went completely wild stamping everything in sight.</p>

<h2>The office</h2>

<p>Read the following flavor text when the players enter the office</p>

<blockquote><p>The walls are lined with books.  There is a desk with a large office
chair on the far side of the room.</p></blockquote>

<p>If the players haven&rsquo;t encountered the Librarian, read this flavor
text</p>

<blockquote><p>The office chair is facing away from the doorway.  It slowly turns
around revealing the wrinkle-creased face of the Librarian.  In an
instant the Librarian&rsquo;s face morphs into a ghastly visage.  You feel
wind blowing as if the Librarian is sucking the energy from the room.</p></blockquote>

<h3>Capturing the Librarian</h3>

<h2>The Stacks</h2>

<p>The library has been evacuated.</p>

<p>If the players don&rsquo;t wander over to the stacks, the characters start
to hear books dropping.  That should entice the players to explore the
stacks.</p>

<p>When the characters arrive, they are attacked by book bats.  If the
pacing feels too fast, increase the challenge by having more books
turn into book bats.</p>

<h3>Book bats</h3>

<h1>The Basement</h1>

<h2>Stairway</h2>

<p>One of the characters becomes paralyzed by a hidden magical circle on
the staircase.  The character who gets paralyzed is left up to the
GM&rsquo;s discretion.</p>

<p>This is a trap set by the Summoner to act as a sort of alarm, alerting
the Summoner to approaching people who may intrude on the summoning.
When the trap is triggered, the Summoner gives up on the invocation
and flees the library.</p>

<p>Read the following flavor text as the characters descend the stairs.</p>

<blockquote><p>As you descend the staircase your limbs grow heavier.  It&rsquo;s as if
you&rsquo;re walking through mud.  Your eyes grow wide as your feet stick to
the floor and your arms freeze.</p></blockquote>

<p>Characters looking for traps on the staircase may notice some markings
on the stairs, but the magical circle that is the source of the
paralysis spell is only visible when you stand on it, ensuring that
the trap will be sprung.</p>

<p>The other characters may attempt to free the paralyzed character by
using some knowledge of the paranormal.</p>

<p>The characters will be released after the Summoner has fled the
Library because the Summoner is no longer able to maintain the spell.</p>

<h2>Hallway</h2>

<h3>Encounter with partially summoned ghost</h3>

<p>The partially summoned ghost slimes the first player, retreating into
the walls of the hallway. As the players move on the spirit comes out
again clinging to the slimes player. The spirit blabbers and cries,
begging for help. The spirit is lost and will be unable to survive if
left alone.</p>

<p>The spirit will become incorporeal if left too long without a human
anchor to reality.  Clancy is on the run from two other lieutenants of
Bael&rsquo;s legion. The lieutenants will kill any malformed spirit and
promote one of their vassals to fill Clancys position</p>

<p>If the players befriend Clancy then they encounter the lieutenants. If
they do not believe Clancy then it turns out that the spirit was Lying
and then they proceed directly to the summoning circle.</p>

<p>After sliming a character, and clinging to the character, the
partially summoned ghost will reach into any threatening character&rsquo;s
body and pull out a fate token.</p>

<blockquote><p>The toad-like spirit mutters something about being nicer to it.  It
reaches out toward your chest.  To your surprise its hand goes into
your body.  You feel a strange sensation as it pulls out a shining bit
of your energy.  You lose a fate token.</p></blockquote>

<h2>Summoning Circle</h2>

<h3>The interrupted summoning</h3>

<p>Read this flavor text when the characters arrive in the summoning
circle room</p>

<blockquote><p>There is a circle of salt on the ground here.  In the middle you can
see strange symbols that look like they were hastily brushed away,
leaving behind streaks of salt.  The far side of the circle is broken
by footprints heading toward the library&rsquo;s loading dock.</p></blockquote>

<p>If the characters search around they find small amounts of earth, wax,
primrose, and jasmine.  These are elements the summoner was using.
The characters may know purveyors of these items in town.</p>

<p>If the players have befriended Clancy, the partially summoned spirit,
Clancy can make out that the faded symbols are the marking of the
spirit&rsquo;s King, Bael.</p>

<p>The next adventure may involve tracking down where these items come
from, in order to track down the summoner.</p>

<h1>Denouement</h1>

<h2>Character advancement</h2>

<p>If the players capture the Librarian they may gain one minor milestone</p>

<p>If the players gain any information about the summoner the characers
who uncovered the information gain an additional minor milestone</p>

<p>If the players befriend Clancy, the player who first encountered
Clancy gets to add Clancy as a free stunt.  This is a significant
milestone.  The player does not have to pay any refresh points, if the
player already has 3 stunts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brainstorming a Hexcrawl application]]></title>
    <link href="http://zerosalife.github.io/blog/2016/02/06/brainstorming-a-hexcrawl-application/"/>
    <updated>2016-02-06T08:00:40-06:00</updated>
    <id>http://zerosalife.github.io/blog/2016/02/06/brainstorming-a-hexcrawl-application</id>
    <content type="html"><![CDATA[<p>Here are some notes brainstorming an application to support hexcrawl
campaigns in the spirit of the <a href="http://arsludi.lamemage.com/index.php/78/grand-experiments-west-marches/">West Marches</a>.</p>

<p>This is a snapshot of a living document.  I will continue working on
it in a <a href="https://gist.github.com/zerosalife/22ac247a275a9835c2fa">gist</a>.</p>

<!--more-->


<h2>Views</h2>

<h3>Map</h3>

<p><a href="http://4.bp.blogspot.com/-5X3gz-42PrE/TsCPATXPONI/AAAAAAAACQA/s0XggyFIGXY/s1600/HCC06+-+Troll+Hills.png">Example image</a></p>

<ol>
<li><p>Notification of Map Code and URL to share</p></li>
<li><p>Collection of tiles</p></li>
<li><p>Background image?</p></li>
<li><p>Regions?</p></li>
</ol>


<h3>Tile</h3>

<ol>
<li><p>Revealed / Generated</p>

<ol>
<li><p>Biome</p></li>
<li><p>Region</p></li>
<li><p>Data</p></li>
<li><p>Tile icon</p></li>
<li><p>Notes</p></li>
</ol>
</li>
<li><p>Hidden</p></li>
</ol>


<h3>Hierarchy</h3>

<ol>
<li><p>Map</p>

<ol>
<li>Tile</li>
</ol>
</li>
</ol>


<h2>Actions</h2>

<h3>Choose map from PIN</h3>

<h3>Drill down to tile (map)</h3>

<h3>Drill up to map (tile)</h3>

<h3>Reveal tile</h3>

<h3>Regenerate tile</h3>

<h3>Regenerate data entry</h3>

<h3>Save tile notes</h3>

<h2>Persistence</h2>

<h3>Monolithic</h3>

<h3>Per User</h3>

<h3>Per Map</h3>

<h3>Bloom Filters to prevent code collisions</h3>

<ol>
<li><p>Cache on startup</p></li>
<li><p>Append on world create</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[game-icons.net]]></title>
    <link href="http://zerosalife.github.io/blog/2016/01/30/game-icons-dot-net/"/>
    <updated>2016-01-30T12:09:34-06:00</updated>
    <id>http://zerosalife.github.io/blog/2016/01/30/game-icons-dot-net</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a handy resource that I will be sure to use in the future: <a href="http://zerosalife.github.io//game-icons.net/">game-icons.net</a>.</p>

<p>The site has thousands of icons available under a <a href="http://zerosalife.github.io//creativecommons.org/licenses/by/3.0/">CC by 3.0 license</a>.  I am not a lawyer, but by my read this means you can reuse, redistribute, and remix the icons provided you give appropriate credit, indicate if changes were made, and provide a link to the license.</p>

<p>Check the site out and <a href="http://zerosalife.github.io//twitter.com/zerosalife">tweet me</a> if you use or have used the icons in your game.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Peter Venkman FATE example character]]></title>
    <link href="http://zerosalife.github.io/blog/2016/01/16/peter-venkman-fate-example-character/"/>
    <updated>2016-01-16T10:04:14-06:00</updated>
    <id>http://zerosalife.github.io/blog/2016/01/16/peter-venkman-fate-example-character</id>
    <content type="html"><![CDATA[<p>I made a sample character so players would get a handle for the <a href="http://www.faterpg.com/">FATE system</a>.  I&rsquo;m using <a href="http://fate-srd.com/fate-accelerated/get-started">FATE Accelerated</a> to run a <a href="https://en.wikipedia.org/wiki/Ghostbusters_%28role-playing_game%29">Ghostbusters International</a>-inspired game.</p>

<!--more-->


<h1>Dr. Peter Venkman</h1>

<h2>High Concept</h2>

<p>Womanizing failed psychiatrist cofounder of the original
Ghostbusters</p>

<h2>Trouble</h2>

<p>Always put my foot in my mouth around women</p>

<h2>Other Aspects (one required, up to two more optional)</h2>

<ul>
<li>Lothario</li>
<li>Paranormal skeptic</li>
<li>Scientific charlatan</li>
</ul>


<h2>Approaches</h2>

<ul>
<li><strong>Careful:</strong> Mediocre (+0)</li>
<li><strong>Clever:</strong> Good (+3)</li>
<li><strong>Flashy:</strong> Fair (+2)</li>
<li><strong>Forceful:</strong> Average (+1)</li>
<li><strong>Quick:</strong> Average (+1)</li>
<li><strong>Sneaky:</strong> Fair (+2)</li>
</ul>


<h2>Stunts</h2>

<ul>
<li><strong>Proton Pack:</strong> Because I am a ghostbuster, I have a proton pack that gives me +2 bonus to Forcefully create an advantage or discover an aspect when attempting to zap a ghost.</li>
</ul>


<p>(May take up to two more stunts without reducing refresh)</p>

<h2>Stress</h2>

<ul>
<li>[ ]</li>
<li>[ ]</li>
<li>[ ]</li>
</ul>


<h2>Consequences</h2>

<ul>
<li><strong>Mild (2):</strong></li>
<li><strong>Moderate (4):</strong></li>
<li><strong>Severe (6):</strong></li>
</ul>


<h2>Refresh</h2>

<p>3</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking GameObjects in Unity Unit Tests]]></title>
    <link href="http://zerosalife.github.io/blog/2016/01/09/mocking-gameobjects-in-unity-unit-tests/"/>
    <updated>2016-01-09T10:52:49-06:00</updated>
    <id>http://zerosalife.github.io/blog/2016/01/09/mocking-gameobjects-in-unity-unit-tests</id>
    <content type="html"><![CDATA[<p>A while back, I wrote a post about <a href="https://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/">unit testing in Unity</a>.  In this post, I&rsquo;ll go through a useful pattern to <a href="https://en.wikipedia.org/wiki/Mock_object">mock</a> <code>GameObject</code>s in unit tests.</p>

<!--more-->


<h2>Make a GameObject</h2>

<p>We can create a <code>GameObject</code> inside a test just like we would normally inside a Unity script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">GameObject</span> <span class="n">testGo</span> <span class="p">=</span> <span class="k">new</span> <span class="n">GameObject</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Passing a string to <a href="https://docs.unity3d.com/ScriptReference/GameObject-ctor.html">the <code>GameObject</code> constructor</a> gives the <code>GameObject</code> that name.</p>

<h2>We can even Instantiate prefabs</h2>

<p>Since our test is not inheriting <code>MonoBehaviour</code>, we&rsquo;ll have to call the Instantiate function directly, using the fully qualified namespace.</p>

<p>Remember that prefabs are just stored <code>GameObject</code>s, so we can use the <code>testGo</code> created above as our prefab.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">GameObject</span> <span class="n">go</span> <span class="p">=</span> <span class="n">UnityEngine</span><span class="p">.</span><span class="n">Object</span><span class="p">.</span><span class="n">Instantiate</span><span class="p">(</span><span class="n">testGo</span><span class="p">,</span>
</span><span class='line'>                                               <span class="n">Vector3</span><span class="p">.</span><span class="n">zero</span><span class="p">,</span>
</span><span class='line'>                                               <span class="n">Quaternion</span><span class="p">.</span><span class="n">identity</span><span class="p">)</span> <span class="k">as</span> <span class="n">GameObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Clean up</h2>

<p>We can create <code>GameObjects</code>, but repeatedly running the test leaves our project cluttered up with old objects.  We want our tests to clean up all mocked objects after running.  We&rsquo;ll do that using by using the fully qualified <a href="https://docs.unity3d.com/ScriptReference/Object.DestroyImmediate.html"><code>DestroyImmediate</code> function</a>.</p>

<p>We need to call <code>DestroyImmediate</code> instead of <code>Destroy</code> because the unit tests are running in the editor and delayed destruction won&rsquo;t be invoked.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">UnityEngine</span><span class="p">.</span><span class="n">Object</span><span class="p">.</span><span class="n">DestroyImmediate</span><span class="p">(</span><span class="n">go</span><span class="p">);</span>
</span><span class='line'><span class="n">UnityEngine</span><span class="p">.</span><span class="n">Object</span><span class="p">.</span><span class="n">DestroyImmediate</span><span class="p">(</span><span class="n">testGo</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Mocking is easy</h2>

<p>Following this pattern will give you the ability to mock objects to your hearts&#8217; delight as you unit test your Unity code.  As, always let me know if you have questions, comments, or concerns below or on <a href="https://twitter.com/zerosalife">twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Picasso on creativity]]></title>
    <link href="http://zerosalife.github.io/blog/2016/01/02/picasso-on-creativity/"/>
    <updated>2016-01-02T11:56:50-06:00</updated>
    <id>http://zerosalife.github.io/blog/2016/01/02/picasso-on-creativity</id>
    <content type="html"><![CDATA[<p>Closing the year with a quote from Picasso:</p>

<blockquote><p>Learn the rules like a pro, so you can break them like an artist.</p></blockquote>

<p>&mdash;Pablo Picasso</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ProcJam 2015 Restrospective]]></title>
    <link href="http://zerosalife.github.io/blog/2015/12/05/procjam-2015-restrospective/"/>
    <updated>2015-12-05T13:05:46-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/12/05/procjam-2015-restrospective</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/images/assets/mvs-screenshot-post-procjam.png"><img class="center" src="http://zerosalife.github.io/images/assets/mvs-screenshot-post-procjam.png" width="2108" height="1942"></a>
I made a lot of progress on my mech generator for ProcJam 2015.  It&rsquo;s up on the web at <a href="https://mech-vehicle-sheet.herokuapp.com/">mech-vehicle-sheet.herokuapp.com</a>.  The code is available on <a href="https://github.com/zerosalife/mech-vehicle-sheet">github</a>.</p>

<!--more-->


<h2>Clojure and Clojurescript</h2>

<p>I used <a href="http://clojure.org/">Clojure</a> and <a href="https://github.com/clojure/clojurescript">ClojureScript</a> with <a href="https://github.com/omcljs/om">Om/React</a> via <a href="https://github.com/levand/quiescent">Quiescent</a> to make development quick and easy.  Refactorings, which I spent the majority of my time on, were a breeze compared to other languages I&rsquo;ve been developing in lately.  While this project doesn&rsquo;t have a fancy UI, choosing React made it straightforward to divide the UI into sensible chunks, which I implemented as components.</p>

<h2>No artist</h2>

<p>Didn&rsquo;t find an artist.  Although, starting to look for an artist the day after ProcJam started was inadvisable.  I think not finding an artist is actually a benefit.</p>

<p>Not finding an artist pushed me to come up with the idea of not just choosing and laying out art assets proceedurally but allso generating the art proceduarlly.  I&rsquo;m thinking of somethign along the lines of what I&rsquo;ve seen @strangethink do.</p>

<p>I want to generate symmetric parts for mechs based on the manufacturer.  Same thing for weapons, in the style of <a href="http://borderlands.wikia.com/wiki/Weapons#Weapon_Components">the Borderlands series</a>.</p>

<p>You can see the beginnings of a template as part of the latest revisions on <a href="https://mech-vehicle-sheet.herokuapp.com/">mech-vehicle-sheet.herokuapp.com</a>.</p>

<h2>Not done yet</h2>

<p>Going to keep developing this project in my spare time, possibly for participation in another gamejam or just for fun.  I&rsquo;ll post updates on the blog when I get major features implemented.</p>

<p>My tentative to-do list is:</p>

<ul>
<li>Generate images for each mech part</li>
<li>Add similar generation for the weapons</li>
<li>Create different art styles based on manufacturer</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ProcJam 2015 update]]></title>
    <link href="http://zerosalife.github.io/blog/2015/11/14/procjam-2015-update/"/>
    <updated>2015-11-14T07:25:01-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/11/14/procjam-2015-update</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a brief update on <a href="http://www.procjam.com/category/procjam-2015/">#ProcJam 2015</a>.  I&rsquo;m hard at work on the <a href="https://mech-vehicle-sheet.herokuapp.com/">Mech Generator</a>.  You can check out my progress at that link.  A more thorough write-up will come soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seeking artist for ProcJam 2015]]></title>
    <link href="http://zerosalife.github.io/blog/2015/11/07/seeking-artist-for-procjam-2015/"/>
    <updated>2015-11-07T09:53:17-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/11/07/seeking-artist-for-procjam-2015</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/images/assets/mvs-screenshot-full.png"><img class="center" src="http://zerosalife.github.io/images/assets/mvs-screenshot-small.png" width="800" height="613"></a></p>

<p><a href="https://itch.io/jam/procjam">#ProcJam 2015</a> started yesterday.  I&rsquo;m working on a mech vehicle generator web app.  You can check it out at <a href="https://mech-vehicle-sheet.herokuapp.com/">mech-vehicle-sheet.herokuapp.com</a>. The prototype layout and generation code is complete.  What I need now is an artist to replace the placekitten pictures I&rsquo;m currently using.</p>

<!--more-->


<h2>The Roadmap</h2>

<h3>Backend and client code</h3>

<p>I&rsquo;m working on setting up the web app, but the underlying generator code is done.  I&rsquo;ve made it modular, so we can plug in as many or as few art assets as you like</p>

<h3>Layout</h3>

<p>Largely cribbed from old <a href="https://en.wikipedia.org/wiki/Heavy_Gear"><em>Heavy Gear</em></a> character sheets.  I&rsquo;m satisfied with it.  But if you have a better design, I&rsquo;m all ears.</p>

<h3>Images</h3>

<p>What I&rsquo;m looking for are images of mechs in whatever style you choose that can be broken into individual layers composed of:</p>

<ul>
<li>Head</li>
<li>Torso</li>
<li>Shoulders (left &amp; right)</li>
<li>Arms (left &amp; right)</li>
<li><p>Legs</p></li>
<li><p>Weapons</p></li>
</ul>


<p>An example of what I&rsquo;m thinking of here are the mechs from the <em><a href="https://en.wikipedia.org/wiki/Front_Mission">Front Mission</a></em> series of games.  Mechs in that series had sprites that were composed of individual parts that composited together based on the customizations that you made to your mechs.  See this <a href="http://www.spriters-resource.com/snes/frontmiss/sheet/38202/">example from the original <em>Front Mission</em> on SNES</a>.</p>

<h3>Image layout</h3>

<p>I&rsquo;ll write code (likely CSS) that composites your drawings based on the output of the generator to create custom, procedurally generated pictures to go along with each of the mechs.</p>

<h2>What I need from you</h2>

<p>At the most basic level it would be nice to create several &ldquo;families&rdquo; of heads, torsos, shoulders, arms, and legs.  Creating cool weapons that map on to hard points, i.e. a shoulder mounted rocket launcher that could mount on the left shoulder, would be icing on the cake.</p>

<p>I&rsquo;d like to work with an iterative process, if you&rsquo;re cool with that.  If you have rough sketches, pass them along.  They&rsquo;ll help with getting a sense for how to layout the composite images in CSS.  This thing doesn&rsquo;t have to be perfect, we can continually refine it as we go.</p>

<p>Communication and coordination to make sure I have the latest versions of your art assets.</p>

<h2>What I&rsquo;ll be working on</h2>

<p>I&rsquo;ll be integrating the generator backend with the frontend, laying out any art assets, and extending the generator as time permits.</p>

<h2>What we&rsquo;ll get</h2>

<p>We&rsquo;ll come out of this with a cool little generator to play with, hopefully creating many hilarious mecha.  Who knows, down the road this could lead to more collaboration between the two of us and/or the generator could serve as a component of a larger mecha game.</p>

<p>In any case, you will get equal billing on the generator itself and all blog posts about the generator.  You will retain all rights to the art you create.  Outside of the generator itself, I would only request to use the art assets in screenshots on the blog and twitter.</p>

<h2>Sound good?</h2>

<p>Sound good?  Let me know on <a href="https://twitter.com/zerosalife">twitter</a>, I&rsquo;m happy to communicate over DMs, in the comments below, or via email (my twitter handle at gmail)!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking GameObjects in Unity Unit Tests]]></title>
    <link href="http://zerosalife.github.io/blog/2015/10/31/mocking-gameobjects-in-unity-unit-tests/"/>
    <updated>2015-10-31T09:03:57-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/10/31/mocking-gameobjects-in-unity-unit-tests</id>
    <content type="html"><![CDATA[<p>A while back, I wrote a post about <a href="http://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/">unit testing in Unity</a>.  In this post, I&rsquo;ll go through a useful pattern to <a href="https://en.wikipedia.org/wiki/Mock_object">mock</a> <code>GameObject</code>s in unit tests.</p>

<!--more-->


<h2>Make a GameObject</h2>

<p>We can create a <code>GameObject</code> inside a test just like we would normally inside a Unity script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">GameObject</span> <span class="n">testGo</span> <span class="p">=</span> <span class="k">new</span> <span class="n">GameObject</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Passing a string to <a href="http://docs.unity3d.com/ScriptReference/GameObject-ctor.html">the <code>GameObject</code> constructor</a> gives the <code>GameObject</code> that name.</p>

<h2>We can even Instantiate prefabs</h2>

<p>Since our test is not inheriting <code>MonoBehaviour</code>, we&rsquo;ll have to call the Instantiate function directly, using the fully qualified namespace.</p>

<p>Remember that prefabs are just stored <code>GameObject</code>s, so we can use the <code>testGo</code> created above as our prefab.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">GameObject</span> <span class="n">go</span> <span class="p">=</span> <span class="n">UnityEngine</span><span class="p">.</span><span class="n">Object</span><span class="p">.</span><span class="n">Instantiate</span><span class="p">(</span><span class="n">testGo</span><span class="p">,</span>
</span><span class='line'>                                               <span class="n">Vector3</span><span class="p">.</span><span class="n">zero</span><span class="p">,</span>
</span><span class='line'>                                               <span class="n">Quaternion</span><span class="p">.</span><span class="n">identity</span><span class="p">)</span> <span class="k">as</span> <span class="n">GameObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Clean up</h2>

<p>We can create <code>GameObject</code>s, but repeatedly running the test leaves our project cluttered up with old objects.  We want our tests to clean up all mocked objects after running.  We&rsquo;ll do that using by using the fully qualified <a href="http://docs.unity3d.com/ScriptReference/Object.DestroyImmediate.html"><code>DestroyImmediate</code> function</a>.</p>

<p>We need to call <code>DestroyImmediate</code> instead of <code>Destroy</code> because the unit tests are running in the editor and delayed destruction won&rsquo;t be invoked.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">UnityEngine</span><span class="p">.</span><span class="n">Object</span><span class="p">.</span><span class="n">DestroyImmediate</span><span class="p">(</span><span class="n">go</span><span class="p">);</span>
</span><span class='line'><span class="n">UnityEngine</span><span class="p">.</span><span class="n">Object</span><span class="p">.</span><span class="n">DestroyImmediate</span><span class="p">(</span><span class="n">testGo</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Mocking is easy</h2>

<p>Following this pattern will give you the ability to mock objects to your hearts&#8217; delight as you unit test your Unity code.  As, always let me know if you have questions, comments, or concerns below or on twitter.</p>
]]></content>
  </entry>
  
</feed>
