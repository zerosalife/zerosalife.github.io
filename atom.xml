<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[zero's a life]]></title>
  <link href="http://zerosalife.github.io/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2015-11-14T07:26:09-06:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ProcJam 2015 update]]></title>
    <link href="http://zerosalife.github.io/blog/2015/11/14/procjam-2015-update/"/>
    <updated>2015-11-14T07:25:01-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/11/14/procjam-2015-update</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a brief update on <a href="http://www.procjam.com/category/procjam-2015/">#ProcJam 2015</a>.  I&rsquo;m hard at work on the <a href="https://mech-vehicle-sheet.herokuapp.com/">Mech Generator</a>.  You can check out my progress at that link.  A more thorough write-up will come soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seeking artist for ProcJam 2015]]></title>
    <link href="http://zerosalife.github.io/blog/2015/11/07/seeking-artist-for-procjam-2015/"/>
    <updated>2015-11-07T09:53:17-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/11/07/seeking-artist-for-procjam-2015</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/images/assets/mvs-screenshot-full.png"><img class="center" src="http://zerosalife.github.io/images/assets/mvs-screenshot-small.png" width="800" height="613"></a></p>

<p><a href="https://itch.io/jam/procjam">#ProcJam 2015</a> started yesterday.  I&rsquo;m working on a mech vehicle generator web app.  You can check it out at <a href="https://mech-vehicle-sheet.herokuapp.com/">mech-vehicle-sheet.herokuapp.com</a>. The prototype layout and generation code is complete.  What I need now is an artist to replace the placekitten pictures I&rsquo;m currently using.</p>

<!--more-->


<h2>The Roadmap</h2>

<h3>Backend and client code</h3>

<p>I&rsquo;m working on setting up the web app, but the underlying generator code is done.  I&rsquo;ve made it modular, so we can plug in as many or as few art assets as you like</p>

<h3>Layout</h3>

<p>Largely cribbed from old <a href="https://en.wikipedia.org/wiki/Heavy_Gear"><em>Heavy Gear</em></a> character sheets.  I&rsquo;m satisfied with it.  But if you have a better design, I&rsquo;m all ears.</p>

<h3>Images</h3>

<p>What I&rsquo;m looking for are images of mechs in whatever style you choose that can be broken into individual layers composed of:</p>

<ul>
<li>Head</li>
<li>Torso</li>
<li>Shoulders (left &amp; right)</li>
<li>Arms (left &amp; right)</li>
<li><p>Legs</p></li>
<li><p>Weapons</p></li>
</ul>


<p>An example of what I&rsquo;m thinking of here are the mechs from the <em><a href="https://en.wikipedia.org/wiki/Front_Mission">Front Mission</a></em> series of games.  Mechs in that series had sprites that were composed of individual parts that composited together based on the customizations that you made to your mechs.  See this <a href="http://www.spriters-resource.com/snes/frontmiss/sheet/38202/">example from the original <em>Front Mission</em> on SNES</a>.</p>

<h3>Image layout</h3>

<p>I&rsquo;ll write code (likely CSS) that composites your drawings based on the output of the generator to create custom, procedurally generated pictures to go along with each of the mechs.</p>

<h2>What I need from you</h2>

<p>At the most basic level it would be nice to create several &ldquo;families&rdquo; of heads, torsos, shoulders, arms, and legs.  Creating cool weapons that map on to hard points, i.e. a shoulder mounted rocket launcher that could mount on the left shoulder, would be icing on the cake.</p>

<p>I&rsquo;d like to work with an iterative process, if you&rsquo;re cool with that.  If you have rough sketches, pass them along.  They&rsquo;ll help with getting a sense for how to layout the composite images in CSS.  This thing doesn&rsquo;t have to be perfect, we can continually refine it as we go.</p>

<p>Communication and coordination to make sure I have the latest versions of your art assets.</p>

<h2>What I&rsquo;ll be working on</h2>

<p>I&rsquo;ll be integrating the generator backend with the frontend, laying out any art assets, and extending the generator as time permits.</p>

<h2>What we&rsquo;ll get</h2>

<p>We&rsquo;ll come out of this with a cool little generator to play with, hopefully creating many hilarious mecha.  Who knows, down the road this could lead to more collaboration between the two of us and/or the generator could serve as a component of a larger mecha game.</p>

<p>In any case, you will get equal billing on the generator itself and all blog posts about the generator.  You will retain all rights to the art you create.  Outside of the generator itself, I would only request to use the art assets in screenshots on the blog and twitter.</p>

<h2>Sound good?</h2>

<p>Sound good?  Let me know on <a href="https://twitter.com/zerosalife">twitter</a>, I&rsquo;m happy to communicate over DMs, in the comments below, or via email (my twitter handle at gmail)!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking GameObjects in Unity Unit Tests]]></title>
    <link href="http://zerosalife.github.io/blog/2015/10/31/mocking-gameobjects-in-unity-unit-tests/"/>
    <updated>2015-10-31T09:03:57-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/10/31/mocking-gameobjects-in-unity-unit-tests</id>
    <content type="html"><![CDATA[<p>A while back, I wrote a post about <a href="http://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/">unit testing in Unity</a>.  In this post, I&rsquo;ll go through a useful pattern to <a href="https://en.wikipedia.org/wiki/Mock_object">mock</a> <code>GameObject</code>s in unit tests.</p>

<!--more-->


<h2>Make a GameObject</h2>

<p>We can create a <code>GameObject</code> inside a test just like we would normally inside a Unity script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">GameObject</span> <span class="n">testGo</span> <span class="p">=</span> <span class="k">new</span> <span class="n">GameObject</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Passing a string to <a href="http://docs.unity3d.com/ScriptReference/GameObject-ctor.html">the <code>GameObject</code> constructor</a> gives the <code>GameObject</code> that name.</p>

<h2>We can even Instantiate prefabs</h2>

<p>Since our test is not inheriting <code>MonoBehaviour</code>, we&rsquo;ll have to call the Instantiate function directly, using the fully qualified namespace.</p>

<p>Remember that prefabs are just stored <code>GameObject</code>s, so we can use the <code>testGo</code> created above as our prefab.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">GameObject</span> <span class="n">go</span> <span class="p">=</span> <span class="n">UnityEngine</span><span class="p">.</span><span class="n">Object</span><span class="p">.</span><span class="n">Instantiate</span><span class="p">(</span><span class="n">testGo</span><span class="p">,</span>
</span><span class='line'>                                               <span class="n">Vector3</span><span class="p">.</span><span class="n">zero</span><span class="p">,</span>
</span><span class='line'>                                               <span class="n">Quaternion</span><span class="p">.</span><span class="n">identity</span><span class="p">)</span> <span class="k">as</span> <span class="n">GameObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Clean up</h2>

<p>We can create <code>GameObject</code>s, but repeatedly running the test leaves our project cluttered up with old objects.  We want our tests to clean up all mocked objects after running.  We&rsquo;ll do that using by using the fully qualified <a href="http://docs.unity3d.com/ScriptReference/Object.DestroyImmediate.html"><code>DestroyImmediate</code> function</a>.</p>

<p>We need to call <code>DestroyImmediate</code> instead of <code>Destroy</code> because the unit tests are running in the editor and delayed destruction won&rsquo;t be invoked.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">UnityEngine</span><span class="p">.</span><span class="n">Object</span><span class="p">.</span><span class="n">DestroyImmediate</span><span class="p">(</span><span class="n">go</span><span class="p">);</span>
</span><span class='line'><span class="n">UnityEngine</span><span class="p">.</span><span class="n">Object</span><span class="p">.</span><span class="n">DestroyImmediate</span><span class="p">(</span><span class="n">testGo</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Mocking is easy</h2>

<p>Following this pattern will give you the ability to mock objects to your hearts&#8217; delight as you unit test your Unity code.  As, always let me know if you have questions, comments, or concerns below or on twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using  LINQ queries and lambda expressions in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/10/17/using-linq-queries-and-lambda-expressions-in-unity-c-sharp/"/>
    <updated>2015-10-17T11:26:32-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/10/17/using-linq-queries-and-lambda-expressions-in-unity-c-sharp</id>
    <content type="html"><![CDATA[<p>Unity&rsquo;s C# environment includes access to .NET&rsquo;s powerful <a href="https://en.wikipedia.org/wiki/Language_Integrated_Query">LINQ querying expressions</a>.  In this post I&rsquo;ll show how to use LINQ expressions to call anonymous functions.</p>

<!--more-->


<h2>Use the lambda</h2>

<p>In the following examples, I&rsquo;ll be using <a href="https://msdn.microsoft.com/en-us/library/bb397687.aspx">lambda expressions</a> to specify anonymous functions that I will pass as arguments to the LINQ expressions.</p>

<p>C# uses the <code>=&gt;</code> symbol as an operator to create lambda expressions.</p>

<p>For example,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>says, create an anonymous function taking a single argument <code>x</code> and return the value of <code>x + 1</code>.</p>

<h2>Increment an array</h2>

<p>Say I want to use my anonymous function to increment an array of counters when a tick passes in my game.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">int</span><span class="p">[]</span> <span class="n">counters</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="p">[]</span> <span class="nf">tick</span><span class="p">(</span><span class="kt">int</span><span class="p">[]</span> <span class="n">counters</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span><span class="p">[]</span> <span class="n">ret</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">counters</span><span class="p">.</span><span class="n">Length</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">counters</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ret</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="n">counters</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">tick</span><span class="p">(</span><span class="n">counters</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I could iterate over the array, incrementing each of the counters one at a time.</p>

<p>Or I could use LINQ expressions to map a function that increments an element over the array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">int</span><span class="p">[]</span> <span class="nf">tick</span><span class="p">(</span><span class="kt">int</span><span class="p">[]</span> <span class="n">counters</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">counters</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">+</span> <span class="m">1</span><span class="p">).</span><span class="n">ToArray</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This approach has the benefit of avoiding an intermediate temporary variable to hold the returned array.  It also avoids potential errors in writing the <code>for</code> statement.  It will never be off by one.</p>

<p>I find the use of higher order functional style, the LINQ expression, easier to read than the imperative style, the <code>for</code> statement.</p>

<p>One final thing to point out is that <code>Select()</code> returns an <code>IEnumerable</code>, so you have to call its <code>.ToArray</code> method to return the proper integer array for the <code>tick</code> function.</p>

<h2>Conclusion</h2>

<p>Check out the <a href="https://gist.github.com/zerosalife/7abc16fb21dfb05dc771">example code on github</a>.</p>

<p>I&rsquo;ve only shown a tiny subset of the <a href="http://www.dotnetperls.com/linq">functionality that LINQ provides</a>.  Feel free to let me know if you dig in and find more useful tips.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symbolic Links to Share Scripts Across Unity Projects]]></title>
    <link href="http://zerosalife.github.io/blog/2015/10/10/symbolic-links-to-share-scripts-across-unity-projects/"/>
    <updated>2015-10-10T13:27:14-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/10/10/symbolic-links-to-share-scripts-across-unity-projects</id>
    <content type="html"><![CDATA[<p>I like to develop utility scripts in a common project where I can implement unit tests without cluttering up my game projects with <a href="https://www.assetstore.unity3d.com/en/#!/content/13802">UnityTestTools</a> and duplicated test scripts.  If you&rsquo;re not sure what unit tests are, check out <a href="http://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/">this post I wrote about them</a>.</p>

<p>To share code between projects I use <a href="https://en.wikipedia.org/wiki/Symbolic_link">symlinks</a> to link the files from my utility project to individual games.</p>

<!--more-->


<p>I&rsquo;m doing development on Mac OS X.  Other platforms may use different commands to create symbolic links.</p>

<pre><code>ln -s [source file] [destination file]
</code></pre>

<p>This command creates a symbolic link to the <code>[source file]</code> at the <code>[destination file]</code>.</p>

<p>That way, my I know my games will always use the up-to-date code.</p>

<h2>git Gotcha</h2>

<p>One caveat is that the symlinked files show up in git version control as a blob of the filepath text instead of the actual code of the file.  This means that the symlinked files will not be tracked in the destination project&rsquo;s version control history.</p>

<p>That&rsquo;s okay with me, because I plan on developing the symlinked files in a separate parallel test project with all of their unit tests, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing in Unity]]></title>
    <link href="http://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/"/>
    <updated>2015-10-03T09:44:58-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity</id>
    <content type="html"><![CDATA[<p>How to use UnityTestTools to create unit tests for Unity CSharp</p>

<!--more-->


<h2>Setting it up</h2>

<p>Download the <a href="https://www.assetstore.unity3d.com/en/#!/content/13802">UnityTestTools package</a> from the Unity Asset Store.</p>

<h2>Import the package</h2>

<p>We are going to need the <code>Common</code>, <code>Assertion</code>, and <code>UnitTesting</code> directories.</p>

<h2>Create a Tests directory</h2>

<p>We need a place for the tests to live.</p>

<p>One important thing to remember is that the scripts in the <code>Tests</code> directory need to be accessible by the <code>UnityTestTools</code> in the Editor so we&rsquo;ll put them in <code>./Tests/Editor/</code>.</p>

<h2>Make a namespace</h2>

<p><code>UnityTestTools</code> will organize our tests by top-level <code>namespace</code> declarations defined in each of the tests&#8217; files.  Then we follow it up with a <code>Category</code> attribute that names the category of tests that live inside the <code>internal class</code> we define in the namespace.</p>

<figure class='code'><figcaption><span>./Tests/Editor/ExampleTests.cs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">ExampleTests</span> <span class="p">{</span>
</span><span class='line'><span class="na">    [Category(&quot;Example Tests&quot;)]</span>
</span><span class='line'>    <span class="k">internal</span> <span class="k">class</span> <span class="nc">ExampleTests</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// tests go here</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Test attributes</h2>

<p>Use the <code>[TestFixture]</code> and <code>[Test]</code> attributes to let the Unity Test Tools Unit Test Runner know where your tests are.</p>

<p>You can also use the <code>[Category]</code> attribute to add semantic labels to your tests.</p>

<h2>Making assertions</h2>

<p>The Testing Framework uses the out of date NUnit version <code>2.2.10</code></p>

<p>For reference see: <a href="http://www.nunit.org/index.php?p=assertions&amp;r=2.2.10">http://www.nunit.org/index.php?p=assertions&amp;r=2.2.10</a></p>

<h2>An example test</h2>

<figure class='code'><figcaption><span>./Tests/Editor/ExampleTests.cs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">ExampleTests</span> <span class="p">{</span>
</span><span class='line'><span class="na">    [Category(&quot;Example Tests&quot;)]</span>
</span><span class='line'>    <span class="k">internal</span> <span class="k">class</span> <span class="nc">ExampleTests</span> <span class="p">{</span>
</span><span class='line'><span class="na">        [Test]</span>
</span><span class='line'>        <span class="k">void</span> <span class="nf">Example</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="m">1</span> <span class="p">+</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Actually run the tests</h2>

<p>Open the Unit Test window from the editor:</p>

<ul>
<li>Click on the <code>Unity Test Tools</code> menu</li>
<li>Select <code>Unit Test Runner</code></li>
</ul>


<p>You can also open the Unit Test Runner window with the keyboard shortcut <code>Alt-Cmd-Shift-U</code> on a Mac.</p>

<p>Simply, click on the <code>Run All</code> button to run the tests.</p>

<h2>Going further</h2>

<p><a href="https://www.assetstore.unity3d.com/en/#!/content/13802">Unity Test Tools</a> has support for Integration tests and assertions in addition to the vanilla unit test I described above.</p>

<p>There are plenty of features that I haven&rsquo;t covered here, so dig in to the examples that come with the Unity Test Tools package and let me know what you&rsquo;ve learned in the comments below or on twitter <a href="http://twitter.com/zerosalife">@zerosalife</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Google Docs for mock-ups]]></title>
    <link href="http://zerosalife.github.io/blog/2015/09/26/using-google-docs-for-mock-ups/"/>
    <updated>2015-09-26T08:40:47-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/09/26/using-google-docs-for-mock-ups</id>
    <content type="html"><![CDATA[<p><a href="https://www.google.com/docs/about/">Google Docs</a> is great for mock-ups.  But one major drawback is that <a href="http://drawings.google.com">Google Drawings</a> doesn&rsquo;t support animation or multiple pages.  Luckily, the same suite of tools is available in Google&rsquo;s <a href="https://www.google.com/slides/about/">Slides app</a>.</p>

<!--more-->


<h2>My workflow</h2>

<p>Since I&rsquo;m not a big fan of the cluttered Slides interface, I sketch my mock-ups in Draw and copy them over to Slides.</p>

<p>Using this approach, I rapidly iterate on mock-ups in Draw while keeping a record of the good looking ones as slides in Slides.  As a bonus, I can then shuffle the order of the slides to animate dynamic designs.</p>

<p>I find that this workflow is in keeping with <a href="http://draplin.com/">Draplin Design Co.</a> owner <a href="https://vimeo.com/113751583">Aaron Draplin&rsquo;s design philosophy</a>: space is cheap, so feel free to experiment and keep everything because you never know what will influence the final design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What defines a game?]]></title>
    <link href="http://zerosalife.github.io/blog/2015/09/19/what-defines-a-game/"/>
    <updated>2015-09-19T09:03:24-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/09/19/what-defines-a-game</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve done it.</p>

<p>I&rsquo;ve fallen prey to the temptation to write a ham-fisted article demarking what is, and what isn&rsquo;t, a game&mdash;and I&rsquo;m not even part of the demographic that <a href="https://twitter.com/tgdfweb">Pat Holleman</a> eloquently calls out in the following tweets.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p lang="en" dir="ltr">I seriously don&#39;t get it. Why are all white male designers over 35 driven to say what is and isn&#39;t a game? What does that accomplish?</p>&mdash; Pat Holleman (@tgdfweb) <a href="https://twitter.com/tgdfweb/status/624753749521645568">July 25, 2015</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>




<div class='embed tweet'><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Do you play something? It&#39;s either a game, an instrument, or a character.  If it&#39;s not an instrument or a role, it&#39;s a game.</p>&mdash; Pat Holleman (@tgdfweb) <a href="https://twitter.com/tgdfweb/status/624753990555709440">July 25, 2015</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>I think Holleman&rsquo;s definition captures the essence of what <a href="http://zerosalife.github.io/blog/2015/07/18/satoru-iwata/">Iwata was talking about</a>.  Games are play.  Play is fun.</p>

<p>Don&rsquo;t overthink it.  You won&rsquo;t invent an argument that is new or constructive.</p>

<p>Everything doesn&rsquo;t have to fit in a tiny box of your arbitrary creation.  There is a use for lumping things together in useful ways but for the most part this kind tedious of genre-parsing is not constructive.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cheeky Tinted Blobs: a procedurally generated Unity 2D background]]></title>
    <link href="http://zerosalife.github.io/blog/2015/09/12/cheeky-tinted-blobs/"/>
    <updated>2015-09-12T09:47:50-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/09/12/cheeky-tinted-blobs</id>
    <content type="html"><![CDATA[<p>I&rsquo;m following along with <a href="https://twitter.com/pentadact">@pentadact</a>&rsquo;s tutorial video <a href="https://youtu.be/I5qxIhdEx28?t%3D1m33s">here</a> (You can see the finished result around 6 minutes into the video).</p>

<p><img class="center" src="http://zerosalife.github.io/images/assets/tinted-blobs-screenshot.png" width="1434" height="1434"></p>

<!--more-->


<h2>The goal</h2>

<p>What we want to do here is to generate a splotchy blurred out nebular (-lous?)  background.  Without going into to too much detail, I&rsquo;m interested in something that would go well underneath a procedurally generated space station map.</p>

<h2>The algorithm</h2>

<p>The algorithm <a href="https://twitter.com/pentadact">@pentadact</a> describes works like this:</p>

<ol>
<li>Draw a faint white <strong>blob</strong></li>
<li>Tint the <strong>blob</strong> one of two randomly generated <strong>colors</strong></li>
<li>Randomly place the tinted <strong>blobs</strong></li>
</ol>


<h2>How it works</h2>

<p>The blobs are white, which is represented in RGB color as 100% in all three values (black is 0%).  This corresponds to 255 in 8-bit colorspace and <code>1.0</code> in Unity&rsquo;s colorspace.  Since the blobs are faint, the actual RGB values will approach, but not reach 100%.</p>

<p>When we apply a tint to the blobs&#8217; sprites we are essentially multiplying each of the RGB values by our desired color&rsquo;s value.  The resulting value will approach the full <em>intensity</em> of the color as our raw blob approaches 100% white, if that makes sense.  So the result is a faint blob of any desired color we want.</p>

<p>The colored blobs overlap each other, generating interesting patterns of lighter and darker mixtures of the two colors.</p>

<h2>Blobonia</h2>

<p>I fired up my favorite image editing program and made a 256 x 256 <code>png</code> blob sprite.  Using the airbrush tool, I plopped a blob in the middle of the canvas.</p>

<p>The settings I used were:</p>

<ul>
<li>128 pixel diameter

<ul>
<li>To avoid any artifacts around the edges of the canvas</li>
</ul>
</li>
<li>Very soft hardness

<ul>
<li>To avoid sharp edges</li>
</ul>
</li>
<li>20% opacity

<ul>
<li>To help with blending later on</li>
</ul>
</li>
</ul>


<h2>Setting the scene, blob prefab</h2>

<p>Back in Unity, create a fresh 2D project and imported the blob sprite.  We drag the sprite into the scene to create a <code>GameObject</code> with the blob sprite.</p>

<p>We then add a <code>Sorting Layer</code> named <code>Blobs</code> and set the sprite&rsquo;s sorting layer to <code>Blobs</code>.  While we&rsquo;re at it, we also create a sorting layer named <code>BG</code> behind the <code>Blobs</code> layer for the background.</p>

<p>We name the <code>GameObject</code> <code>Blob</code> and drag it to the <code>Prefabs</code> directory, creating a prefab from it.</p>

<p>Blob prefab in hand, we still needed a couple more pieces to prepare the scene.</p>

<h2>Backdrop</h2>

<p>We create a black <code>Background</code> UI object and set the <code>X scale</code> and <code>Y scale</code> to <code>1000</code>, to be sure Background covered the whole screen.  We then set the sorting layer of the sprite to <code>BG</code>.  Remember how we set that layer up earlier?  How prescient!</p>

<h2>One GameObject To Hold Them All</h2>

<p>We&rsquo;re planning to create a whole metric ton of blobs, so we create a <code>Blobs</code> <code>GameObject</code> to hold all of the blobs.  By setting the instantiated blob&rsquo;s <code>transform.parent</code> to the <code>Blobs.transform</code> all of the instantiated blobs fall under the parent <code>Blobs</code> <code>GameObject</code> and it keeps the Hierarchy in our Scene nice and tidy.</p>

<h2>BlobGen</h2>

<p>We have a background, a Blob prefab and even a <code>GameObject</code> that will hold all of the blobs we plan to create. Now we just need to make a <code>BlobGenerator</code> script to randomly place the blobs.</p>

<p>The <code>BlobGenerator</code> takes a reference to the Blob <code>Prefab</code>, a reference to the parent Blobs <code>GameObject</code>, an integer number of blobs to create, and maximum and minimum coordinates to control the spread of the created blobs.</p>

<p>The <code>BlobGenerator</code> generates two random colors using a function called <code>RandomColor</code>,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Color</span> <span class="nf">RandomColor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">Color</span><span class="p">(</span><span class="n">Random</span><span class="p">.</span><span class="k">value</span><span class="p">,</span> <span class="n">Random</span><span class="p">.</span><span class="k">value</span><span class="p">,</span> <span class="n">Random</span><span class="p">.</span><span class="k">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which it then zips up into an array called <code>colors</code>.  <code>Random.value</code> returns a random <code>float</code> between <code>0.0</code> and <code>1.0</code>, which we use to generate a new <code>Color</code>.</p>

<p>Then the <code>BlobGenerator</code> gets into the main routine, <code>PlaceBlobs</code>.</p>

<p>Briefly, <code>PlaceBlobs</code> instantiates clones of the blob prefab at random positions within the maximum and minimum boundaries we specify, makes the cloned blob a child of the parent Blobs <code>GameObject</code>, and sets the color tint of the cloned blob to one of the two colors generated above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">void</span> <span class="nf">PlaceBlobs</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">numberOfBlobs</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">GameObject</span> <span class="n">blockClone</span> <span class="p">=</span> <span class="n">Instantiate</span><span class="p">(</span><span class="n">blobPrefab</span><span class="p">,</span>
</span><span class='line'>                                            <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">Random</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="n">xMin</span><span class="p">,</span> <span class="n">xMax</span><span class="p">),</span>
</span><span class='line'>                                                        <span class="n">Random</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="n">yMin</span><span class="p">,</span> <span class="n">yMax</span><span class="p">),</span>
</span><span class='line'>                                                        <span class="m">0f</span><span class="p">),</span>
</span><span class='line'>                                            <span class="n">Quaternion</span><span class="p">.</span><span class="n">identity</span><span class="p">)</span> <span class="k">as</span> <span class="n">GameObject</span><span class="p">;</span>
</span><span class='line'>        <span class="n">SpriteRenderer</span> <span class="n">sprite</span> <span class="p">=</span> <span class="n">blockClone</span><span class="p">.</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">SpriteRenderer</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">blockClone</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">parent</span> <span class="p">=</span> <span class="n">blobs</span><span class="p">.</span><span class="n">transform</span><span class="p">;</span>
</span><span class='line'>        <span class="n">sprite</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="n">colors</span><span class="p">[</span><span class="n">Random</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">colors</span><span class="p">.</span><span class="n">Length</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all there is to it.  You can check out the full example project on <a href="https://github.com/zerosalife/tint-background">github</a>.</p>

<h2>Moving forward</h2>

<p>It would be nice to have more fine-grained control over the local density of the blobs in certain regions, so the map would become a little less uniform, creating pockets of character in an otherwise featureless space.  But I think the effect here works nice as a background.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using images in Octopress posts]]></title>
    <link href="http://zerosalife.github.io/blog/2015/08/29/using-images-in-octopress-posts/"/>
    <updated>2015-08-29T17:20:05-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/08/29/using-images-in-octopress-posts</id>
    <content type="html"><![CDATA[<h2>Storing the images</h2>

<p>I store images in <code>./images/assets/</code> in my Octopress install directory.  They get bundled up with all the other parts of my blog when I deploy.</p>

<h2>The Octopress image tag</h2>

<p>I use the <a href="http://octopress.org/docs/plugins/image-tag/">Octopress image tag</a></p>

<p>The syntax is:</p>

<pre><code>{[%] img [class names] /path/to/image [width] [height] [title text [alt text]] [%]}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# code blocks in Octopress]]></title>
    <link href="http://zerosalife.github.io/blog/2015/08/15/c-sharp-code-blocks-in-octopress/"/>
    <updated>2015-08-15T08:59:19-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/08/15/c-sharp-code-blocks-in-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">Octopress</a> supports <a href="http://octopress.org/docs/plugins/backtick-codeblock/">backtick code blocks</a> with <a href="http://pygments.org/docs/lexers/">Pygment lexers</a> handling syntax highlighting.  I always forget the syntax for using with bactick codeblocks with C#, leading to irritating failures when I build my Octopress blog.  Here&rsquo;s how you use them.</p>

<pre><code>``` csharp
[csharp code here]
```
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trace function for debugging in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/07/25/trace-function-for-debugging-in-unity-c-sharp/"/>
    <updated>2015-07-25T09:00:31-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/07/25/trace-function-for-debugging-in-unity-c-sharp</id>
    <content type="html"><![CDATA[<p>Inspired by <a href="https://www.youtube.com/watch?v=btN095elmh4&amp;feature=youtu.be&amp;t=1985">a video from the excellent Double Fine Documentary interviews with Massive Chalice artists and developers</a>, I wanted to come up with a way of conditionally including debug statements in development code, but not in production.  Luckily I wasn&rsquo;t the first person to think of this.</p>

<p><a href="https://twitter.com/danpuzey">Dan Puzey</a> <a href="http://blog.puzey.net/simple-better-unity-logging/">wrote an abstraction layer</a> over Unity&rsquo;s built-in <code>Debug</code> library.  The library contains several functions for various types of logging.  The most important piece for me is <code>VerboseFormat</code>, which combines string formatting with conditional attributes.  I&rsquo;ll explain a bit more about how these pieces work below.</p>

<!--more-->


<h2>String Formatting</h2>

<p>To my surprise, Unity&rsquo;s C# implementation, Mono, doesn&rsquo;t use standard <code>printf</code>-like string formatting syntax.  Instead of <code>%s</code> or other commonly used formatting variables, C# uses curly braces around numbers to interpolate variables passed in to the <code>String.Format</code> call as arguments.</p>

<p>Dan&rsquo;s <code>VerboseFormat</code> function wraps <code>String.Format</code>, so you can call <code>VerboseFormat</code> with C# formatting strings.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">Assets.Phunk.Core</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">Log</span><span class="p">.</span><span class="n">VerboseFormat</span><span class="p">(</span><span class="s">&quot;var1: {0}, var2: {1}&quot;</span><span class="p">,</span> <span class="n">var1</span><span class="p">,</span> <span class="n">var2</span><span class="p">);</span>
</span><span class='line'><span class="c1">// =&gt; [VERBOSE] var1: [var1], var2: [var2]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conditional Attributes</h2>

<p>Above some of the functions in Dan&rsquo;s code you&rsquo;ll see the following <a href="https://msdn.microsoft.com/en-us/library/system.diagnostics.conditionalattribute%28v=vs.110%29.aspx">conditional attributes</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[System.Diagnostics.Conditional(&quot;DEBUG&quot;), System.Diagnostics.Conditional(&quot;UNITY_EDITOR&quot;)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>These two settings tell the C# compiler to only compile the code, in this case the <code>Verbose</code> logging functions, when compiling during development, i.e. <code>DEBUG</code> or <code>UNITY_EDITOR</code>.  That means all of the <code>Verbose</code> logging statements in your code will not be compiled in the production builds of your code.</p>

<p>Cool, huh?  Good thinking, Dan.</p>

<h2>That&rsquo;s it!</h2>

<p>It&rsquo;s always great when you think that a tool would be useful and someone else has already implemented it for you.  Go on over and give <a href="http://puzey.net/">Dan&rsquo;s blog</a> a gander.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Satoru Iwata]]></title>
    <link href="http://zerosalife.github.io/blog/2015/07/18/satoru-iwata/"/>
    <updated>2015-07-18T16:09:30-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/07/18/satoru-iwata</id>
    <content type="html"><![CDATA[<blockquote><p>Video games are meant to be just one thing. Fun. Fun for everyone.</p></blockquote>

<p>&#x2013; Satoru Iwata, 1959-2015</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Probabilistic entity spawning in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/07/11/probabilistic-entity-spawning-in-unity-c-sharp/"/>
    <updated>2015-07-11T17:03:55-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/07/11/probabilistic-entity-spawning-in-unity-c-sharp</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript/">Last week</a> I showed how to do probabilistic entity spawning in Unity JS.  This week I&rsquo;ll port that code over to C#.  You can find examples of both the C# and JavaScript versions of the code in a <a href="https://github.com/zerosalife/ProbEntitySpawnExample">repository on github</a>.  Since I&rsquo;ve already explained the Algorithm I will focus mainly on the differences in the code.</p>

<p>There isn&rsquo;t syntactic sugar for Dictionary assignment in C# :( This required moving the assignment for the <code>areas</code> Dictionary into the <code>Start</code> function.  It&rsquo;s a move that enforces best practices, strictly speaking, but risks confusion about the content of the <code>areas</code> Dictionary at runtime.  If you&rsquo;d like to read up on Dictionaries in C#, I found <a href="https://msdn.microsoft.com/en-us/library/fkbw11z0.aspx">this resource</a> helpful.</p>

<p>The <code>foreach</code> command requires a type. This is a case where a stricter language will save confusion in the long run.</p>

<p>Lists can be created from specific arrays of the List&rsquo;s type, but not from some arbitrary array, as in JavaScript.  Again, this is a feature of a stricter language that causes some extra work up-front, but will make things more clear in the long run.</p>

<p>For an in-depth tour of the algorithm for spawning entities, check out <a href="http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript/">last week&rsquo;s post</a> and the <a href="https://github.com/zerosalife/ProbEntitySpawnExample">example repository on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Probabilistic Entity Spawning in Unity JavaScript]]></title>
    <link href="http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript/"/>
    <updated>2015-07-04T09:56:33-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript</id>
    <content type="html"><![CDATA[<p>The Unity documentation has an example showing how to generate random indexes satisfying a distribution of probabilities (see: <a href="http://docs.unity3d.com/Manual/RandomNumbers.html">Choosing Items with Different Probabilities</a>).  In this post I&rsquo;ll show how to use a similar approach to generate random items with specific probabilities dictated by the environment.</p>

<!--more-->


<p>I want to be able to generate an item code, say <code>Red</code>, <code>Green</code>, or <code>Black</code>, given a list of floating point probabilities dictated by the current environmental area in my game, say for example <code>desert</code> or <code>grassland</code>.</p>

<p>Varying the probability of encountering items will give each area a unique flavor.  If the player needs a <code>Red</code> item, the player will need to seek out areas in which the probability for encountering <code>Red</code> items is high.  I hope this will drive player exploration and investigation.</p>

<p>I&rsquo;ll start by defining an array of possible item types.  (According to <a href="http://wiki.unity3d.com/index.php/Head_First_into_Unity_with_UnityScript#Use_enum">this introduction to Unity JavaScript</a>, I should prefer <code>enum</code>.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">ents</span> <span class="o">:</span> <span class="nb">String</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;Red&quot;</span><span class="p">,</span> <span class="s2">&quot;Green&quot;</span><span class="p">,</span> <span class="s2">&quot;Black&quot;</span><span class="p">,</span> <span class="s2">&quot;Orange&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since this is a small example, I&rsquo;ll forego the efficiency and security that <code>enum</code>s provide for the convenience of using a simple <code>String</code> array.  I&rsquo;ll note that this is a good spot to do some refactoring in a real project where a variety of systems may have to interact with the item types.</p>

<p>I then define a Dictionary <code>areas</code> of Lists of floating point probabilities.  These areas correspond to terrains that contain unique distributions of items. The <code>areas</code> Dictionary accepts <code>String</code>s specifying the desired terrain.</p>

<p>It&rsquo;s important to note that the order of the probabilities correspond to the order of the item types in <code>ent</code>s.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">areas</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dictionary</span><span class="p">.</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span> <span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">float</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'><span class="nx">areas</span><span class="p">[</span><span class="s2">&quot;desert&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">float</span><span class="o">&gt;</span><span class="p">([</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.425</span><span class="p">,</span> <span class="mf">0.425</span><span class="p">]);</span>
</span><span class='line'><span class="nx">areas</span><span class="p">[</span><span class="s2">&quot;grassland&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">float</span><span class="o">&gt;</span><span class="p">([</span><span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.35</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, in the <code>grassland</code> area, there will be a 30% chance of choosing a <code>Red</code> item.</p>

<p>Now that I&rsquo;ve defined the data, I need a function to choose the appropriate index given a List of probabilities.  This function is lifted with minor modifications from the <a href="http://docs.unity3d.com/Documentation/Manual/RandomNumbers.html">Unity Documentation</a>.  Take a look at that documentation for a better visualization of the algorithm than I could do with words.  Really, do it!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Choose</span><span class="p">(</span><span class="nx">probs</span> <span class="o">:</span> <span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">float</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">:</span> <span class="kr">int</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Returns the index of a probabilistically determined random</span>
</span><span class='line'>    <span class="c1">// entity, given by the probability distributions in probs.</span>
</span><span class='line'>    <span class="c1">// e.g.:</span>
</span><span class='line'>    <span class="c1">// probs : List.&lt;float&gt;([0.5, 0.2, 0.1, 0.2]);</span>
</span><span class='line'>    <span class="c1">// entity = entities[Choose(probs)];</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>    <span class="c1">// See http://docs.unity3d.com/Documentation/Manual/RandomNumbers.html</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Watch out!  If you fail to specify total&#39;s type as float, it</span>
</span><span class='line'>    <span class="c1">// will add the probs using integer addition.  This will floor</span>
</span><span class='line'>    <span class="c1">// each of the probs to 0.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">total</span> <span class="o">:</span> <span class="kr">float</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="k">in</span> <span class="nx">probs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">total</span> <span class="o">+=</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">randomPoint</span> <span class="o">=</span> <span class="nx">Random</span><span class="p">.</span><span class="nx">value</span> <span class="o">*</span> <span class="nx">total</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">probs</span><span class="p">.</span><span class="nx">Count</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">randomPoint</span> <span class="o">&lt;</span> <span class="nx">probs</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="c1">// Shift the strip down, adjusting the random point&#39;s</span>
</span><span class='line'>            <span class="c1">// value to see whether it falls within the next prob.</span>
</span><span class='line'>            <span class="nx">randomPoint</span> <span class="o">-=</span> <span class="nx">probs</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// Take care of possibility that randomPoint is 1.0 or 100% by</span>
</span><span class='line'>    <span class="c1">// returning the last element of probs.  Avoids allowing Choose to</span>
</span><span class='line'>    <span class="c1">// return a 0 probability event (which would be possible using the</span>
</span><span class='line'>    <span class="c1">// &lt;= test).</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">probs</span><span class="p">.</span><span class="nx">Count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now to choose an item:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">ents</span><span class="p">[</span><span class="nx">Choose</span><span class="p">(</span><span class="nx">areas</span><span class="p">[</span><span class="s2">&quot;grassland&quot;</span><span class="p">])];</span>
</span><span class='line'><span class="nx">Debug</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all there is to it. I&rsquo;ve put an <a href="https://github.com/zerosalife/ProbEntitySpawnExample">example Unity project with this code on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Dictionary of Lists in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/06/20/create-a-dictionary-of-lists-in-unity-c-sharp/"/>
    <updated>2015-06-20T11:16:28-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/06/20/create-a-dictionary-of-lists-in-unity-c-sharp</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/blog/2015/06/13/creating-a-dictionary-of-lists-in-unity-javascript/">Last week</a>, I published an article about creating a Dictionary of Lists in Unity using Unity&rsquo;s JavaScript.  Some of the syntax is changed in C#, but the overall algorithm is exactly the same.  I&rsquo;ve already mentioned the underlying motive, so I&rsquo;ll dive right in.</p>

<!--more-->


<p>Here&rsquo;s how to create a Dictionary of Lists in C# for Unity.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;&gt;</span> <span class="n">table</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nf">Start</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Fill our table with Lists containing ints using Arrays to intialize</span>
</span><span class='line'>    <span class="c1">// the Lists.</span>
</span><span class='line'>    <span class="n">table</span><span class="p">[</span><span class="s">&quot;a&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(){</span><span class="m">1</span><span class="p">};</span>
</span><span class='line'>    <span class="n">table</span><span class="p">[</span><span class="s">&quot;b&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(){</span><span class="m">2</span><span class="p">};</span>
</span><span class='line'>    <span class="n">table</span><span class="p">[</span><span class="s">&quot;c&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(){</span><span class="m">3</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="kt">string</span> <span class="n">str</span> <span class="k">in</span> <span class="n">table</span><span class="p">.</span><span class="n">Keys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Get the value for our Key.</span>
</span><span class='line'>        <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="k">value</span> <span class="p">=</span> <span class="n">table</span><span class="p">[</span><span class="n">str</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If the Key is the desired Key, append to its list.</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">str</span> <span class="p">==</span> <span class="s">&quot;c&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">value</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="m">4</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// print the first item in each of the Lists.</span>
</span><span class='line'>        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="k">value</span><span class="p">[</span><span class="m">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Print the appended item to see that it worked.</span>
</span><span class='line'>    <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="s">&quot;c&quot;</span><span class="p">][</span><span class="m">1</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>These are the main differences between the Unity JavaScript and C# code.  Take a look at the full file in a <a href="https://gist.github.com/zerosalife/e3882aa5ffd5dd614c9a">gist on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Dictionary of Lists in Unity JavaScript]]></title>
    <link href="http://zerosalife.github.io/blog/2015/06/13/creating-a-dictionary-of-lists-in-unity-javascript/"/>
    <updated>2015-06-13T11:14:25-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/06/13/creating-a-dictionary-of-lists-in-unity-javascript</id>
    <content type="html"><![CDATA[<p>I ran into a few problems trying to create a <a href="http://wiki.unity3d.com/index.php?title%3DWhich_Kind_Of_Array_Or_Collection_Should_I_Use%253F#Generic_Dictionary">Dictionary</a> of <a href="http://wiki.unity3d.com/index.php?title%3DWhich_Kind_Of_Array_Or_Collection_Should_I_Use%253F#Generic_List">Lists</a> in Unity JavaScript.  So I thought I&rsquo;d share some of the tips I learned here.</p>

<!--more-->


<p>I&rsquo;m interested in creating a Dictionary to hold <a href="http://en.wikipedia.org/wiki/Markov_chain#Markov_text_generators">Markov Chain information</a> in order to generate text.  So I&rsquo;d like to be able to create a Dictionary holding a variable length of items for each of its Keys.  I&rsquo;d also like to be able to update the mapping at runtime.</p>

<p>It would look something like this:</p>

<ul>
<li><strong>Key1:</strong> Item1, Item2, Item3</li>
<li><strong>Key2:</strong> Item4</li>
</ul>


<p>At runtime, I&rsquo;d like to be able to say: &ldquo;Append <code>Item5</code> to <code>Key2</code>.&rdquo;</p>

<p>Here&rsquo;s what I came up with in Unity JavaScript.  I started out by initializing a <code>table</code> in my script prior to the <code>Start</code> function. The var <code>table</code> holds our mapping of Keys of type <code>String</code> to Values of type <code>List.&lt;int&gt;</code>, or Lists of integers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">System</span><span class="p">.</span><span class="nx">Collections</span><span class="p">.</span><span class="nx">Generic</span><span class="p">;</span>
</span><span class='line'><span class="c1">// White space matters.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">table</span><span class="o">:</span><span class="nx">Dictionary</span><span class="p">.</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dictionary</span><span class="p">.</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">int</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first hiccup I ran into is that <a href="http://forum.unity3d.com/threads/80227-Creating-a-Dictionary-of-Lists-in-Javascript?p%3D513471&amp;viewfull%3D1#post513471">white space matters</a> when creating Generics in Unity JavaScript.  The compiler will throw an error if it sees two <code>&gt;&gt;</code> in a row.</p>

<p>Then I fill the table with our test mappings.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Fill our table with Lists containing ints using Arrays to intialize</span>
</span><span class='line'><span class="c1">// the Lists.</span>
</span><span class='line'><span class="nx">table</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">int</span><span class="o">&gt;</span><span class="p">([</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="nx">table</span><span class="p">[</span><span class="s2">&quot;b&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">int</span><span class="o">&gt;</span><span class="p">([</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="nx">table</span><span class="p">[</span><span class="s2">&quot;c&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">int</span><span class="o">&gt;</span><span class="p">([</span><span class="mi">3</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, you can <a href="http://answers.unity3d.com/questions/221476/javascript-array-to-generic-list.html">construct a List from an Array</a>.  Cool.</p>

<p>In the <code>Start</code> function, I iterate over the Keys in the Dictionary, Add the item <code>4</code> to the Value of Key <code>c</code>, and print out the first item of each of the <code>values</code>.  Finally, we check to see whether <code>4</code> was appended to the desired entry.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Start</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Iterate over the Keys in our Dictionary.</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">str</span><span class="o">:</span><span class="nb">String</span> <span class="k">in</span> <span class="nx">table</span><span class="p">.</span><span class="nx">Keys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Get the value for our Key.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">value</span><span class="o">:</span><span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">int</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nx">table</span><span class="p">[</span><span class="nx">str</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If the Key is our desired Key, append to its list.</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">str</span> <span class="o">==</span> <span class="s2">&quot;c&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">value</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Print the first item in each of the Lists.</span>
</span><span class='line'>        <span class="nx">print</span><span class="p">(</span><span class="nx">value</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Print the appended item to see that it worked.</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">table</span><span class="p">[</span><span class="s2">&quot;c&quot;</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I attach this script to the Main Camera of a fresh Scene for testing purposes.  Bada bing, bada boom.</p>

<p>Attaching the script to any old object in the scene would work.  I just chose the Main Camera because the camera object is there by default.</p>

<p>This was all relatively straightforward, after I understood some of the quirks of Unity&rsquo;s JavaScript syntax.  You can find an example script using this code <a href="https://gist.github.com/zerosalife/f13eb62bf7bd57799db6">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prototyping Rectangles in Unity 2D for Dummy]]></title>
    <link href="http://zerosalife.github.io/blog/2015/05/30/prototyping-rectangles-in-unity-2d-for-dummy/"/>
    <updated>2015-05-30T09:57:58-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/05/30/prototyping-rectangles-in-unity-2d-for-dummy</id>
    <content type="html"><![CDATA[<p>Who&rsquo;s &ldquo;Dummy&rdquo;? I&rsquo;m the dummy.  Prototyping with 2d boxes in Unity JavaScript has proven surprisingly hard.  I think the difficulty I&rsquo;m having is that I&rsquo;m not exactly sure what I&rsquo;m trying to do.  What follows is an example of <strong>one</strong> way (notice that I didn&rsquo;t say THE <strong>RIGHT</strong> WAY) to prototype with 2d rectangles in Unity.  I&rsquo;m still too much of a noob to have strong opinions on the right way to go about doing this.  Expect more posts on this topic as I develop my expertise.</p>

<p><a href="http://en.wikipedia.org/wiki/Discoverability">Discoverability</a> is something I prize in programming languages and environments, especially when I&rsquo;m learning them.  While Unity&rsquo;s documentation is thorough, the lack of congruence between the GUI environment and coding leads to poor discoverability.  There&rsquo;s not a one-to-one correspondence between the labels for <code>Components</code> in the GUI inspector and their names and attributes in code.</p>

<!--more-->


<p>Most of the time, Google is my method for discovering new functionality in Unity.  The problem with this method, and even the documentation, is that I&rsquo;m never quite sure if the solution I&rsquo;ve found is the best solution, the only way to do something, or the wrong way to do something.</p>

<p>I&rsquo;m trying to get simple rectangular boxes to work in Unity 2d for prototyping movement, hitboxes for attacks, etc.  The information I can find either deals with real-deal-Holyfield sprites or <code>GUIBoxes</code>.</p>

<p>It will be nice to work with <code>Sprites</code> eventually, but I just want to get a box that can walk around and jump, at this point.  <code>GUIBoxes</code> seem like the wrong type of boxes, if I want to prototype something that will eventually be a <code>Sprite</code>.</p>

<p>As near as I can tell, the <code>Sprite</code> is a (relatively) new way of making a flat 2D <code>Plane</code> in Unity.  I couldn&rsquo;t seem to find anything dealing with <code>Sprites</code> without creating them in the Unity GUI interface.</p>

<p>So, I started out following a Unity Answers question <a href="http://answers.unity3d.com/questions/139808/creating-a-plane-mesh-directly-from-code.html">here</a>.</p>

<h2>Getting the Mesh to gel</h2>

<p>First, I created a brand-spankin new Unity 2D project.  I had to create an empty <code>GameObject</code> to host my <code>PlaneTest.js</code> script <code>Component</code>.  I included a variable <code>size</code> to control the size of the box, so you can play around with that in the Editor interface.</p>

<p>Next, I had to create a <code>Mesh</code> that would be the actual geometry of the plane.  Now, the <code>Mesh</code> I&rsquo;m making differs from the stock Unity <code>Plane</code> <code>GameObject</code>.  <a href="http://www.third-helix.com/2012/02/making-2d-games-with-unity/">This blog post</a> shows that Unity&rsquo;s <code>Plane</code> defaults to a 10 x 10 quad mesh with a couple hundred triangles.  A quad is just a square made of two triangle faces, <a href="http://blog.nobel-joergensen.com/2010/12/25/procedural-generated-mesh-in-unity/">this blog post</a> goes into more detail.</p>

<p>Here we <a href="http://i.eho.st/pgtxqdii.gif">do it live</a> by defining a <code>name</code> <code>String</code>, an <code>array</code> of <code>Vector3</code> <code>vertices</code>, an <code>array</code> of <code>uv</code> texture coordinates, and an <code>array</code> of <code>triangles</code> faces.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">m</span><span class="o">:</span> <span class="nx">Mesh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mesh</span><span class="p">();</span>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Scripted_Plane_New_Mesh&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">vertices</span> <span class="o">=</span> <span class="p">[</span><span class="nx">Vector3</span><span class="p">(</span><span class="o">-</span><span class="nx">size</span><span class="p">,</span> <span class="o">-</span><span class="nx">size</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">),</span>
</span><span class='line'>              <span class="nx">Vector3</span><span class="p">(</span><span class="nx">size</span><span class="p">,</span> <span class="o">-</span><span class="nx">size</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">),</span>
</span><span class='line'>              <span class="nx">Vector3</span><span class="p">(</span><span class="nx">size</span><span class="p">,</span> <span class="nx">size</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">),</span>
</span><span class='line'>              <span class="nx">Vector3</span><span class="p">(</span><span class="o">-</span><span class="nx">size</span><span class="p">,</span> <span class="nx">size</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">)];</span>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">uv</span> <span class="o">=</span> <span class="p">[</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">triangles</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>               <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Who you calling normal?</h2>

<p>At one point I thought I had to <code>RecalculateNormals</code>, according to the Unity Answers example above.  But it doesn&rsquo;t seem to make a difference.  Here&rsquo;s a great example of the Unity discoverability problem.  Since it doesn&rsquo;t <em>seem</em> to make a difference, I don&rsquo;t know whether to trust the Unity Answers that received 5 upvotes or to go with parsimony.</p>

<p>A little more digging <a href="http://forum.unity3d.com/threads/210399-4-3-Sprites-and-Lighting">reveals</a> that normal maps are particularly important for lighting.  Since the <code>Sprite Shader</code> I intend to use doesn&rsquo;t use normal maps, we can leave it out.</p>

<h2>OBJECTION!!</h2>

<p>Time to create the <code>GameObject</code> that will hold a <code>MeshRenderer</code>, <code>MeshFilter</code>, and <code>MeshCollider</code>.  According to the <a href="http://docs.unity3d.com/Documentation/Components/class-MeshFilter.html">docs</a>, a <code>MeshFilter</code> takes a mesh, like the one we created above, and passes it to the <code>MeshRenderer</code> for rendering to the screen.  Not sure what it&rsquo;s <em>filtering</em> or why there&rsquo;s an intermediate <code>Component</code>, but there you go.</p>

<p>The <a href="http://docs.unity3d.com/Documentation/Components/class-MeshRenderer.html">docs</a> say the <code>MeshRenderer</code> then takes the geometry from the <code>MeshFilter</code> and renders it on the screen at the position defined by the <code>GameObject</code>&rsquo;s <code>Transform</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">obj</span><span class="o">:</span> <span class="nx">GameObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GameObject</span><span class="p">(</span><span class="s2">&quot;New_Plane_From_Script&quot;</span><span class="p">,</span>
</span><span class='line'>                                     <span class="nx">MeshRenderer</span><span class="p">,</span>
</span><span class='line'>                                     <span class="nx">MeshFilter</span><span class="p">,</span>
</span><span class='line'>                                     <span class="nx">MeshCollider</span><span class="p">);</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">GetComponent</span><span class="p">(</span><span class="nx">MeshFilter</span><span class="p">).</span><span class="nx">mesh</span> <span class="o">=</span> <span class="nx">m</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Time for texture</h2>

<p>Next we create a <code>Texture2D</code> to hold the color information, to really give the box some panache.  The <code>Texture2D</code> goes into the <code>MeshRenderer</code>&rsquo;s <code>mainTexture</code> slot.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">texture</span><span class="o">:</span> <span class="nx">Texture2D</span><span class="p">;</span>
</span><span class='line'><span class="nx">texture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Texture2D</span><span class="p">(</span><span class="nx">size</span><span class="p">,</span> <span class="nx">size</span><span class="p">,</span> <span class="nx">TextureFormat</span><span class="p">.</span><span class="nx">ARGB4444</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">renderer</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">mainTexture</span> <span class="o">=</span> <span class="nx">texture</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I don&rsquo;t know too much about how <code>Texture2D</code> works right now, but there&rsquo;s plenty to read in the <a href="http://docs.unity3d.com/Documentation/ScriptReference/Texture2D.html">docs</a>.</p>

<h2>A splash of color</h2>

<p>Here we generate some random RGB values, normalize them for Unity&rsquo;s <code>0.0-1.0</code> colorspace and make a <code>Color</code> to put into the <code>MeshRenderer</code>&rsquo;s color slot.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">red</span><span class="o">:</span> <span class="kr">float</span> <span class="o">=</span> <span class="nx">Random</span><span class="p">.</span><span class="nx">Range</span><span class="p">(</span><span class="mi">63</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span> <span class="o">/</span> <span class="mi">255</span><span class="nx">f</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">green</span><span class="o">:</span> <span class="kr">float</span> <span class="o">=</span> <span class="nx">Random</span><span class="p">.</span><span class="nx">Range</span><span class="p">(</span><span class="mi">63</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span> <span class="o">/</span> <span class="mi">255</span><span class="nx">f</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blue</span><span class="o">:</span> <span class="kr">float</span> <span class="o">=</span> <span class="nx">Random</span><span class="p">.</span><span class="nx">Range</span><span class="p">(</span><span class="mi">63</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span> <span class="o">/</span> <span class="mi">255</span><span class="nx">f</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">color</span> <span class="o">=</span> <span class="nx">Color</span><span class="p">(</span><span class="nx">red</span><span class="p">,</span> <span class="nx">green</span><span class="p">,</span> <span class="nx">blue</span><span class="p">);</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">renderer</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The crucial shader</h2>

<p>At this point, I tested my code and got no errors. However, to my surprise I didn&rsquo;t see anything rendered on the screen.</p>

<p>I learned that I needed to use a <code>Sprite Shader</code> to get the colored mesh to render properly.  Here&rsquo;s how I did it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">spriteShader</span><span class="o">:</span> <span class="nx">Shader</span> <span class="o">=</span> <span class="nx">Shader</span><span class="p">.</span><span class="nx">Find</span><span class="p">(</span><span class="s2">&quot;Sprites/Default&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">renderer</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">shader</span> <span class="o">=</span> <span class="nx">spriteShader</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Boxes for dummy</h2>

<p>I don&rsquo;t feel so dumb anymore because this was a complex process.  And it wasn&rsquo;t until the very last crucial step that I saw anything remotely box-like.</p>

<p>I&rsquo;ve posted the code to a gist <a href="https://gist.github.com/zerosalife/743cf797112d62978bec">here</a> so you can clone the script for yourself, to give it a whirl.  I found that setting <code>size</code> to 2 is a nice place to start.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Skytorn Raycast Lighting Algorithm Details]]></title>
    <link href="http://zerosalife.github.io/blog/2015/05/16/more-skytorn-raycast-lighting-algorithm-details/"/>
    <updated>2015-05-16T11:10:29-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/05/16/more-skytorn-raycast-lighting-algorithm-details</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/blog/2015/05/09/raycast-lighting-in-skytorn/">Last week</a> I covered the lighting algorithm <a href="https://twitter.com/NoelFB">@NoelFB</a> is implementing for <a href="http://skytorngame.com/">Skytorn</a>.  Noel was nice enough to correct my mistaken assumptions about the inner workings of the lighting algorithm.</p>

<p>Looks like I kind of inverted the polarity of the raycasting with regard to the player and the level geometry.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p lang="en" dir="ltr">What Raycast lighting (roughly) looks like in Skytorn. Each triangle is drawn with a gradient from color-&gt;transparent <a href="http://t.co/saqVkxxvgB">pic.twitter.com/saqVkxxvgB</a></p>&mdash; Noel Berry (@NoelFB) <a href="https://twitter.com/NoelFB/status/543586120731074561">December 13, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>




<!--more-->


<h2>The algorithm</h2>

<p>The algorithm doesn&rsquo;t raycast in the full 360° circle around player&#x2013;that would be too costly.  Instead, it takes advantage of the fact that the level&rsquo;s ground collision geometry is stored in a grid.</p>

<ol>
<li><p>Given the player&rsquo;s location, there is a small list of collision geometry in the 8 or so grid cells surrounding the player.</p></li>
<li><p>The lighting algorithm raycasts from the corners of the level geometry to the player, instead of from the player out to the geometry.</p></li>
<li><p>Then, to prevent the lighting from looking too triangular, the algorithm adds a few more raycasts out from the player to the geometry in between the other raycasts.</p></li>
</ol>


<h2>That&rsquo;s actually all there is to it</h2>

<p>The algorithm I originally envisioned was naive and costly.  But, it&rsquo;s nice to hear that I wasn&rsquo;t far off&#x2013;I simply inverted the solution.  It was also nice to learn about a benefit of storing level geometry in a grid that I previously failed to appreciate.</p>

<p>Heaping thanks to <a href="https://twitter.com/NoelFB/">@NoelFB</a> for helping explain the algorithm, instead of getting bent out of shape about my lame attempt to reverse engineer the inner workings of <a href="http://skytorn-game.com/">Skytorn</a> from a screenshot.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raycast Lighting in Skytorn]]></title>
    <link href="http://zerosalife.github.io/blog/2015/05/09/raycast-lighting-in-skytorn/"/>
    <updated>2015-05-09T09:21:03-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/05/09/raycast-lighting-in-skytorn</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/NoelFB/">@NoelFB</a> posted a <a href="https://twitter.com/NoelFB/status/543586120731074561/photo/1">screenshot</a> showing how dynamic lighting works in <a href="http://skytorn-game.com/">Skytorn</a>.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p lang="en" dir="ltr">What Raycast lighting (roughly) looks like in Skytorn. Each triangle is drawn with a gradient from color-&gt;transparent <a href="http://t.co/saqVkxxvgB">pic.twitter.com/saqVkxxvgB</a></p>&mdash; Noel Berry (@NoelFB) <a href="https://twitter.com/NoelFB/status/543586120731074561">December 13, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>




<!--more-->


<h2>The algorithm</h2>

<p>From what I can tell, the algorithm looks something like this:</p>

<ol>
<li><p>Raycast out for 360° around the light source, starting in a clockwise direction.  If the rays encounter a collidable object, add it to the list of pink lines defining the polygonal shape of the lit area.  If the ray exceeds the distance of the light gradient, clamp the triangle edge defining the pink line at that distance.</p></li>
<li><p>For each of the collidable objects encountered, extend a ray past their vertices until it hits another collidable to create the obscured lighting effect visible to down and to the right of the light source.</p></li>
<li><p>Finally construct a set of triangles by starting from the closest edge in the list defining the pink lines to form the polygon.</p></li>
</ol>


<h2>That&rsquo;s all</h2>

<p>That&rsquo;s it for this week.  Let me know if you have any insight into this or other lighting algorithms in the comments or on the tweets.</p>

<h2>Update</h2>

<p>After some feedback from @NoelFB, I&rsquo;ve updated the algorithm in the <a href="http://zerosalife.github.io/blog/2015/05/16/more-skytorn-raycast-lighting-algorithm-details/">following post</a>.</p>
]]></content>
  </entry>
  
</feed>
