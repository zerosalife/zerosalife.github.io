<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[zero's a life]]></title>
  <link href="http://zerosalife.github.io/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2015-09-12T10:03:12-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cheeky Tinted Blobs: a procedurally generated Unity 2D background]]></title>
    <link href="http://zerosalife.github.io/blog/2015/09/12/cheeky-tinted-blobs/"/>
    <updated>2015-09-12T09:47:50-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/09/12/cheeky-tinted-blobs</id>
    <content type="html"><![CDATA[<p>I&rsquo;m following along with <a href="https://twitter.com/pentadact">@pentadact</a>&rsquo;s tutorial video <a href="https://youtu.be/I5qxIhdEx28?t%3D1m33s">here</a> (You can see the finished result around 6 minutes into the video).</p>

<p>Insert screenshot here.  Make sure to add a screenshot to the
README.org as well.</p>

<p><img class="center" src="http://zerosalife.github.io/images/assets/tinted-blobs-screenshot.png" width="1434" height="1434"></p>

<!--more-->


<h2>The goal</h2>

<p>What we want to do here is to generate a splotchy blurred out nebular (-lous?)  background.  Without going into to too much detail, I&rsquo;m interested in something that would go well underneath a procedurally generated space station map.</p>

<h2>The algorithm</h2>

<p>The algorithm <a href="https://twitter.com/pentadact">@pentadact</a> describes works like this:</p>

<ol>
<li>Draw a faint white <strong>blob</strong></li>
<li>Tint the <strong>blob</strong> one of two randomly generated <strong>colors</strong></li>
<li>Randomly place the tinted <strong>blobs</strong></li>
</ol>


<h2>How it works</h2>

<p>The blobs are white, which is represented in RGB color as 100% in all three values (black is 0%).  This corresponds to 255 in 8-bit colorspace and <code>1.0</code> in Unity&rsquo;s colorspace.  Since the blobs are faint, the actual RGB values will approach, but not reach 100%.</p>

<p>When we apply a tint to the blobs&#8217; sprites we are essentially multiplying each of the RGB values by our desired color&rsquo;s value.  The resulting value will approach the full <em>intensity</em> of the color as our raw blob approaches 100% white, if that makes sense.  So the result is a faint blob of any desired color we want.</p>

<p>The colored blobs overlap each other, generating interesting patterns of lighter and darker mixtures of the two colors.</p>

<h2>Blobonia</h2>

<p>I fired up my favorite image editing program and made a 256 x 256 <code>png</code> blob sprite.  Using the airbrush tool, I plopped a blob in the middle of the canvas.</p>

<p>The settings I used were:</p>

<ul>
<li>128 pixel diameter

<ul>
<li>To avoid any artifacts around the edges of the canvas</li>
</ul>
</li>
<li>Very soft hardness

<ul>
<li>To avoid sharp edges</li>
</ul>
</li>
<li>20% opacity

<ul>
<li>To help with blending later on</li>
</ul>
</li>
</ul>


<h2>Setting the scene, blob prefab</h2>

<p>Back in Unity, create a fresh 2D project and imported the blob sprite.  We drag the sprite into the scene to create a <code>GameObject</code> with the blob sprite.</p>

<p>We then add a <code>Sorting Layer</code> named <code>Blobs</code> and set the sprite&rsquo;s sorting layer to <code>Blobs</code>.  While we&rsquo;re at it, we also create a sorting layer named <code>BG</code> behind the <code>Blobs</code> layer for the background.</p>

<p>We name the <code>GameObject</code> <code>Blob</code> and drag it to the <code>Prefabs</code> directory, creating a prefab from it.</p>

<p>Blob prefab in hand, we still needed a couple more pieces to prepare the scene.</p>

<h2>Backdrop</h2>

<p>We create a black <code>Background</code> UI object and set the <code>X scale</code> and <code>Y scale</code> to <code>1000</code>, to be sure Background covered the whole screen.  We then set the sorting layer of the sprite to <code>BG</code>.  Remember how we set that layer up earlier?  How prescient!</p>

<h2>One GameObject To Hold Them All</h2>

<p>We&rsquo;re planning to create a whole metric ton of blobs, so we create a <code>Blobs</code> <code>GameObject</code> to hold all of the blobs.  By setting the instantiated blob&rsquo;s <code>transform.parent</code> to the <code>Blobs.transform</code> all of the instantiated blobs fall under the parent <code>Blobs</code> <code>GameObject</code> and it keeps the Hierarchy in our Scene nice and tidy.</p>

<h2>BlobGen</h2>

<p>We have a background, a Blob prefab and even a <code>GameObject</code> that will hold all of the blobs we plan to create. Now we just need to make a <code>BlobGenerator</code> script to randomly place the blobs.</p>

<p>The <code>BlobGenerator</code> takes a reference to the Blob <code>Prefab</code>, a reference to the parent Blobs <code>GameObject</code>, an integer number of blobs to create, and maximum and minimum coordinates to control the spread of the created blobs.</p>

<p>The <code>BlobGenerator</code> generates two random colors using a function called <code>RandomColor</code>,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Color</span> <span class="nf">RandomColor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">Color</span><span class="p">(</span><span class="n">Random</span><span class="p">.</span><span class="k">value</span><span class="p">,</span> <span class="n">Random</span><span class="p">.</span><span class="k">value</span><span class="p">,</span> <span class="n">Random</span><span class="p">.</span><span class="k">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which it then zips up into an array called <code>colors</code>.  <code>Random.value</code> returns a random <code>float</code> between <code>0.0</code> and <code>1.0</code>, which we use to generate a new <code>Color</code>.</p>

<p>Then the <code>BlobGenerator</code> gets into the main routine, <code>PlaceBlobs</code>.</p>

<p>Briefly, <code>PlaceBlobs</code> instantiates clones of the blob prefab at random positions within the maximum and minimum boundaries we specify, makes the cloned blob a child of the parent Blobs <code>GameObject</code>, and sets the color tint of the cloned blob to one of the two colors generated above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">void</span> <span class="nf">PlaceBlobs</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">numberOfBlobs</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">GameObject</span> <span class="n">blockClone</span> <span class="p">=</span> <span class="n">Instantiate</span><span class="p">(</span><span class="n">blobPrefab</span><span class="p">,</span>
</span><span class='line'>                                            <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">Random</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="n">xMin</span><span class="p">,</span> <span class="n">xMax</span><span class="p">),</span>
</span><span class='line'>                                                        <span class="n">Random</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="n">yMin</span><span class="p">,</span> <span class="n">yMax</span><span class="p">),</span>
</span><span class='line'>                                                        <span class="m">0f</span><span class="p">),</span>
</span><span class='line'>                                            <span class="n">Quaternion</span><span class="p">.</span><span class="n">identity</span><span class="p">)</span> <span class="k">as</span> <span class="n">GameObject</span><span class="p">;</span>
</span><span class='line'>        <span class="n">SpriteRenderer</span> <span class="n">sprite</span> <span class="p">=</span> <span class="n">blockClone</span><span class="p">.</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">SpriteRenderer</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">blockClone</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">parent</span> <span class="p">=</span> <span class="n">blobs</span><span class="p">.</span><span class="n">transform</span><span class="p">;</span>
</span><span class='line'>        <span class="n">sprite</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="n">colors</span><span class="p">[</span><span class="n">Random</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">colors</span><span class="p">.</span><span class="n">Length</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all there is to it.  You can check out the full example project on <a href="https://github.com/zerosalife/tint-background">github</a>.</p>

<h2>Moving forward</h2>

<p>It would be nice to have more fine-grained control over the local density of the blobs in certain regions, so the map would become a little less uniform, creating pockets of character in an otherwise featureless space.  But I think the effect here works nice as a background.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using images in Octopress posts]]></title>
    <link href="http://zerosalife.github.io/blog/2015/08/29/using-images-in-octopress-posts/"/>
    <updated>2015-08-29T17:20:05-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/08/29/using-images-in-octopress-posts</id>
    <content type="html"><![CDATA[<h2>Storing the images</h2>

<p>I store images in <code>./images/assets/</code> in my Octopress install directory.  They get bundled up with all the other parts of my blog when I deploy.</p>

<h2>The Octopress image tag</h2>

<p>I use the <a href="http://octopress.org/docs/plugins/image-tag/">Octopress image tag</a></p>

<p>The syntax is:</p>

<pre><code>{[%] img [class names] /path/to/image [width] [height] [title text [alt text]] [%]}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# code blocks in Octopress]]></title>
    <link href="http://zerosalife.github.io/blog/2015/08/15/c-sharp-code-blocks-in-octopress/"/>
    <updated>2015-08-15T08:59:19-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/08/15/c-sharp-code-blocks-in-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">Octopress</a> supports <a href="http://octopress.org/docs/plugins/backtick-codeblock/">backtick code blocks</a> with <a href="http://pygments.org/docs/lexers/">Pygment lexers</a> handling syntax highlighting.  I always forget the syntax for using with bactick codeblocks with C#, leading to irritating failures when I build my Octopress blog.  Here&rsquo;s how you use them.</p>

<pre><code>``` csharp
[csharp code here]
```
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trace function for debugging in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/07/25/trace-function-for-debugging-in-unity-c-sharp/"/>
    <updated>2015-07-25T09:00:31-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/07/25/trace-function-for-debugging-in-unity-c-sharp</id>
    <content type="html"><![CDATA[<p>Inspired by <a href="https://www.youtube.com/watch?v=btN095elmh4&amp;feature=youtu.be&amp;t=1985">a video from the excellent Double Fine Documentary interviews with Massive Chalice artists and developers</a>, I wanted to come up with a way of conditionally including debug statements in development code, but not in production.  Luckily I wasn&rsquo;t the first person to think of this.</p>

<p><a href="https://twitter.com/danpuzey">Dan Puzey</a> <a href="http://blog.puzey.net/simple-better-unity-logging/">wrote an abstraction layer</a> over Unity&rsquo;s built-in <code>Debug</code> library.  The library contains several functions for various types of logging.  The most important piece for me is <code>VerboseFormat</code>, which combines string formatting with conditional attributes.  I&rsquo;ll explain a bit more about how these pieces work below.</p>

<!--more-->


<h2>String Formatting</h2>

<p>To my surprise, Unity&rsquo;s C# implementation, Mono, doesn&rsquo;t use standard <code>printf</code>-like string formatting syntax.  Instead of <code>%s</code> or other commonly used formatting variables, C# uses curly braces around numbers to interpolate variables passed in to the <code>String.Format</code> call as arguments.</p>

<p>Dan&rsquo;s <code>VerboseFormat</code> function wraps <code>String.Format</code>, so you can call <code>VerboseFormat</code> with C# formatting strings.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">Assets.Phunk.Core</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">Log</span><span class="p">.</span><span class="n">VerboseFormat</span><span class="p">(</span><span class="s">&quot;var1: {0}, var2: {1}&quot;</span><span class="p">,</span> <span class="n">var1</span><span class="p">,</span> <span class="n">var2</span><span class="p">);</span>
</span><span class='line'><span class="c1">// =&gt; [VERBOSE] var1: [var1], var2: [var2]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conditional Attributes</h2>

<p>Above some of the functions in Dan&rsquo;s code you&rsquo;ll see the following <a href="https://msdn.microsoft.com/en-us/library/system.diagnostics.conditionalattribute%28v=vs.110%29.aspx">conditional attributes</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[System.Diagnostics.Conditional(&quot;DEBUG&quot;), System.Diagnostics.Conditional(&quot;UNITY_EDITOR&quot;)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>These two settings tell the C# compiler to only compile the code, in this case the <code>Verbose</code> logging functions, when compiling during development, i.e. <code>DEBUG</code> or <code>UNITY_EDITOR</code>.  That means all of the <code>Verbose</code> logging statements in your code will not be compiled in the production builds of your code.</p>

<p>Cool, huh?  Good thinking, Dan.</p>

<h2>That&rsquo;s it!</h2>

<p>It&rsquo;s always great when you think that a tool would be useful and someone else has already implemented it for you.  Go on over and give <a href="http://puzey.net/">Dan&rsquo;s blog</a> a gander.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Satoru Iwata]]></title>
    <link href="http://zerosalife.github.io/blog/2015/07/18/satoru-iwata/"/>
    <updated>2015-07-18T16:09:30-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/07/18/satoru-iwata</id>
    <content type="html"><![CDATA[<blockquote><p>Video games are meant to be just one thing. Fun. Fun for everyone.</p></blockquote>

<p>&#x2013; Satoru Iwata, 1959-2015</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Probabilistic entity spawning in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/07/11/probabilistic-entity-spawning-in-unity-c-sharp/"/>
    <updated>2015-07-11T17:03:55-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/07/11/probabilistic-entity-spawning-in-unity-c-sharp</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript/">Last week</a> I showed how to do probabilistic entity spawning in Unity JS.  This week I&rsquo;ll port that code over to C#.  You can find examples of both the C# and JavaScript versions of the code in a <a href="https://github.com/zerosalife/ProbEntitySpawnExample">repository on github</a>.  Since I&rsquo;ve already explained the Algorithm I will focus mainly on the differences in the code.</p>

<p>There isn&rsquo;t syntactic sugar for Dictionary assignment in C# :( This required moving the assignment for the <code>areas</code> Dictionary into the <code>Start</code> function.  It&rsquo;s a move that enforces best practices, strictly speaking, but risks confusion about the content of the <code>areas</code> Dictionary at runtime.  If you&rsquo;d like to read up on Dictionaries in C#, I found <a href="https://msdn.microsoft.com/en-us/library/fkbw11z0.aspx">this resource</a> helpful.</p>

<p>The <code>foreach</code> command requires a type. This is a case where a stricter language will save confusion in the long run.</p>

<p>Lists can be created from specific arrays of the List&rsquo;s type, but not from some arbitrary array, as in JavaScript.  Again, this is a feature of a stricter language that causes some extra work up-front, but will make things more clear in the long run.</p>

<p>For an in-depth tour of the algorithm for spawning entities, check out <a href="http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript/">last week&rsquo;s post</a> and the <a href="https://github.com/zerosalife/ProbEntitySpawnExample">example repository on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Probabilistic Entity Spawning in Unity JavaScript]]></title>
    <link href="http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript/"/>
    <updated>2015-07-04T09:56:33-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript</id>
    <content type="html"><![CDATA[<p>The Unity documentation has an example showing how to generate random indexes satisfying a distribution of probabilities (see: <a href="http://docs.unity3d.com/Manual/RandomNumbers.html">Choosing Items with Different Probabilities</a>).  In this post I&rsquo;ll show how to use a similar approach to generate random items with specific probabilities dictated by the environment.</p>

<!--more-->


<p>I want to be able to generate an item code, say <code>Red</code>, <code>Green</code>, or <code>Black</code>, given a list of floating point probabilities dictated by the current environmental area in my game, say for example <code>desert</code> or <code>grassland</code>.</p>

<p>Varying the probability of encountering items will give each area a unique flavor.  If the player needs a <code>Red</code> item, the player will need to seek out areas in which the probability for encountering <code>Red</code> items is high.  I hope this will drive player exploration and investigation.</p>

<p>I&rsquo;ll start by defining an array of possible item types.  (According to <a href="http://wiki.unity3d.com/index.php/Head_First_into_Unity_with_UnityScript#Use_enum">this introduction to Unity JavaScript</a>, I should prefer <code>enum</code>.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">ents</span> <span class="o">:</span> <span class="nb">String</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;Red&quot;</span><span class="p">,</span> <span class="s2">&quot;Green&quot;</span><span class="p">,</span> <span class="s2">&quot;Black&quot;</span><span class="p">,</span> <span class="s2">&quot;Orange&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since this is a small example, I&rsquo;ll forego the efficiency and security that <code>enum</code>s provide for the convenience of using a simple <code>String</code> array.  I&rsquo;ll note that this is a good spot to do some refactoring in a real project where a variety of systems may have to interact with the item types.</p>

<p>I then define a Dictionary <code>areas</code> of Lists of floating point probabilities.  These areas correspond to terrains that contain unique distributions of items. The <code>areas</code> Dictionary accepts <code>String</code>s specifying the desired terrain.</p>

<p>It&rsquo;s important to note that the order of the probabilities correspond to the order of the item types in <code>ent</code>s.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">areas</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dictionary</span><span class="p">.</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span> <span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">float</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'><span class="nx">areas</span><span class="p">[</span><span class="s2">&quot;desert&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">float</span><span class="o">&gt;</span><span class="p">([</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.425</span><span class="p">,</span> <span class="mf">0.425</span><span class="p">]);</span>
</span><span class='line'><span class="nx">areas</span><span class="p">[</span><span class="s2">&quot;grassland&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">float</span><span class="o">&gt;</span><span class="p">([</span><span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.35</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, in the <code>grassland</code> area, there will be a 30% chance of choosing a <code>Red</code> item.</p>

<p>Now that I&rsquo;ve defined the data, I need a function to choose the appropriate index given a List of probabilities.  This function is lifted with minor modifications from the <a href="http://docs.unity3d.com/Documentation/Manual/RandomNumbers.html">Unity Documentation</a>.  Take a look at that documentation for a better visualization of the algorithm than I could do with words.  Really, do it!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Choose</span><span class="p">(</span><span class="nx">probs</span> <span class="o">:</span> <span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">float</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">:</span> <span class="kr">int</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Returns the index of a probabilistically determined random</span>
</span><span class='line'>    <span class="c1">// entity, given by the probability distributions in probs.</span>
</span><span class='line'>    <span class="c1">// e.g.:</span>
</span><span class='line'>    <span class="c1">// probs : List.&lt;float&gt;([0.5, 0.2, 0.1, 0.2]);</span>
</span><span class='line'>    <span class="c1">// entity = entities[Choose(probs)];</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>    <span class="c1">// See http://docs.unity3d.com/Documentation/Manual/RandomNumbers.html</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Watch out!  If you fail to specify total&#39;s type as float, it</span>
</span><span class='line'>    <span class="c1">// will add the probs using integer addition.  This will floor</span>
</span><span class='line'>    <span class="c1">// each of the probs to 0.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">total</span> <span class="o">:</span> <span class="kr">float</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="k">in</span> <span class="nx">probs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">total</span> <span class="o">+=</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">randomPoint</span> <span class="o">=</span> <span class="nx">Random</span><span class="p">.</span><span class="nx">value</span> <span class="o">*</span> <span class="nx">total</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">probs</span><span class="p">.</span><span class="nx">Count</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">randomPoint</span> <span class="o">&lt;</span> <span class="nx">probs</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="c1">// Shift the strip down, adjusting the random point&#39;s</span>
</span><span class='line'>            <span class="c1">// value to see whether it falls within the next prob.</span>
</span><span class='line'>            <span class="nx">randomPoint</span> <span class="o">-=</span> <span class="nx">probs</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// Take care of possibility that randomPoint is 1.0 or 100% by</span>
</span><span class='line'>    <span class="c1">// returning the last element of probs.  Avoids allowing Choose to</span>
</span><span class='line'>    <span class="c1">// return a 0 probability event (which would be possible using the</span>
</span><span class='line'>    <span class="c1">// &lt;= test).</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">probs</span><span class="p">.</span><span class="nx">Count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now to choose an item:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">ents</span><span class="p">[</span><span class="nx">Choose</span><span class="p">(</span><span class="nx">areas</span><span class="p">[</span><span class="s2">&quot;grassland&quot;</span><span class="p">])];</span>
</span><span class='line'><span class="nx">Debug</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all there is to it. I&rsquo;ve put an <a href="https://github.com/zerosalife/ProbEntitySpawnExample">example Unity project with this code on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Dictionary of Lists in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/06/20/create-a-dictionary-of-lists-in-unity-c-sharp/"/>
    <updated>2015-06-20T11:16:28-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/06/20/create-a-dictionary-of-lists-in-unity-c-sharp</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/blog/2015/06/13/creating-a-dictionary-of-lists-in-unity-javascript/">Last week</a>, I published an article about creating a Dictionary of Lists in Unity using Unity&rsquo;s JavaScript.  Some of the syntax is changed in C#, but the overall algorithm is exactly the same.  I&rsquo;ve already mentioned the underlying motive, so I&rsquo;ll dive right in.</p>

<!--more-->


<p>Here&rsquo;s how to create a Dictionary of Lists in C# for Unity.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;&gt;</span> <span class="n">table</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nf">Start</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Fill our table with Lists containing ints using Arrays to intialize</span>
</span><span class='line'>    <span class="c1">// the Lists.</span>
</span><span class='line'>    <span class="n">table</span><span class="p">[</span><span class="s">&quot;a&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(){</span><span class="m">1</span><span class="p">};</span>
</span><span class='line'>    <span class="n">table</span><span class="p">[</span><span class="s">&quot;b&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(){</span><span class="m">2</span><span class="p">};</span>
</span><span class='line'>    <span class="n">table</span><span class="p">[</span><span class="s">&quot;c&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(){</span><span class="m">3</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="kt">string</span> <span class="n">str</span> <span class="k">in</span> <span class="n">table</span><span class="p">.</span><span class="n">Keys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Get the value for our Key.</span>
</span><span class='line'>        <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="k">value</span> <span class="p">=</span> <span class="n">table</span><span class="p">[</span><span class="n">str</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If the Key is the desired Key, append to its list.</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">str</span> <span class="p">==</span> <span class="s">&quot;c&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">value</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="m">4</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// print the first item in each of the Lists.</span>
</span><span class='line'>        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="k">value</span><span class="p">[</span><span class="m">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Print the appended item to see that it worked.</span>
</span><span class='line'>    <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="s">&quot;c&quot;</span><span class="p">][</span><span class="m">1</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>These are the main differences between the Unity JavaScript and C# code.  Take a look at the full file in a <a href="https://gist.github.com/zerosalife/e3882aa5ffd5dd614c9a">gist on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Dictionary of Lists in Unity JavaScript]]></title>
    <link href="http://zerosalife.github.io/blog/2015/06/13/creating-a-dictionary-of-lists-in-unity-javascript/"/>
    <updated>2015-06-13T11:14:25-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/06/13/creating-a-dictionary-of-lists-in-unity-javascript</id>
    <content type="html"><![CDATA[<p>I ran into a few problems trying to create a <a href="http://wiki.unity3d.com/index.php?title%3DWhich_Kind_Of_Array_Or_Collection_Should_I_Use%253F#Generic_Dictionary">Dictionary</a> of <a href="http://wiki.unity3d.com/index.php?title%3DWhich_Kind_Of_Array_Or_Collection_Should_I_Use%253F#Generic_List">Lists</a> in Unity JavaScript.  So I thought I&rsquo;d share some of the tips I learned here.</p>

<!--more-->


<p>I&rsquo;m interested in creating a Dictionary to hold <a href="http://en.wikipedia.org/wiki/Markov_chain#Markov_text_generators">Markov Chain information</a> in order to generate text.  So I&rsquo;d like to be able to create a Dictionary holding a variable length of items for each of its Keys.  I&rsquo;d also like to be able to update the mapping at runtime.</p>

<p>It would look something like this:</p>

<ul>
<li><strong>Key1:</strong> Item1, Item2, Item3</li>
<li><strong>Key2:</strong> Item4</li>
</ul>


<p>At runtime, I&rsquo;d like to be able to say: &ldquo;Append <code>Item5</code> to <code>Key2</code>.&rdquo;</p>

<p>Here&rsquo;s what I came up with in Unity JavaScript.  I started out by initializing a <code>table</code> in my script prior to the <code>Start</code> function. The var <code>table</code> holds our mapping of Keys of type <code>String</code> to Values of type <code>List.&lt;int&gt;</code>, or Lists of integers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">System</span><span class="p">.</span><span class="nx">Collections</span><span class="p">.</span><span class="nx">Generic</span><span class="p">;</span>
</span><span class='line'><span class="c1">// White space matters.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">table</span><span class="o">:</span><span class="nx">Dictionary</span><span class="p">.</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dictionary</span><span class="p">.</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">int</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first hiccup I ran into is that <a href="http://forum.unity3d.com/threads/80227-Creating-a-Dictionary-of-Lists-in-Javascript?p%3D513471&amp;viewfull%3D1#post513471">white space matters</a> when creating Generics in Unity JavaScript.  The compiler will throw an error if it sees two <code>&gt;&gt;</code> in a row.</p>

<p>Then I fill the table with our test mappings.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Fill our table with Lists containing ints using Arrays to intialize</span>
</span><span class='line'><span class="c1">// the Lists.</span>
</span><span class='line'><span class="nx">table</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">int</span><span class="o">&gt;</span><span class="p">([</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="nx">table</span><span class="p">[</span><span class="s2">&quot;b&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">int</span><span class="o">&gt;</span><span class="p">([</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="nx">table</span><span class="p">[</span><span class="s2">&quot;c&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">int</span><span class="o">&gt;</span><span class="p">([</span><span class="mi">3</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, you can <a href="http://answers.unity3d.com/questions/221476/javascript-array-to-generic-list.html">construct a List from an Array</a>.  Cool.</p>

<p>In the <code>Start</code> function, I iterate over the Keys in the Dictionary, Add the item <code>4</code> to the Value of Key <code>c</code>, and print out the first item of each of the <code>values</code>.  Finally, we check to see whether <code>4</code> was appended to the desired entry.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Start</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Iterate over the Keys in our Dictionary.</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">str</span><span class="o">:</span><span class="nb">String</span> <span class="k">in</span> <span class="nx">table</span><span class="p">.</span><span class="nx">Keys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Get the value for our Key.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">value</span><span class="o">:</span><span class="nx">List</span><span class="p">.</span><span class="o">&lt;</span><span class="kr">int</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nx">table</span><span class="p">[</span><span class="nx">str</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If the Key is our desired Key, append to its list.</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">str</span> <span class="o">==</span> <span class="s2">&quot;c&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">value</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Print the first item in each of the Lists.</span>
</span><span class='line'>        <span class="nx">print</span><span class="p">(</span><span class="nx">value</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Print the appended item to see that it worked.</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">table</span><span class="p">[</span><span class="s2">&quot;c&quot;</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I attach this script to the Main Camera of a fresh Scene for testing purposes.  Bada bing, bada boom.</p>

<p>Attaching the script to any old object in the scene would work.  I just chose the Main Camera because the camera object is there by default.</p>

<p>This was all relatively straightforward, after I understood some of the quirks of Unity&rsquo;s JavaScript syntax.  You can find an example script using this code <a href="https://gist.github.com/zerosalife/f13eb62bf7bd57799db6">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prototyping Rectangles in Unity 2D for Dummy]]></title>
    <link href="http://zerosalife.github.io/blog/2015/05/30/prototyping-rectangles-in-unity-2d-for-dummy/"/>
    <updated>2015-05-30T09:57:58-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/05/30/prototyping-rectangles-in-unity-2d-for-dummy</id>
    <content type="html"><![CDATA[<p>Who&rsquo;s &ldquo;Dummy&rdquo;? I&rsquo;m the dummy.  Prototyping with 2d boxes in Unity JavaScript has proven surprisingly hard.  I think the difficulty I&rsquo;m having is that I&rsquo;m not exactly sure what I&rsquo;m trying to do.  What follows is an example of <strong>one</strong> way (notice that I didn&rsquo;t say THE <strong>RIGHT</strong> WAY) to prototype with 2d rectangles in Unity.  I&rsquo;m still too much of a noob to have strong opinions on the right way to go about doing this.  Expect more posts on this topic as I develop my expertise.</p>

<p><a href="http://en.wikipedia.org/wiki/Discoverability">Discoverability</a> is something I prize in programming languages and environments, especially when I&rsquo;m learning them.  While Unity&rsquo;s documentation is thorough, the lack of congruence between the GUI environment and coding leads to poor discoverability.  There&rsquo;s not a one-to-one correspondence between the labels for <code>Components</code> in the GUI inspector and their names and attributes in code.</p>

<!--more-->


<p>Most of the time, Google is my method for discovering new functionality in Unity.  The problem with this method, and even the documentation, is that I&rsquo;m never quite sure if the solution I&rsquo;ve found is the best solution, the only way to do something, or the wrong way to do something.</p>

<p>I&rsquo;m trying to get simple rectangular boxes to work in Unity 2d for prototyping movement, hitboxes for attacks, etc.  The information I can find either deals with real-deal-Holyfield sprites or <code>GUIBoxes</code>.</p>

<p>It will be nice to work with <code>Sprites</code> eventually, but I just want to get a box that can walk around and jump, at this point.  <code>GUIBoxes</code> seem like the wrong type of boxes, if I want to prototype something that will eventually be a <code>Sprite</code>.</p>

<p>As near as I can tell, the <code>Sprite</code> is a (relatively) new way of making a flat 2D <code>Plane</code> in Unity.  I couldn&rsquo;t seem to find anything dealing with <code>Sprites</code> without creating them in the Unity GUI interface.</p>

<p>So, I started out following a Unity Answers question <a href="http://answers.unity3d.com/questions/139808/creating-a-plane-mesh-directly-from-code.html">here</a>.</p>

<h2>Getting the Mesh to gel</h2>

<p>First, I created a brand-spankin new Unity 2D project.  I had to create an empty <code>GameObject</code> to host my <code>PlaneTest.js</code> script <code>Component</code>.  I included a variable <code>size</code> to control the size of the box, so you can play around with that in the Editor interface.</p>

<p>Next, I had to create a <code>Mesh</code> that would be the actual geometry of the plane.  Now, the <code>Mesh</code> I&rsquo;m making differs from the stock Unity <code>Plane</code> <code>GameObject</code>.  <a href="http://www.third-helix.com/2012/02/making-2d-games-with-unity/">This blog post</a> shows that Unity&rsquo;s <code>Plane</code> defaults to a 10 x 10 quad mesh with a couple hundred triangles.  A quad is just a square made of two triangle faces, <a href="http://blog.nobel-joergensen.com/2010/12/25/procedural-generated-mesh-in-unity/">this blog post</a> goes into more detail.</p>

<p>Here we <a href="http://i.eho.st/pgtxqdii.gif">do it live</a> by defining a <code>name</code> <code>String</code>, an <code>array</code> of <code>Vector3</code> <code>vertices</code>, an <code>array</code> of <code>uv</code> texture coordinates, and an <code>array</code> of <code>triangles</code> faces.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">m</span><span class="o">:</span> <span class="nx">Mesh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mesh</span><span class="p">();</span>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Scripted_Plane_New_Mesh&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">vertices</span> <span class="o">=</span> <span class="p">[</span><span class="nx">Vector3</span><span class="p">(</span><span class="o">-</span><span class="nx">size</span><span class="p">,</span> <span class="o">-</span><span class="nx">size</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">),</span>
</span><span class='line'>              <span class="nx">Vector3</span><span class="p">(</span><span class="nx">size</span><span class="p">,</span> <span class="o">-</span><span class="nx">size</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">),</span>
</span><span class='line'>              <span class="nx">Vector3</span><span class="p">(</span><span class="nx">size</span><span class="p">,</span> <span class="nx">size</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">),</span>
</span><span class='line'>              <span class="nx">Vector3</span><span class="p">(</span><span class="o">-</span><span class="nx">size</span><span class="p">,</span> <span class="nx">size</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">)];</span>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">uv</span> <span class="o">=</span> <span class="p">[</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">triangles</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>               <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Who you calling normal?</h2>

<p>At one point I thought I had to <code>RecalculateNormals</code>, according to the Unity Answers example above.  But it doesn&rsquo;t seem to make a difference.  Here&rsquo;s a great example of the Unity discoverability problem.  Since it doesn&rsquo;t <em>seem</em> to make a difference, I don&rsquo;t know whether to trust the Unity Answers that received 5 upvotes or to go with parsimony.</p>

<p>A little more digging <a href="http://forum.unity3d.com/threads/210399-4-3-Sprites-and-Lighting">reveals</a> that normal maps are particularly important for lighting.  Since the <code>Sprite Shader</code> I intend to use doesn&rsquo;t use normal maps, we can leave it out.</p>

<h2>OBJECTION!!</h2>

<p>Time to create the <code>GameObject</code> that will hold a <code>MeshRenderer</code>, <code>MeshFilter</code>, and <code>MeshCollider</code>.  According to the <a href="http://docs.unity3d.com/Documentation/Components/class-MeshFilter.html">docs</a>, a <code>MeshFilter</code> takes a mesh, like the one we created above, and passes it to the <code>MeshRenderer</code> for rendering to the screen.  Not sure what it&rsquo;s <em>filtering</em> or why there&rsquo;s an intermediate <code>Component</code>, but there you go.</p>

<p>The <a href="http://docs.unity3d.com/Documentation/Components/class-MeshRenderer.html">docs</a> say the <code>MeshRenderer</code> then takes the geometry from the <code>MeshFilter</code> and renders it on the screen at the position defined by the <code>GameObject</code>&rsquo;s <code>Transform</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">obj</span><span class="o">:</span> <span class="nx">GameObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GameObject</span><span class="p">(</span><span class="s2">&quot;New_Plane_From_Script&quot;</span><span class="p">,</span>
</span><span class='line'>                                     <span class="nx">MeshRenderer</span><span class="p">,</span>
</span><span class='line'>                                     <span class="nx">MeshFilter</span><span class="p">,</span>
</span><span class='line'>                                     <span class="nx">MeshCollider</span><span class="p">);</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">GetComponent</span><span class="p">(</span><span class="nx">MeshFilter</span><span class="p">).</span><span class="nx">mesh</span> <span class="o">=</span> <span class="nx">m</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Time for texture</h2>

<p>Next we create a <code>Texture2D</code> to hold the color information, to really give the box some panache.  The <code>Texture2D</code> goes into the <code>MeshRenderer</code>&rsquo;s <code>mainTexture</code> slot.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">texture</span><span class="o">:</span> <span class="nx">Texture2D</span><span class="p">;</span>
</span><span class='line'><span class="nx">texture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Texture2D</span><span class="p">(</span><span class="nx">size</span><span class="p">,</span> <span class="nx">size</span><span class="p">,</span> <span class="nx">TextureFormat</span><span class="p">.</span><span class="nx">ARGB4444</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">renderer</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">mainTexture</span> <span class="o">=</span> <span class="nx">texture</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I don&rsquo;t know too much about how <code>Texture2D</code> works right now, but there&rsquo;s plenty to read in the <a href="http://docs.unity3d.com/Documentation/ScriptReference/Texture2D.html">docs</a>.</p>

<h2>A splash of color</h2>

<p>Here we generate some random RGB values, normalize them for Unity&rsquo;s <code>0.0-1.0</code> colorspace and make a <code>Color</code> to put into the <code>MeshRenderer</code>&rsquo;s color slot.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">red</span><span class="o">:</span> <span class="kr">float</span> <span class="o">=</span> <span class="nx">Random</span><span class="p">.</span><span class="nx">Range</span><span class="p">(</span><span class="mi">63</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span> <span class="o">/</span> <span class="mi">255</span><span class="nx">f</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">green</span><span class="o">:</span> <span class="kr">float</span> <span class="o">=</span> <span class="nx">Random</span><span class="p">.</span><span class="nx">Range</span><span class="p">(</span><span class="mi">63</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span> <span class="o">/</span> <span class="mi">255</span><span class="nx">f</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">blue</span><span class="o">:</span> <span class="kr">float</span> <span class="o">=</span> <span class="nx">Random</span><span class="p">.</span><span class="nx">Range</span><span class="p">(</span><span class="mi">63</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span> <span class="o">/</span> <span class="mi">255</span><span class="nx">f</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">color</span> <span class="o">=</span> <span class="nx">Color</span><span class="p">(</span><span class="nx">red</span><span class="p">,</span> <span class="nx">green</span><span class="p">,</span> <span class="nx">blue</span><span class="p">);</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">renderer</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The crucial shader</h2>

<p>At this point, I tested my code and got no errors. However, to my surprise I didn&rsquo;t see anything rendered on the screen.</p>

<p>I learned that I needed to use a <code>Sprite Shader</code> to get the colored mesh to render properly.  Here&rsquo;s how I did it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">spriteShader</span><span class="o">:</span> <span class="nx">Shader</span> <span class="o">=</span> <span class="nx">Shader</span><span class="p">.</span><span class="nx">Find</span><span class="p">(</span><span class="s2">&quot;Sprites/Default&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">renderer</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">shader</span> <span class="o">=</span> <span class="nx">spriteShader</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Boxes for dummy</h2>

<p>I don&rsquo;t feel so dumb anymore because this was a complex process.  And it wasn&rsquo;t until the very last crucial step that I saw anything remotely box-like.</p>

<p>I&rsquo;ve posted the code to a gist <a href="https://gist.github.com/zerosalife/743cf797112d62978bec">here</a> so you can clone the script for yourself, to give it a whirl.  I found that setting <code>size</code> to 2 is a nice place to start.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Skytorn Raycast Lighting Algorithm Details]]></title>
    <link href="http://zerosalife.github.io/blog/2015/05/16/more-skytorn-raycast-lighting-algorithm-details/"/>
    <updated>2015-05-16T11:10:29-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/05/16/more-skytorn-raycast-lighting-algorithm-details</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/blog/2015/05/09/raycast-lighting-in-skytorn/">Last week</a> I covered the lighting algorithm <a href="https://twitter.com/NoelFB">@NoelFB</a> is implementing for <a href="http://skytorngame.com/">Skytorn</a>.  Noel was nice enough to correct my mistaken assumptions about the inner workings of the lighting algorithm.</p>

<p>Looks like I kind of inverted the polarity of the raycasting with regard to the player and the level geometry.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p lang="en" dir="ltr">What Raycast lighting (roughly) looks like in Skytorn. Each triangle is drawn with a gradient from color-&gt;transparent <a href="http://t.co/saqVkxxvgB">pic.twitter.com/saqVkxxvgB</a></p>&mdash; Noel Berry (@NoelFB) <a href="https://twitter.com/NoelFB/status/543586120731074561">December 13, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>




<!--more-->


<h2>The algorithm</h2>

<p>The algorithm doesn&rsquo;t raycast in the full 360° circle around player&#x2013;that would be too costly.  Instead, it takes advantage of the fact that the level&rsquo;s ground collision geometry is stored in a grid.</p>

<ol>
<li><p>Given the player&rsquo;s location, there is a small list of collision geometry in the 8 or so grid cells surrounding the player.</p></li>
<li><p>The lighting algorithm raycasts from the corners of the level geometry to the player, instead of from the player out to the geometry.</p></li>
<li><p>Then, to prevent the lighting from looking too triangular, the algorithm adds a few more raycasts out from the player to the geometry in between the other raycasts.</p></li>
</ol>


<h2>That&rsquo;s actually all there is to it</h2>

<p>The algorithm I originally envisioned was naive and costly.  But, it&rsquo;s nice to hear that I wasn&rsquo;t far off&#x2013;I simply inverted the solution.  It was also nice to learn about a benefit of storing level geometry in a grid that I previously failed to appreciate.</p>

<p>Heaping thanks to <a href="https://twitter.com/NoelFB/">@NoelFB</a> for helping explain the algorithm, instead of getting bent out of shape about my lame attempt to reverse engineer the inner workings of <a href="http://skytorn-game.com/">Skytorn</a> from a screenshot.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raycast Lighting in Skytorn]]></title>
    <link href="http://zerosalife.github.io/blog/2015/05/09/raycast-lighting-in-skytorn/"/>
    <updated>2015-05-09T09:21:03-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/05/09/raycast-lighting-in-skytorn</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/NoelFB/">@NoelFB</a> posted a <a href="https://twitter.com/NoelFB/status/543586120731074561/photo/1">screenshot</a> showing how dynamic lighting works in <a href="http://skytorn-game.com/">Skytorn</a>.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p lang="en" dir="ltr">What Raycast lighting (roughly) looks like in Skytorn. Each triangle is drawn with a gradient from color-&gt;transparent <a href="http://t.co/saqVkxxvgB">pic.twitter.com/saqVkxxvgB</a></p>&mdash; Noel Berry (@NoelFB) <a href="https://twitter.com/NoelFB/status/543586120731074561">December 13, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>




<!--more-->


<h2>The algorithm</h2>

<p>From what I can tell, the algorithm looks something like this:</p>

<ol>
<li><p>Raycast out for 360° around the light source, starting in a clockwise direction.  If the rays encounter a collidable object, add it to the list of pink lines defining the polygonal shape of the lit area.  If the ray exceeds the distance of the light gradient, clamp the triangle edge defining the pink line at that distance.</p></li>
<li><p>For each of the collidable objects encountered, extend a ray past their vertices until it hits another collidable to create the obscured lighting effect visible to down and to the right of the light source.</p></li>
<li><p>Finally construct a set of triangles by starting from the closest edge in the list defining the pink lines to form the polygon.</p></li>
</ol>


<h2>That&rsquo;s all</h2>

<p>That&rsquo;s it for this week.  Let me know if you have any insight into this or other lighting algorithms in the comments or on the tweets.</p>

<h2>Update</h2>

<p>After some feedback from @NoelFB, I&rsquo;ve updated the algorithm in the <a href="http://zerosalife.github.io/blog/2015/05/16/more-skytorn-raycast-lighting-algorithm-details/">following post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adventurejam reviews]]></title>
    <link href="http://zerosalife.github.io/blog/2015/05/02/adventurejam-reviews/"/>
    <updated>2015-05-02T13:51:55-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/05/02/adventurejam-reviews</id>
    <content type="html"><![CDATA[<p>Here are some of my thoughts on my favorite entries to <a href="http://jams.gamejolt.io/adventurejam">#adventurejam</a> so far.  Voting ends in a little over two weeks.  So, I&rsquo;m not ruling out the possibility of looking at more games.</p>

<!--more-->


<h2><a href="http://jams.gamejolt.io/adventurejam/games/ree-s-ruined-earth-courier-service-shipment-delayed/60572">Ree&rsquo;s Ruined Earth Courier Service: Shipment Delayed</a></h2>

<ul>
<li>Amazing graphics.</li>
<li>Loving the dialogue.</li>
<li>I played the Unity version.</li>
</ul>


<p>I find the story, characters, and world-building totally compelling.</p>

<p>Unfortunately interacting with the world is proving difficult.  I could use some indication of when I can walk offscreen.  I think that could help with some pathfinding issues.</p>

<p>I&rsquo;d really like to see more work done on this game, and I&rsquo;d like to see more content in the Ree&rsquo;s universe.</p>

<h2><a href="http://jams.gamejolt.io/adventurejam/games/the-endless-night-prelude/58725">The Endless Night</a></h2>

<p>For as much as I wanted to play this game, I couldn&rsquo;t.  The platform restrictions kept me from trying this interesting looking game.  I think the graphics for this game look pretty cool.</p>

<h2><a href="http://jams.gamejolt.io/adventurejam/games/speak-of-the-cloud/60613">Speak of the Cloud</a></h2>

<ul>
<li>Sound effects do a good job of situating the experience in a world.</li>
<li>Loving the <em>Dr. Strangelove</em> allusions.</li>
<li>Character animations are impressive, and jive well with the cartoon art style.</li>
</ul>


<p>Unfortunately, I couldn&rsquo;t play this game as much as I would have liked.  It&rsquo;s compelling, and the art design really sells intriguing, interactive spaces that make up for the ridiculous pixel-hunting puzzle I encountered.</p>

<h2><a href="http://jams.gamejolt.io/adventurejam/games/walkman/60724">Walkman</a></h2>

<p>Like the animation and the constraint of linear movement.</p>

<h2><a href="http://jams.gamejolt.io/adventurejam/games/cascade/58292">Cascade</a></h2>

<ul>
<li>Got chills from this one.</li>
<li>The sparse sound does a great job of communicating atmosphere.</li>
<li>Got the sense that there was more to this game than there actually was (in a good way), I think due to the writing.</li>
</ul>


<p>Nice scoping for a two-week game jam.  I think this is my runner-up, based on the strength of its story.</p>

<h2><a href="http://gamejolt.com/games/adventure/theropods/58684/">Therapods</a></h2>

<ul>
<li>Great art, animation.</li>
<li>Loving the parallax and layering.</li>
<li>Great sound design.</li>
<li>Great overall design, love the inventory and interface.</li>
<li>Great examples of one-screen puzzles.  The puzzles that I&rsquo;ve heard Tim Schafer call donkey and rider puzzles.</li>
</ul>


<p><em>Theropods</em> is my favorite game of the jam.  Not only did it scope the game correctly for the development team, it was also playable in a reasonable amount of time.</p>

<h2>Conclusion</h2>

<p>So there you have it, go out there and try some of these games.  If you only have time to try one, check out <em><a href="http://gamejolt.com/games/adventure/theropods/58684/">Theropods</a></em>.  It&rsquo;s groovy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aurion and the Aurochs Post-mortem]]></title>
    <link href="http://zerosalife.github.io/blog/2015/04/25/aurion-and-the-aurochs-post-mortem/"/>
    <updated>2015-04-25T10:31:42-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/04/25/aurion-and-the-aurochs-post-mortem</id>
    <content type="html"><![CDATA[<p>Join me as I look back on my <a href="http://jams.gamejolt.io/adventurejam">#adventurejam</a> game, <em><a href="http://jams.gamejolt.io/adventurejam/games/aurion-and-the-aurochs/60738">Aurion and the Aurochs</a></em>.  You can take a <a href="http://gamejolt.com/games/adventure/aurion-and-the-aurochs/60738/">look at the game</a> over on <a href="http://gamejolt.com">gamejolt</a> and you can <a href="https://github.com/zerosalife/aurion">view the sourcecode here</a>.  You can see all of the entries at <a href="http://jams.gamejolt.io/adventurejam/games">adventurejam&rsquo;s site</a>.</p>

<p>I&rsquo;m going to look at things that worked, things that didn&rsquo;t, and the lessons I&rsquo;ll take with me moving forward.</p>

<!--more-->


<h2>What Worked?</h2>

<h3>Pre-planning</h3>

<p>I sketched out the plot using <a href="http://www.lamemage.com/microscope/">Microscope</a> to define events, locations, and potential actions and routes the player could take through the game.  Microscope&rsquo;s 3&#8221;x5&#8221; index card format made it easy to move ideas around when they weren&rsquo;t working.  And it made it easy to see the overall flow of the game.</p>

<p>Once I got the plot Microscope&rsquo;d to my liking, I transferred it to the <a href="https://github.com/zerosalife/aurion#microscope">project&rsquo;s readme</a>, using checkmarks and crosses to represent the filled and unfilled circles of Microscope.  Please note, that there be spoilers, so <a href="http://gamejolt.com/games/adventure/aurion-and-the-aurochs/60738/">go play the game</a> if you haven&rsquo;t yet.</p>

<p>While I wasn&rsquo;t using the circles in the typical way that Microscope proposes, it did help me visualize the potential routes for &ldquo;good&rdquo; and &ldquo;bad&rdquo; alternate endings.</p>

<h3>Twine macros</h3>

<p>I used some <a href="https://github.com/zerosalife/aurion#created-using-artisanal-macros-from">Twine macros</a> for the first time in this game.  I can see how they add some impressive functionality to Twine.</p>

<p>I reckon, if I find the right macros, I would save a ton of time implementing functionality that has already been better implemented as drop-in macros.</p>

<h2>What Didn&rsquo;t Work?</h2>

<h3>Scope</h3>

<p>I set out to create what I thought at the time would be a relatively simple adventure game.  However, I failed to appreciate the combinatorial proliferation of states that blossomed out as I added more and more items and interactions.</p>

<h3>Timeframe and Pacing</h3>

<p>I found the rigid format of the gamejam to be oppressive and stressful.</p>

<h3>Prose</h3>

<p>Because I was so focused on implementing the game I wanted in the time I had, I feel that the initial creative spark that drove me to design <em>Aurion and the Aurochs</em> wasn&rsquo;t allowed to grow into the creative prose flamethrower that I wanted to torch raw palceholder text into a fine <em>crème brûlée</em>.</p>

<p>I can&rsquo;t force that <a href="http://zerosalife.github.io/blog/2014/05/31/hammock-driven-creativity/">hammock-driven imagination</a>, especially when I feel crunched for time.</p>

<h2>What Will I Improve Next Time?</h2>

<h3>Plotting</h3>

<p>I will definitely continue to use Microscope for brainstorming and outlining plots.  It could be fun to collaborate with multiple people on this process, as Microscope is meant to be a multiplayer experience.</p>

<p>It may be worthwhile to write-up the &ldquo;single-player&rdquo; approach I used for Microscope brainstorming.</p>

<p>I&rsquo;d also be interested in trying out Tim Schafer&rsquo;s freewriting technique that I came across in the <a href="http://adventure.doublefine.com/">Double Fine Adventure documentaries</a>.  This probably merits its own post in the future.</p>

<h3>Scope and Pacing</h3>

<p>I will think hard about whether I should participate in gamejams with such strict time requirements for submissions.  I refuse to compromise on work and life commitments to participate in what should be a fun, creative hobby.</p>

<p>I feel emotionally and creatively drained from adventurejam, and I&rsquo;d prefer to have steady, fulfilling creative output.</p>

<p>I think the <em>laissez-faire</em> format of <a href="http://zerosalife.github.io/blog/2014/11/01/make-things-that-make-things-number-procjam-2014/">#procjam</a> was healthier.  I should also note that, although I submitted more things to procjam, the scope of each of those projects was much smaller than my project for #adventurejam.</p>

<p>I think I could have compromised on delivering what was a more or less finished game.  I could have submitted a more prototype-y version that I could work on later.  In fact, I may still refine the prose of <em>Aurion and the Aurochs</em> if I feel so inclined in the future.</p>

<p>That being said, I&rsquo;m happy with the game I was able to deliver in the constraints of the jam.</p>

<h3>Investigate the Twine macro ecosystem</h3>

<p>Maybe in a future post, I&rsquo;ll look into some of the macros out there.  It&rsquo;d be useful to write simple example code too.</p>

<h2>Conclusion</h2>

<p>Well, that&rsquo;s it.  I have some good perspective going forward.  In the coming weeks, I&rsquo;m going to look at some of my favorite submissions and finalize my votes for the contest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aurion and the Aurochs is out]]></title>
    <link href="http://zerosalife.github.io/blog/2015/04/18/aurion-and-the-aurochs-is-out/"/>
    <updated>2015-04-18T12:43:49-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/04/18/aurion-and-the-aurochs-is-out</id>
    <content type="html"><![CDATA[<p>I&rsquo;m happy to announce that my <a href="http://jams.gamejolt.io/adventurejam">#adventurejam</a> game is finished and released.  I&rsquo;ll do a more in-depth post-mortem next week.  In the coming weeks, before the 30-day voting deadline ends, I want to take a look at some of the <a href="http://jams.gamejolt.io/adventurejam/games">other submissions</a> that pique my interest.</p>

<p>You can <a href="http://gamejolt.com/games/adventure/aurion-and-the-aurochs/60738/">play <em>Aurion and the Aurochs</em> on gamejolt</a> and you can <a href="https://github.com/zerosalife/aurion">view the source on github</a>.  Please leave me some feedback in the comments here or on twitter <a href="https://twitter.com/zerosalife">@zerosalife</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Midway through adventurejam I'm attending Midwest Gaming Classic]]></title>
    <link href="http://zerosalife.github.io/blog/2015/04/11/midway-through-adventurejam-im-attending-midwest-gaming-classic/"/>
    <updated>2015-04-11T08:22:57-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/04/11/midway-through-adventurejam-im-attending-midwest-gaming-classic</id>
    <content type="html"><![CDATA[<h2>Quick update on #adventurejam</h2>

<p>I feel like my game is on track to finish next Friday.  I&rsquo;m happy to say it&rsquo;s feature complete.  I&rsquo;ll spend the next week polishing, various flavors of bughunting (maybe even some bugfishing and bugtrapping), and, most important of all, prosifying.  My goal is to come up with a little game that&rsquo;s compelling to play, rather than just a series of links to click.</p>

<h2>Midwest Gaming Classic</h2>

<p>Instead of a normal blog post, I want to take this time to shout out the <a href="http://twitter.com/MGC_gaming">@MGC_gaming</a>, <a href="https://twitter.com/mgc_gaming">Midwest Gaming Classic</a>.  I&rsquo;ll be attending today.  So if you&rsquo;re there hit me up <a href="http://twitter.com/zerosalife">@zerosalife</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Twine games to Game Jolt]]></title>
    <link href="http://zerosalife.github.io/blog/2015/04/04/deploying-twine-games-to-game-jolt/"/>
    <updated>2015-04-04T13:57:39-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/04/04/deploying-twine-games-to-game-jolt</id>
    <content type="html"><![CDATA[<p>The <a href="http://jams.gamejolt.io/adventurejam">#adventurejam</a> started last night.  It lasts two weeks, until April 17.  I&rsquo;ll be covering my participation on here the blog under the <a href="http://zerosalife.github.io/blog/categories/adventurejam/">adventurejam</a> tag.</p>

<p>Today, I&rsquo;m going to deploy small prototype Twine game to <a href="http://gamejolt.com">Game Jolt</a>.  I made this game a while back.  It&rsquo;s a complete prototype, but it&rsquo;s still got some display flaws.  I&rsquo;m putting it out there in all of its buggy glory.  The game served its purpose of familiarizing me with some of the ins and outs of Twine, as well as the build process I <a href="http://zerosalife.github.io/blog/2015/03/28/building-twine-games-from-the-command-line/">described last week</a>.</p>

<h2><em>The Age of the Flying Boat</em></h2>

<p>I made a small prototype game based off of <a href="http://en.wikipedia.org/wiki/Hayao_Miyazaki">Hayao Miyazaki</a>&rsquo;s comic that was turned into the movie <em><a href="http://www.imdb.com/title/tt0104652/">Porco Rosso</a></em>.  You must figure out how to fuel-up and start your airplane to respond to a desperate call for help.</p>

<p>You can play it <a href="http://gamejolt.com/games/adventure/the-age-of-the-flying-boat/58040/">here on Game Jolt</a>.</p>

<!--more-->


<h2>Deploying a Twine game to Game Jolt</h2>

<p>Here&rsquo;s what it took for me to deploy my first game on Game Jolt.</p>

<h3>Play by the rules</h3>

<p>First, I had to agree to the rules.</p>

<h3>Title, links, and copy</h3>

<p>Next up, I had to enter some information about my game.</p>

<h3>Thumbnail and maturity rating</h3>

<p>Then, I had a couple of necessary things to do: uploading a thumbnail and setting a surprisingly detailed maturity rating for my game.  There were several optional steps that I skipped for this game prototype.</p>

<p>There were a lot of headaches with the &ldquo;thumbnail&rdquo;.  It must be 16:9 and it must be at least 588 pixels tall.  Sounds like a full screenshot, to me.  But, this constraint is necessary because Game Jolt uses a bunch of different dimensions to display the thumbnail on the website.</p>

<h3>Game Distribution</h3>

<p>For my next trick, I uploaded a Game Distribution of the HTML persuasion.  I needed to upload a zip file containing my twine-generated <code>index.html</code>.</p>

<h3>Unhiding so people can play your game</h3>

<p>Now, here&rsquo;s the critical part.  Pay attention.</p>

<p>There were two (2) final steps to make my game available on the site:</p>

<ul>
<li><p>First, I had to unhide my game&rsquo;s profile when I was satisfied with information I entered.</p></li>
<li><p>Second, and most importantly, I had to specifically unhide the <code>html</code> we uploaded as a Game Distribution in the Distributions tab.</p></li>
</ul>


<h2>Whew!</h2>

<p>If you&rsquo;ve followed along this far, we did it!  We uploaded a game to Game Jolt.  It&rsquo;s a surprisingly detailed process, but that amount of detail gives you a lot of tools make your game&rsquo;s presentation shine.</p>

<p>Go check out <em><a href="http://gamejolt.com/games/adventure/the-age-of-the-flying-boat/58040/">The Age of the Flying Boat</a></em> and let me know what you think in the comments or on <a href="http://twitter.com/zerosalife">twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Twine games from the command line]]></title>
    <link href="http://zerosalife.github.io/blog/2015/03/28/building-twine-games-from-the-command-line/"/>
    <updated>2015-03-28T10:20:35-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/03/28/building-twine-games-from-the-command-line</id>
    <content type="html"><![CDATA[<p>I got it in my craw to write a short <a href="http://twinery.org/">Twine</a> game a while back.  I wanted to familiarize myself with the language.  And writing a short game in Twine seemed to be lower hanging fruit than trying to implement my own text adventure framework for Unity or some other game engine.</p>

<!--more-->


<h2>Why not Unity?</h2>

<p>That being said, there are other text adventure frameworks available in the Unity App Store and there&rsquo;s a very intriguing Twine parser for Unity called <a href="http://www.platoevolved.com/blog/unity-plugins/#!/~/product/category%3D2743024&amp;id%3D35627540">Yarn</a>.</p>

<p>Yarn seems well suited to writing Bioware- and Black Isle-style dialogues, where individual characters&#8217; dialogues are stored in separate Twine files with scripts to load them at runtime.  It doesn&rsquo;t seem like it does anything to solve the woes of writing a larger (than one dialog tree) game in the usual Twine GUI.</p>

<p>There&rsquo;s too much to be learned by implementing things available on the Unity App Store for me to pass that up in favor of saving time.  It&rsquo;s true that my time is the most valuable asset I have, but it&rsquo;s also very likely that I&rsquo;ll spend just as much time trying to figure out or modify a Unity plugin from the App Store as I would trying to implement something similar on my own.  That being said, in this case for what I wanted to do, Twine was the path of least resistance.</p>

<h2>Why the command line?</h2>

<p>I live in my text editor.  So, having to write in the Twine GUI tool&rsquo;s rudimentary text editor isn&rsquo;t really my bag.  I&rsquo;ve trained my muscle memory to use these short cuts without thinking.  In fact, I don&rsquo;t even bother to backspace to correct typos, I use the keyboard shortcut in my editor to automatically step through the suggested spelling corrections for the last word.  I&rsquo;m entrenched.</p>

<p>Also, dealing with the visual clutter of the Twine GUI drives me nuts.  If I want 30 links from a single Twine Passage, I don&rsquo;t want to have to do that manually, and I certainly don&rsquo;t want to try to organize it so it&rsquo;s visually appealing.  There&rsquo;re algorithms for that visualizing stuff, and algorithms are better at it (than I am).</p>

<h2>Getting started</h2>

<p>The first step is to <a href="https://github.com/tweecode/twee">install <code>twee</code></a> the command line tool used to compile Twine files.</p>

<p>Then <em>all</em> you have to do is write your story in the proper <a href="https://github.com/tweecode/TwineQuest/wiki/Twee-file-format">Twine file format</a>.  This is the hardest part, not because the syntax is complicated, but because you&rsquo;ve actually got to come up with an interesting and interactive story!</p>

<h2>Compiling your twine files</h2>

<p><code>Twee</code> will output files to HTML formatted in the usual Twine style.  It gets tedious to type commands over and over again, so I automate building the HTML with a Makefile.</p>

<figure class='code'><figcaption><span>Makefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nf">story.html </span><span class="o">:</span> <span class="m">*.tw tweefiles/*.tw</span>
</span><span class='line'>        ~/twee/twee -t sugarcane <span class="nv">$^</span> &gt; <span class="nv">$@</span>
</span><span class='line'>        open story.html
</span><span class='line'>
</span><span class='line'><span class="nf">json</span><span class="o">:</span> <span class="m">*.tw tweefiles/*.tw</span>
</span><span class='line'>        ~/twee/twee -t json <span class="nv">$^</span> &gt; story.json
</span><span class='line'>
</span><span class='line'><span class="nf">clean</span><span class="o">:</span>
</span><span class='line'>        rm -f story.html
</span><span class='line'>
</span><span class='line'><span class="nf">.PHONY</span><span class="o">:</span> <span class="m">json</span>
</span></code></pre></td></tr></table></div></figure>


<p>Placing this Makefile in the root of your twine directory allows you to compile the HTML file by the commands <code>make clean; make</code>.  You can read more about the Makefile syntax in the <a href="http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">GNU make manual</a>.  The Makefile looks for Twine file format ending in <code>.tw</code>, either in the root directory or a directory for <code>tweefiles/</code>.</p>

<p>You can also compile to the JSON format by using <code>make json</code>.</p>

<h2>Getting some of the newer Twine features to work</h2>

<p>I <a href="https://github.com/tweecode/twee/issues/12">couldn&rsquo;t get some of the newer Twine features to work</a> when I compiled the twee code from the command line.  I think this stems from the twee command line tool failing to parse some of the newer features implemented in the Twine GUI.</p>

<p>In order to get some of the newer features to work, use the <code>Makefile</code> to compile the twee code, then import the resulting <code>.html</code> file in the Twine GUI.  Finally export HTML from the Twine GUI.</p>

<p>That being said, it was still nice to rapidly iterate through versions of a story without having to get bogged down in the Twine GUI.  I could write Twine code organized in files in a logical arrangement, then compile them into a single HTML file for testing and release.  Let me know if you have suggestions that would improve this Twine workflow or if you take a different approach.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AdventureJam Prep]]></title>
    <link href="http://zerosalife.github.io/blog/2015/03/21/adventurejam-prep/"/>
    <updated>2015-03-21T09:53:07-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/03/21/adventurejam-prep</id>
    <content type="html"><![CDATA[<p>In <strong>two weeks</strong>, April 3 &ndash; April 17, <a href="https://twitter.com/fenderbenter">Cassie Benter</a> and <a href="https://twitter.com/stacydavidson">Stacy Davidson</a> are hosting a game jam focused on creating adventure games called <a href="http://adventurejam.org">#adventurejam</a>.  I share the organizers&#8217; love of point-and-click adventure games, and I&rsquo;m totally thrilled to announce my participation.  AdventureJam is a fortnight-long competition to create and adventurous game-ish experience.</p>

<p>The <a href="http://jams.gamejolt.io/adventurejam/rules">rules</a> of AdventureJam are more strict than <a href="http://procjam.tumblr.com/">#procjam</a>, <a href="http://zerosalife.github.io/blog/2014/11/01/make-things-that-make-things-number-procjam-2014/">the jam I participated in last fall</a>.  They require that the work on a game take place over the two weeks of the AdventureJam competition.  I don&rsquo;t expect to have the time to create something that is truly competitive, but I may as well play along.  Like #procjam, I plan on spending the next series of blog posts covering AdventureJam-related content.</p>

<p>So, click every pixel on the screen, grab everything in sight, exhaust every dialog option, and combine items in new and mysterious ways, it&rsquo;s <a href="https://twitter.com/hashtag/AdventureJam?src=hash">#adventurejam</a> time.</p>

<!--more-->


<p>I&rsquo;d like to spend the rest of this post exploring the options in terms of game engines for creating adventure games.  The website and forums were great resources for constructing this list.  And I suspect that I&rsquo;ll come across some new resources as the jam progresses.</p>

<h2>Engines (Or, A Decidedly Unresearched and Perfunctory List)</h2>

<h3>Graphical</h3>

<h4>Windows</h4>

<ul>
<li><p><a href="http://www.adventuregamestudio.co.uk/">http://www.adventuregamestudio.co.uk/</a></p></li>
<li><p><a href="http://dead-code.org/home/">http://dead-code.org/home/</a></p></li>
</ul>


<h4>Non-windows</h4>

<ul>
<li><p><a href="http://codecanyon.net/item/jaguar-lucasarts-adventure-game-engine/8753130">http://codecanyon.net/item/jaguar-lucasarts-adventure-game-engine/8753130</a></p></li>
<li><p><a href="http://www.visionaire-studio.net/">Visionaire</a></p></li>
<li><p><a href="http://www.alpacaengine.com/">http://www.alpacaengine.com/</a></p></li>
</ul>


<h4>Unity</h4>

<ul>
<li><p><a href="http://age.seccia.com/">http://age.seccia.com/</a></p></li>
<li><p><a href="http://www.adventurecreator.org/">Adventure Creator</a></p></li>
</ul>


<h3>Text</h3>

<ul>
<li><p><a href="http://inform7.com/">Inform</a></p></li>
<li><p><a href="http://textadventures.co.uk/quest">Quest</a></p></li>
<li><p><a href="http://twinery.org/">Twine</a></p></li>
</ul>


<h2>The Adventure Jam Forums</h2>

<p>The <a href="http://www.adventurejam.org/forums/">#adventurejam forums</a> were a great resource for constructing this overview of adventure game engines.  I only expect the information there to grow as the jam progresses.</p>

<h2>My Plan</h2>

<p>Given my workload, familiarity with and access to the tools listed above, and artistic abilities, I&rsquo;m going to go with Twine to get any real progress done in the time constraints.</p>

<p>Like my <a href="http://zerosalife.github.io/blog/categories/procjam/">series of posts on #procjam</a>, I&rsquo;ll tag all the <a href="http://zerosalife.github.io/blog/categories/adventurejam/">posts related to AdventureJam</a> so they&rsquo;re easily accessible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Math Team Hearts]]></title>
    <link href="http://zerosalife.github.io/blog/2015/03/14/math-team-hearts/"/>
    <updated>2015-03-14T14:14:29-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/03/14/math-team-hearts</id>
    <content type="html"><![CDATA[<p>Math Team Hearts is a speedy modification to Hearts that ironically involves less math than the vanilla game.</p>

<!--more-->


<p>From <a href="http://www.crcpress.com/product/isbn/9781482217162">Game Design Workshop</a> by <a href="https://twitter.com/kinojabber">Tracy Fullerton</a>:</p>

<blockquote><p>One good way to train yourself in the design of game mechanics is to challenge yourself with controlled design exercises in which you take an existing game system, set a new player experience goal, and make changes to the system to meet that goal.</p></blockquote>

<h2>The Goal</h2>

<p>We needed a game that played quickly, without a defined endpoint (e.g. when one player reaches 100 points in normal <em>Hearts</em>) because this game was played in free time waiting for school to start or waiting for the bus.  There was no time to spend tallying up scores, counting hearts and doing awkward math.</p>

<p>The rules also modify the risk-reward value of shooting the moon to make it more attractive.  We found the game to be more interesting when multiple parties were invested in shooting the moon with less drawback from accumulating hearts.</p>

<h2>The Rules</h2>

<p>The game plays like normal <em><a href="http://en.wikipedia.org/wiki/Hearts">Hearts</a></em>, except taking <strong>hearts</strong> no longer gives you points.</p>

<ul>
<li>Taking any number of <strong>hearts</strong> without <strong>shooting the moon</strong> gives you 0 points.</li>
<li>Taking no <strong>hearts</strong> in a round gives you 1 point.</li>
<li><strong>Shooting the moon</strong> gives you 2 points.</li>
<li>Taking the <strong>queen of spades</strong> without <strong>shooting the moon</strong> gives you -1 point.</li>
</ul>


<p>The <strong>player</strong> with the most points at the end of play wins.</p>

<p>For more variety, use <strong>dealer</strong>&rsquo;s choice drafting rules.  Each round, the <strong>dealer</strong> decides on how players will pass cards prior to play.
<strong>Players</strong> take turns dealing.</p>

<h2>Tweaks</h2>

<p>I&rsquo;m working from memory, so I&rsquo;m not sure I&rsquo;ve got the point values exactly right.  Perhaps there should be more of a penalty for taking the Queen without shooting the moon.  That would create a more exciting risk-reward trade-off.</p>
]]></content>
  </entry>
  
</feed>
