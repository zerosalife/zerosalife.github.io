<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[zero's a life]]></title>
  <link href="http://zerosalife.github.io/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2014-07-26T09:15:25-07:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Space Is Read]]></title>
    <link href="http://zerosalife.github.io/blog/2014/07/26/space-is-read/"/>
    <updated>2014-07-26T09:08:44-07:00</updated>
    <id>http://zerosalife.github.io/blog/2014/07/26/space-is-read</id>
    <content type="html"><![CDATA[<p>The cinematically inspired <a href="http://tdlk.itch.io/space-is-red">Space Is Red</a> is not so much a game as it is a visual novel.  Out of the games I tried from the <a href="http://itch.io/jam/space-cowboy-jam">#spacecowboygamejam</a>, it&rsquo;s one that sticks with me.</p>

<p>On the spectrum of play, these sorts of games are loosely analogous to Choose Your Own Adventure books.  Just as a Choose Your Own Adventure book expects the player to turn to a given page according to the rules laid out at the bottom of the pages to proceed in a consistent, logical fashion, the tropes of a visual novel require the player to interact with the game in order for the story to proceed.  A novel will proceed with the only &lsquo;player&rsquo; interaction consisting of turning to the next page.  I&rsquo;m oversimplifying the difference between <em>real choices</em>, as I would argue, Choose Your Own Adventure Books allow, and <em>mere interactivity</em>, like turning the page of a novel, but you get what I mean.</p>

<p>Visual novels can have real choices and interactivity.  In this case, I&rsquo;d argue that Space Is Red is only interactive.  There are no real choices, short of figuring out the next bit to tap on in order to move the story along.  For me, it&rsquo;s the music that makes the experience gel as something more than an animated e-book.</p>

<p>I don&rsquo;t mean to be presumptuous in my analysis of Space Is Red&rsquo;s gameplay, don&rsquo;t get me wrong.  I&rsquo;m not interested in arguments about merit simply based on A <strong>is</strong> a game but B <strong>isn&rsquo;t</strong>, so A is better.  I just think it&rsquo;s important to think about these sorts of things when considering the underlying design.</p>

<p>I left the game looping <a href="https://soundcloud.com/postpre">PostPre&rsquo;s</a> driving soundtrack for 15 minutes, even though my first play-through lasted only 2 or 3.  Maybe that&rsquo;s the benefit of interactivity and choices, to extend and prolong the mindshare of some experience or product with the player.  I don&rsquo;t necessarily mean that in a cynical way, although the typical model of play can be subverted for more manipulative means (and, of course, it is!).</p>

<p>For me, Space Is Red hit all the right notes and left me with something to think about.  That is what I call a successful gamejam game.  You can see Space Is Red and the other #spacecowboygamejam entries <a href="http://itch.io/jam/space-cowboy-jam">here</a>.  If you&rsquo;re interested in learning more about Space Is Red&rsquo;s creator <a href="http://toddluke.com/">Todd Luke</a>, you can find an interview <a href="http://www.gamasutra.com/blogs/TalhaKaya/20140711/220825/Finding_Beauty_in_Imperfection_Interview_with_Todd_Luke.php">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Strength of the Pitch: Jodorowsky's Dune]]></title>
    <link href="http://zerosalife.github.io/blog/2014/07/19/the-strength-of-the-pitch-jodorowskys-dune/"/>
    <updated>2014-07-19T08:42:35-07:00</updated>
    <id>http://zerosalife.github.io/blog/2014/07/19/the-strength-of-the-pitch-jodorowskys-dune</id>
    <content type="html"><![CDATA[<p>I was fortunate enough to catch a screening of <em><a href="http://jodorowskysdune.com/">Jodorowsky&rsquo;s Dune</a></em>, the documentary about <a href="http://en.wikipedia.org/wiki/Alejandro_Jodorowsky">visionary director Alejandro Jodorowsky&rsquo;s</a> failed attempt to adapt the science fiction novel <em><a href="http://en.wikipedia.org/wiki/Dune_(novel">Dune</a>)</em> to the silver screen.  Having seen a similar <a href="http://www.imdb.com/title/tt0308514/">documentary about Terry Gilliam&rsquo;s attempt at adapting Don Quixote</a>, I consider myself a fan of the genre, despite its niche appeal.</p>

<p>One quick note before we go on.  It looks like <em>Jodorowsky&rsquo;s Dune</em> has hit Netflix on DVD, and seems a likely candidate to be available for streaming.  So you can check it out for yourself to see if you agree with my take.</p>

<!--more-->


<h2>Pitching</h2>

<p>Jodorowsky looks back, with good-natured humor, on a massively overambitious project for its time.  Aside from the amazing concept art and avant-garde stylings, I took away two messages from the documentary that I would like to share.  The first deals with the art of pitching your ideas and the second with locating oneself in close to proximity to the best and the brightest potential collaborators.</p>

<p>Jodorowsky set out to create a huge book&mdash;more of a cinder block.  It&rsquo;s probably what we could call a design bible today, which would be delivered to production companies in order to secure funding.  By creating a book of storyboards and character designs, Jodorowsky wanted to show that the project was large in scope but feasible, because it had been so intricately planned.</p>

<p>Jodorowsky reached out to a variety of concept artists to help with the design of the movie.  To visual and technical artists, Jodorowsky made impassioned pitches, claiming that they would become &ldquo;spiritual warriors&rdquo; for their collective vision, and implored them to come live and work (for little or no pay) in Paris.</p>

<p>What stands out is the strength of Jodorowsky&rsquo;s pitch.  At a time when artists like <a href="http://www.chrisfossart.com/">Chris Foss</a>, <a href="http://en.wikipedia.org/wiki/Jean_Giraud">Moebius</a>, and <a href="http://www.hrgiger.com/">H.R. Giger</a> were each becoming established in their own rights, Jodorowsky was able, through the sheer strength of an imagined story, to convince them to devote years of effort to the project.  That takes a lot of gumption.  It didn&rsquo;t hurt that Jodorowsky had a strong track record of visually and thematically impressive avant-garde cinema.  Even still, Jodorowsky is great at selling the idea, and that is something that game designers must do, to communicate ideas to others in order to capitalize on the individual talents and assemble a great team.</p>

<h2>Placement</h2>

<p>The second message I took away deals with putting yourself into the right place at the right time.  It&rsquo;s also about leveraging that placement to connect and collaborate.</p>

<p>The documentary showed a curious problem of the movie&rsquo;s mid-Seventies inception.  How do you find people to collaborate with, or even people at all, before the Internet?</p>

<p>The solution: go to Paris.  That&rsquo;s where all the intelligentsia congregate.  This was more or less true for several hundred years before the Internet.  If you want <a href="http://en.wikipedia.org/wiki/Salvador_Dal%25C3%25AD">Salvador Dali</a> in your movie, playing the <a href="http://dune.wikia.com/wiki/Padishah_Emperor">Emperor of the Known Universe</a>, go to Paris and you&rsquo;ll probably run into Dali.</p>

<p>Now we all live in our decentralized <a href="http://en.wikipedia.org/wiki/Temporary_Autonomous_Zone">temporary autonomous zones</a>.  But for as much as they can fragment, social media have the ability to connect disparate artists and thinkers.</p>

<p>I think that Twitter is a platform that serves as a modern Paris, for like-minded people to seek each other out and communicate.  Go congregate with the intelligentsia and let your ideas speak for themselves.  Hit me up on the proverbial tweets, and let me hear your ideas and pitches.  I&rsquo;m constantly working on mine&mdash;writing here, trying to refine my skills.  Maybe we are both looking for the talents that we can provide.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playable Call For Papers]]></title>
    <link href="http://zerosalife.github.io/blog/2014/06/21/playable-call-for-papers/"/>
    <updated>2014-06-21T08:20:23-07:00</updated>
    <id>http://zerosalife.github.io/blog/2014/06/21/playable-call-for-papers</id>
    <content type="html"><![CDATA[<p><a href="http://www.twitter.com/mtrc">Michael Cook</a> made a &ldquo;needlessly interactive&rdquo; <a href="http://www.exag.org/playablecfp/">playable call for papers</a> for the <a href="http://www.exag.org/">Experimental AI in Games conference</a>, taking place in October in Raleigh, NC.  It&rsquo;s a minimally expressive Twine story, with really one simple interactive experience of role-playing the interaction a recipient feels upon receiving yet another CFP email, <em>click</em>.</p>

<p>It&rsquo;s a tricky thing to get right.  While it makes sense for a game-related conference to have a text adventure announcement, I don&rsquo;t want to have to play a game of Frogger to purchase movie tickets from the automated kiosk at the movie theater.  It would be nice if the playable CFP included prominent and consistent links to exit the game, in order to read the ordinary CFP on the conference website.</p>

<p>I believe the motivating idea is sound.  Turning banal daily routine into a playful interactive experience is a worthy goal for game design.  It has the ability to startle the player into paying more attention to mundane activities, which I think is the intended goal&mdash;for a CFP to stand out from piles of other CFP emails.</p>

<p>Let me know if you&rsquo;ve come across games in strange places.  I don&rsquo;t mean finding a boxed copy of Mario Kart at the flea market&mdash;I mean conceptually strange places.  Hit me up on twitter if you&rsquo;ve got ideas like this to discuss, because I think this approach of creating small play experiences to &ldquo;gamify&rdquo; mundane tasks is an emerging theme of design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you should start simple]]></title>
    <link href="http://zerosalife.github.io/blog/2014/06/07/why-you-should-start-simple/"/>
    <updated>2014-06-07T11:58:34-07:00</updated>
    <id>http://zerosalife.github.io/blog/2014/06/07/why-you-should-start-simple</id>
    <content type="html"><![CDATA[<p><a href="http://twitter.com/hobbygamedev">@HobbyGameDev&rsquo;s</a> long-read <a href="http://www.hobbygamedev.com/beg/incremental-learning/">&ldquo;Reasons for Modest First Projects and Incremental Learning&rdquo;</a> tells the tragic tale of overambitious novice developers.</p>

<!--more-->


<p>In a response to a doubting tweeter, HGD advocates starting modestly to slowly build skills, so that you can tackle more complicated projects later on.  Avoiding overambitious projects that are way outside of your comfort zone is one of the stumbling points for novice and hobby game developers, like myself.</p>

<p>In the <a href="http://zerosalife.github.io/blog/2014/05/31/hammock-driven-creativity/">previous post about Hammock Driven Creativity</a>, I highlighted Rich Hickey&rsquo;s suggestion to keep multiple projects going in order to avoid stagnation.  While I agree with this, it&rsquo;s important to judge the scope of those projects with a critical eye.</p>

<p>Far too often, my ideas start, at least in my mind, with ambitious artwork, animation, and multiple complex combinations of mechanics.  I am neither talented nor skilled enough to pull these projects off.  So it&rsquo;s easy to get stuck.</p>

<p>I often find myself implementing some ad-hoc animation system, spending time reinventing the frame-based or skeletal wheel, as it were.  Animation shouldn&rsquo;t take priority, especially considering that my best artwork is derivative and possibly one step above programmer art.  I should focus on creating compelling prototypes, and worry about polish later.</p>

<p>To build your skillset, HGD suggests starting out by remaking historical games.  By implementing tried-and-true mechanics that are necessarily simple in scope given their ancient hardware, you can confront the problems involved in creating a full game rather than a half-finished proof-of-concept.</p>

<p>By half-finished, I&rsquo;m thinking of a time where I completely abandoned a concept because I was hung-up on optimizing a tile-based room system.  Rather than making the actual gameplay fun and complete, I was focusing all of my time figuring out how to make walls.  Walls are nice in a finished game, and you could make the case that they are required constraints to achieve good gameplay, but they are not where the fun is.  As HGD and my previous post point out, you can keep trying to work on these overly ambitious projects, but your productivity will suffer.</p>

<p>Best to reap the rewards that come from continued productivity and, as HGD says, pick a fight you can win.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hammock Driven Creativity]]></title>
    <link href="http://zerosalife.github.io/blog/2014/05/31/hammock-driven-creativity/"/>
    <updated>2014-05-31T09:28:40-07:00</updated>
    <id>http://zerosalife.github.io/blog/2014/05/31/hammock-driven-creativity</id>
    <content type="html"><![CDATA[<p>In 2010, <a href="https://twitter.com/richhickey">Rich Hickey</a> spoke at Clojure Conj about <a href="http://www.youtube.com/watch?v%3Df84n5oFoZBc">&lsquo;Hammock Driven Development&rsquo;</a>.  Hickey was talking about the benefit of down-time for noodling about software design.  Specifically, Hickey means using down-time after considerably &lsquo;loading up&rsquo; your mind with aspects of the problem, in order to leverage background offline processes to solve those difficult problems.</p>

<!--more-->


<h2>Wait</h2>

<p>Hickey&rsquo;s advice is to wait for it.  Wait overnight.  Get good rest and make sure that you are sleeping well.  Then you will be able to think about the clearly on the next day.  If you are lucky perhaps you will receive inspiration from a dream and wake up with the problem solved.  This sort of inspiration is what Hickey means by leveraging background processing.</p>

<h2>Multiply</h2>

<p>Hickey mentions working on more than one project.  By having multiple projects, you avoid the problems of creative block, or writer&rsquo;s block.  You can be productive simply by working on another project.  One drawback is that frantically flitting from project to project can lead to problems finishing any single project.  I am often guilty of this.</p>

<p>Eventually, I plan on writing about properly scoping projects to make it possible to get them to a finished state.  One method that works for me is getting something to the point that I can write a blog post about it.  Even if it&rsquo;s not &lsquo;finished&rsquo; finished, I get some satisfaction with putting it out there in a relatively well thought out and complete form.</p>

<p>My solution is to <strong>record, record, record</strong>.  I keep lots of notes, both in more structured form on this blog and in more sketchy form in files on my computer.  I also draw out visual design ideas in a notebook.  Sometimes I will set up skeleton game projects simply to test out an idea.  If I have some sudden insight into a problem, then all of these ideas are available later.</p>

<h2>Switch</h2>

<p>Hickey says to avoid being stuck, switch.  That is why having multiple projects can help.  Hickey also mentions a great suggestion of talking about design hiccups and problems with other people.  Tweet about your design roadblocks.  Write a blog post about them.  Telepathically communicate about them before you go to sleep, so magical dream elves can come and solve them for you.</p>

<h2>Final Thoughts</h2>

<blockquote><p>Summary: There is no summary.  This is a rant.</p></blockquote>

<p>-Rich Hickey</p>

<p>Unless you are Rich Hickey or&#x2013;I dunno&#x2013;Gary Gygax, simply thinking about a problem <em>a priori</em> will not result in a great game.  There is still something to be said for getting your hands dirty and iterating on a design.  However the techniques highlighted in Hickey&rsquo;s talk can be useful when you are stuck on a design problem.</p>

<p>Hit me up in the comments or on the <a href="https://twitter.com/zerosalife">tweet tweet</a> if you have any great Hammock Driven Design tips that I haven&rsquo;t covered here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quarries of Scred Roadmap]]></title>
    <link href="http://zerosalife.github.io/blog/2014/05/24/quarries-of-scred-roadmap/"/>
    <updated>2014-05-24T13:49:08-07:00</updated>
    <id>http://zerosalife.github.io/blog/2014/05/24/quarries-of-scred-roadmap</id>
    <content type="html"><![CDATA[<p>The <a href="http://darkestkale.itch.io/quarries-of-scred">Quarries of Scred</a> <a href="https://twitter.com/darkestkale">developer</a> released an image showing the overview of Scred&rsquo;s 14-day game development.  I find it informative for a couple of reasons.  First it&rsquo;s not limited to the core features of the game, Kale&rsquo;s also included public relations and marketing information.  Second, the fact that it&rsquo;s incomplete shows how Kale&rsquo;s prioritized critical elements of the game.</p>

<p>Rather than blatantly stealing the <a href="http://www.indiedb.com/games/quarries-of-scred/images/quarries-of-scred-roadmap-2013-11-28-01">roadmap for Quarries of Scred</a>, I&rsquo;ll give you a few seconds to go and capture an eidetic mental image.  Got it?  Great.  I guess all you cheaters who opened it another tab can follow along too.</p>

<!--more-->


<h2>Core Gameplay</h2>

<p>Looking at the presumably completed &lsquo;green light&rsquo; items, Core Gameplay is almost finished.  And it should be.  Without Core Gameplay, there&rsquo;s not much game to be played.</p>

<p>It looks like they have not included actual aspects of the core mechanic implementation on this roadmap.  However, they&rsquo;re using the roadmap as a method of cataloging oft-overlooked features that add polish to the final game.</p>

<p>They have a milestone for implementing a persistent high score system.  This hurdle is easy to imagine, since we see it in almost every game we play.  But it can be tricky to implement in a robust and efficient manner.</p>

<p>Several elements of UI are included on the roadmap.  They could be neglected in a prototype, these UI elements can make a finished game welcoming for new players and compelling enough to replay.  Info screens can clarify the world for tyros and explicitly show unique challenge states to experienced players.  Death information, like gravestones in Nethack, provides potentially entertaining feedback for the players attempting to hone their skills at the game.</p>

<p>I&rsquo;m not sure whether they finished implementing rocket ship building gameplay in Quarries of Scred, but this should be a goal for every game.</p>

<h2>PR</h2>

<p>Marketing is an aspect of game development that is easy to overlook as an inexperienced indie or hobby gamedev with a few gamejams under your belt.  The pressure to simply finish a game, any shippable game, overshadows what to do with it once it&rsquo;s released.</p>

<p>Setting up an IndieDB page to track the progress is a great idea.  And, since it doesn&rsquo;t necessarily require a finished product, it can be done early on in the development process.  The priorities of creating an IndieDB Icon, Header Image, and Preview Image show Kale&rsquo;s clearly interested in branding Scred as a marketable indie title.</p>

<p>I can confirm that a <a href="https://www.youtube.com/watch?v%3DBrZ_POiKJO4">Trailer</a>, <a href="http://darkestkale.itch.io/quarries-of-scred">Website</a>, and <a href="http://img.itch.io/aW1hZ2UvODc0LzQ0MTIucG5n/original/Npan5L.png">Box Art</a> came along in due time.  The inclusion of Box Art in a download only indie title is particularly charming, even in an atmosphere awash with these things, the art for Scred&rsquo;s box is fun and quaint, in a good way.</p>

<h2>Further Content</h2>

<p>Further Content looks like features that would directly build on those already implemented in the game.  Rather than being classified as Fluff, these extra features would complement the content and features already implemented in the game.</p>

<p>It&rsquo;s important to have the courage to &lsquo;kill your darlings&rsquo; in cases like this.  Some of the items under Fluff like pretty important to making a good game, but if they are too demanding to fit in the schedule allotted to create the game, they have to go.</p>

<p>One of the buildings has made it in.  And I think the second building is in the final game. Not sure whether the Rare Flower survived.</p>

<h2>Bookending</h2>

<p>The Bookending category looks like a lot of the UI improvements I talked about above.  They certainly improve players&#8217; experience, but they may not be absolutely necessary to get the game out the door.</p>

<p>I can only speculate that configurable keys are highlighted in gray because it would be silly not to include them.  For that matter, everything except troubleshooting info adds delicious spice to the well-seasoned dish that the Core Gameplay milestones create.</p>

<h2>Fluff</h2>

<p>It looks like the Fluff category represents additional features that aren&rsquo;t required to make a working game.  The ability to select a seed is probably a new system that requires designing and implementing, much like the UI stuff in the Bookending category.  New Sprites and Death Animation are probably a similar story.</p>

<p>You may argue that music and sound are critical for a completed game.  But if you are not a musically inclined person, the shear amount of work required to get something that sounds like the death-throes of a thousand Gameboys (note: this is not a good thing) could double your production time.  The New Sprites mentioned in the previous paragraph are probably a similar case of requiring too much time that could be more productively devoted elsewhere in the project.</p>

<h2>Closing Thoughts</h2>

<p>This kind of frank openness about game design is unusual to get prior to the publication of a game.  It&rsquo;s really great to see the design documents behind a game, even if it comes out years after release.  It&rsquo;s especially informative to see an in-progress version where the developer is unafraid to lay the goals out there, to show where the project succeeds and possibly falls short.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.gitignore for Unity projects]]></title>
    <link href="http://zerosalife.github.io/blog/2014/05/17/dot-gitignore-for-unity-projects/"/>
    <updated>2014-05-17T09:48:06-07:00</updated>
    <id>http://zerosalife.github.io/blog/2014/05/17/dot-gitignore-for-unity-projects</id>
    <content type="html"><![CDATA[<p>I found a solution on the <a href="http://answers.unity3d.com/questions/369755/unity-on-github.html">Unity website</a> that pointed me toward <a href="http://t-machine.org/index.php/2012/07/03/unity-git-source-control-a-basic-gitignore/">this blogpost</a>.  But a better solution is out there.  The Double Fine Game Club&rsquo;s Bad Golf Community Edition <a href="https://github.com/Double-Fine-Game-Club/bad-golf-community-edition/blob/master/.gitignore">.gitignore</a> looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>Ll<span class="o">]</span>ibrary/
</span><span class='line'><span class="o">[</span>Tt<span class="o">]</span>emp/
</span><span class='line'><span class="o">[</span>Oo<span class="o">]</span>bj/
</span><span class='line'>build_Data/
</span><span class='line'>
</span><span class='line'><span class="c"># Autogenerated VS/MD solution and project files</span>
</span><span class='line'>*.csproj
</span><span class='line'>*.unityproj
</span><span class='line'>*.sln
</span><span class='line'>*.exe
</span><span class='line'>*.userprefs
</span><span class='line'>
</span><span class='line'><span class="c"># OS generated files #</span>
</span><span class='line'><span class="c">######################</span>
</span><span class='line'>.DS_Store
</span><span class='line'>.DS_Store?
</span><span class='line'>._*
</span><span class='line'>.<span class="o">[</span>Ss<span class="o">]</span>potlight-V100
</span><span class='line'>.<span class="o">[</span>Tt<span class="o">]</span>rashes
</span><span class='line'><span class="o">[</span>Ee<span class="o">]</span>hthumbs.db
</span><span class='line'><span class="o">[</span>Tt<span class="o">]</span>humbs.db
</span><span class='line'>*~
</span><span class='line'>*#*
</span></code></pre></td></tr></table></div></figure>


<p>This is the <code>.gitignore</code> I&rsquo;m currently using in my projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Follow-up to the centrality of caves]]></title>
    <link href="http://zerosalife.github.io/blog/2014/05/10/follow-up-to-the-centrality-of-caves/"/>
    <updated>2014-05-10T08:27:49-07:00</updated>
    <id>http://zerosalife.github.io/blog/2014/05/10/follow-up-to-the-centrality-of-caves</id>
    <content type="html"><![CDATA[<p>My <a href="http://zerosalife.github.io/blog/2014/05/03/why-are-caves-central-to-so-many-games/">post last week</a> about caves struck a nerve.  I received a lot of encouraging retweets and favorites.  I also received some great feedback.</p>

<p>Paul Diaz points out one design constraint granted by caves that I hadn&rsquo;t considered.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/psysal">@psysal</a> <a href="https://twitter.com/ZerosALife">@ZerosALife</a> very nice. One that supports linearity and design is cave&#39;s are dark. Helps direct attention w/ lighting/effects.</p>&mdash; Paul Diaz (@SleepyTearyEyed) <a href="https://twitter.com/SleepyTearyEyed/statuses/462624220447391744">May 3, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>I think Paul is right, that this falls within the scope of caves&#8217; linearity.  I&rsquo;ve been thinking a bit about a possible taxonomy of cave environments in games, but for the purposes of these posts I&rsquo;ll keep it more general.  A cave is a cave, right?  <a href="http://en.wikipedia.org/wiki/I_know_it_when_I_see_it">We know it when we see it.</a></p>

<p>Any old screen in a game can be cave-like in the way its environmental design constraints fit into the game world.  Here I&rsquo;m using &lsquo;screen&rsquo; to refer to a room in a metroid-like game or a level in other sorts of games&#x2013;some arbitrary atomic unit of division of the game environment constituting a discrete area.</p>

<p>For the purpose of argument, Paul&rsquo;s point forces us to think of the most cave-y of caves, which I think was the intent behind the original question in the first place.  Because caves are dark environments, dank environments, <em>interior</em> environments, they lack the uniform lighting that typically characterizes the exterior &lsquo;overworld&rsquo; in games.  As Paul states, lighting cues can serve as guideposts for the player, directing attention toward the critical path.</p>

<p>I view this example as a manifestation of the fundamental reduction in degrees of freedom of play achieved by the interiority, and thus, linearity of caves.  The fact that there are more walls, and therefore fewer possible places for the player to go, allows for the designer, using careful construction, to communicate intent to the player through the environment itself.  I don&rsquo;t mean to say here that such communication is impossible outside of caves, just that caves are one simple and straightforward way to achieve this constrained, communicative sort of design.  This vocabulary of design showed up early on in the history of games, it worked, and it has persisted.</p>

<p>Thanks and shout outs to <a href="https://twitter.com/sleepytearyeyed">Paul Diaz</a>, whose feedback inspired this follow-up post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why are caves central to so many games?]]></title>
    <link href="http://zerosalife.github.io/blog/2014/05/03/why-are-caves-central-to-so-many-games/"/>
    <updated>2014-05-03T07:46:11-07:00</updated>
    <id>http://zerosalife.github.io/blog/2014/05/03/why-are-caves-central-to-so-many-games</id>
    <content type="html"><![CDATA[<p>On twitter, <a href="https://twitter.com/psysal">@psysal</a> posed this question to the game dev community:</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p>Can someone very smart in game design share insight as to why caves are so central to so many games?</p>&mdash; Calvin French (@psysal) <a href="https://twitter.com/psysal/statuses/456314611428372480">April 16, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>You can see all the responses by following the link to the original tweet.</p>

<p>The consensus is that caves are essential features for games for three reasons.</p>

<ol>
<li>Linearity</li>
<li>Repeatability of composition</li>
<li>Curiosity</li>
</ol>


<!--more-->


<h2>Caves are linear</h2>

<p>In terms of their schematic representation in the design of a game, caves can boil down to one enclosed &lsquo;area&rsquo; or room with a single entrance.  This doesn&rsquo;t account for some of the amazing environments in intricately designed games like <a href="http://en.wikipedia.org/wiki/Super_Metroid">Super Metroid</a>, recently broken down by <a href="https://twitter.com/gamespite">@gamespite</a> in <a href="http://www.anatomyofgames.com/2013/12/08/the-anatomy-of-super-metroid-01-moving-pictures/">the Anatomy of Games series</a>.</p>

<p>But, at the most basic level, a cave must have a mouth, or an entrance, and at least one room.  This simplifies the representation of the critical path of play, because once the cave has been fully explored there are no possible branches that the player could have taken to leave the cave.  The single entrance is also a single exit.  Even if there are many internal rooms, this representation holds true, as long as there are ultimately no &lsquo;back doors&rsquo; out of the cave.</p>

<p>The designer can rely on the fact that once the player has received any rewards for exploring the cave, the player can reasonably be expected to pop out of the entrance of the cave looking for the next available challenge surmountable with any freshly acquired toys.</p>

<h2>Caves offer repeatable composition</h2>

<p>For whatever atavistic significance they hold in our psyches, caves do not have to rely on realistic representations in game design.  Any old hole in some rock will almost invariably create a believable sense of cave-ness.  Yeah, I said cave-ness. You know cave-ocity, general cave-itude.</p>

<p>Since we don&rsquo;t spend much time in caves, day-to-day, we don&rsquo;t hold them to the same level of fidelity to which we would hold, say, buildings or automobiles.  The same architectural details necessary to represent a house in a video game can be painted in broad strokes to represent a cave.</p>

<p>In tile-based games, this means that a designer can reuse tiles over and over again to craft a general shape without worrying too much about players noticing, or being bothered by, the similarities.  Caves are thus more defined by the space created rather than the graphics used to define them.  This sense of space is what drives the third essential feature of caves in game design, a sense of curiosity, the drive to explore.</p>

<h2>Caves are inherently curious</h2>

<p>I&rsquo;m not sure I buy the argument that we have some evolutionary instinct that drives us to explore caves, but the fact remains.  Something about caves begs exploration.</p>

<p>Call it the <em>Will to Spelunk</em>.</p>

<p>Once a space has been created, the player wants to explore every nook and cranny for collectible power ups or items.  Certainly the rewards are powerful motivators.  But there is something to the exploration for exploration&rsquo;s sake.  Simply completing one&rsquo;s mental map of the space becomes a goal in itself.</p>

<h2>Coda</h2>

<p>It&rsquo;s intriguing that caves are such a fixture in the established vocabulary of game design.  The three features highlighted in this post make it clear that caves remain a useful game design pattern because they serve an essential purpose in the ludic lexicon of games.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Rhizome Labeled Edge Tutorial]]></title>
    <link href="http://zerosalife.github.io/blog/2014/04/26/clojure-rhizome-labeled-edge-tutorial/"/>
    <updated>2014-04-26T07:47:18-07:00</updated>
    <id>http://zerosalife.github.io/blog/2014/04/26/clojure-rhizome-labeled-edge-tutorial</id>
    <content type="html"><![CDATA[<p>I&rsquo;m using the <a href="https://github.com/ztellman/rhizome">Rhizome package</a> for Clojure to rapidly prototype the dependency graph for a crafting system.  It&rsquo;s nice to be able to add and remove components while generating visualizations on-the-fly.  Clojure&rsquo;s simple, composable syntax, aided by <a href="https://www.youtube.com/watch?v=D6h5dFyyUX0">paredit</a>, makes shuffling around key-value pairs, and even whole dictionaries, quick and easy.</p>

<p>The existing Rhizome documentation shows simple examples for labeling the nodes of a directed graph.  In order to show the relationship between nodes on the graph, I&rsquo;d like to also label the edges, or the arrows connecting the nodes.</p>

<p>Rhizome provides a keyword argument <code>:edge-&gt;descriptor</code> to most of its functions.  Consulting the source code and the tests for the Rhizome package, I learned that the functions expect <code>:edge-&gt;descriptor</code> to be a function accepting two arguments for each edge: <code>src</code>, the source node, and <code>dst</code>, the destination node.  In order to label the edges, the anonymous function I&rsquo;m binding to <code>:edge-&gt;descriptor</code> will return a dictionary containing the key <code>:label</code> and the value for the edge&rsquo;s label.</p>

<p>Here&rsquo;s an example using the simple graph from the Rhizome documentation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;rhizome.viz</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">g</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:a</span> <span class="p">[</span><span class="ss">:b</span> <span class="ss">:c</span><span class="p">]</span>
</span><span class='line'>     <span class="ss">:b</span> <span class="p">[</span><span class="ss">:c</span><span class="p">]</span>
</span><span class='line'>     <span class="ss">:c</span> <span class="p">[</span><span class="ss">:a</span><span class="p">]})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">view-graph</span> <span class="p">(</span><span class="nb">keys </span><span class="nv">g</span><span class="p">)</span> <span class="nv">g</span>
</span><span class='line'>            <span class="ss">:node-&gt;descriptor</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">n</span><span class="p">]</span> <span class="p">{</span><span class="ss">:label</span> <span class="nv">n</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://zerosalife.github.io/images/assets/graph-unlabeled-edges.png"></p>

<p>Now, I&rsquo;ll use a dictionary of dictionaries to associate the source and destination nodes with a label for each edge.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">g-edges</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:a</span> <span class="p">{</span><span class="ss">:b</span> <span class="ss">:makes</span>
</span><span class='line'>       <span class="ss">:c</span> <span class="ss">:takes</span><span class="p">}</span>
</span><span class='line'>   <span class="ss">:b</span> <span class="p">{</span><span class="ss">:c</span> <span class="ss">:takes</span><span class="p">}</span>
</span><span class='line'>   <span class="ss">:c</span> <span class="p">{</span><span class="ss">:a</span> <span class="ss">:makes</span><span class="p">}})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">view-graph</span> <span class="p">(</span><span class="nb">keys </span><span class="nv">g</span><span class="p">)</span> <span class="nv">g</span>
</span><span class='line'>            <span class="ss">:node-&gt;descriptor</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">n</span><span class="p">]</span> <span class="p">{</span><span class="ss">:label</span> <span class="nv">n</span><span class="p">})</span>
</span><span class='line'>            <span class="ss">:edge-&gt;descriptor</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">src</span> <span class="nv">dst</span><span class="p">]</span> <span class="p">{</span><span class="ss">:label</span> <span class="p">(</span><span class="nf">dst</span> <span class="p">(</span><span class="nf">src</span> <span class="nv">g-edges</span><span class="p">))}))</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://zerosalife.github.io/images/assets/graph-labeled-edges.png"></p>

<p>I&rsquo;ve submitted a <a href="https://github.com/ztellman/rhizome/pull/8">pull request</a> to Rhizome to add this example to the documentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[styx_ebooks]]></title>
    <link href="http://zerosalife.github.io/blog/2014/04/19/styx-ebooks/"/>
    <updated>2014-04-19T12:05:03-07:00</updated>
    <id>http://zerosalife.github.io/blog/2014/04/19/styx-ebooks</id>
    <content type="html"><![CDATA[<p>And now for something completely different: a <a href="http://en.wikipedia.org/wiki/Markov_chain#Markov_text_generators">markov chain text generation</a> twitter bot.  Styx_ebooks tweets random text generated from a corpus of Bangsian fantasy novels.  Its name comes from <a href="http://en.wikipedia.org/wiki/John_Kendrick_Bangs">John Kendrick Bangs</a>&lsquo; novel <em><a href="http://en.wikipedia.org/wiki/A_House-Boat_on_the_Styx">A House-boat on the Styx</a></em> and the general <a href="http://knowyourmeme.com/memes/horse_ebooks">twitter ebooks meme</a>.</p>

<p>I forked it from an earlier project by <a href="https://github.com/jiko">@jiko</a>, <a href="https://github.com/jiko/lovecraft_ebooks">lovecraft_ebooks</a>.  There were some minor implementation hurdles, mainly related to Twitter&rsquo;s API and oauth.  Reading the <a href="https://pypi.python.org/pypi/twitter">python <code>twitter</code> package</a> <code>twitter.oauth</code> docstring set me straight.  You can check out the code in <a href="https://github.com/zerosalife/styx_ebooks">my fork on github</a>.</p>

<p>This sort of text generation algorithm isn&rsquo;t just useful for making annoying twitter bots.  You could alter some of the in-game text or dialog based on a corpus fed into a markov chain text generator. Especially in the case of a Lovecraftian horror game, I can see how this text could serve a thematic purpose in the story.</p>

<p>Say you&rsquo;ve got a Lovecraftian horror game in which the player is an investigator who is trying to figure out what is happening to citizens of Innsmouth.  By interacting with NPCs, the player encounters hand written dialog, with occasional markov-generated gibberish thrown in. The amount of gibberish depends on how corrupted the individual denizens of Innsmouth are becoming.  If the player is not clever enough to determine who is corrupt, the player will be killed.  If the player determines the source of the corruption, the player wins.</p>

<p>Along the same line of reasoning, the concept I&rsquo;m describing here mimics the game <a href="http://www.newgrounds.com/portal/view/634905">ALZ</a>, a touching short, playable in 2 or 3 minutes, which uses glitchy graphics to convey a sense of what it&rsquo;s like to live with Alzheimer&rsquo;s disease to the player.  I came across Dylan Carter&rsquo;s ALZ in a <a href="http://www.animalnewyork.com/2014/making-alz-glitch-fueled-game-alzheimers/">post on the ANIMAL blog</a>.  This approach of literally altering the player&rsquo;s experience of the game world to mimic the subjective experience of characters in the game is ripe for exploration.  I&rsquo;d love to hear about more examples.</p>

<p>You can check out my bot, <a href="https://twitter.com/styx_ebooks">@styx_ebooks</a>, on twitter, happily tweeting the day away.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Fate of Adventure Games]]></title>
    <link href="http://zerosalife.github.io/blog/2014/04/12/the-fate-of-adventure-games/"/>
    <updated>2014-04-12T07:16:59-07:00</updated>
    <id>http://zerosalife.github.io/blog/2014/04/12/the-fate-of-adventure-games</id>
    <content type="html"><![CDATA[<p>Zoyə Street wrote a <a href="https://medium.com/p/3e3c1e20cfd0">summary</a> of an interesting <a href="http://www.omnsh.org/ressources/527/histoire-formelle-du-jeu-daventure-sur-ordinateur-le-cas-de-lamerique-du-nord-de-1976">PhD thesis by Jonathan Lessard</a>.  Lessard examines the history of adventure games, to see whence they&rsquo;ve come and where they&rsquo;ve gone.  Like Street, I think this approach to thinking about video game design and genre provides useful perspective.</p>

<p>Lessard concludes that the adventure game genre didn&rsquo;t vanish, it sublimated into, and was subsumed by, other modern multi-genre games.</p>

<p>For example, consider 3d RPGs incorporating first-person shooter perspective and playstyle.  I could be describing Skyrim or Titanfall, two dramatically different games.</p>

<p>Lessard and Street argue, convincingly, that these sorts of games have all the hallmarks of adventure games, while evolving new forms and structures of play.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Fear Lack of Content]]></title>
    <link href="http://zerosalife.github.io/blog/2014/04/05/dont-fear-lack-of-content/"/>
    <updated>2014-04-05T07:59:37-07:00</updated>
    <id>http://zerosalife.github.io/blog/2014/04/05/dont-fear-lack-of-content</id>
    <content type="html"><![CDATA[<p>Came across a <a href="http://www.egometry.com/gruedorf/a-penny-for-your-thoughts-a-hundred-for-your-life/">nice article</a> on <a href="http://www.egometry.com/">Ben McGraw&rsquo;s blog, Egometry</a>. Using Super Mario Bros. as a model, Ben explains why merely increasing content quantity is less desirable than increasing content substance.  The title of this post is lifted from a quote in his article.</p>

<p>Sometimes exercising a bit of restraint, keeping the focus of your content simple, can still allow for an interesting and engaging player experience.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Twine Tutorial in Twine]]></title>
    <link href="http://zerosalife.github.io/blog/2014/03/29/a-twine-tutorial-in-twine/"/>
    <updated>2014-03-29T08:04:05-07:00</updated>
    <id>http://zerosalife.github.io/blog/2014/03/29/a-twine-tutorial-in-twine</id>
    <content type="html"><![CDATA[<p><a href="http://ryanscasey.com/">Ryan S. Casey</a> incepted a Twine tutorial in a Twine game.  Awesome.  Take a look at it <a href="http://ryanscasey.com/twine/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ICE ICE Baby]]></title>
    <link href="http://zerosalife.github.io/blog/2014/03/22/ice-ice-baby/"/>
    <updated>2014-03-22T07:17:31-07:00</updated>
    <id>http://zerosalife.github.io/blog/2014/03/22/ice-ice-baby</id>
    <content type="html"><![CDATA[<p><a href="http://www.thegia.com/author/avestal/">Andrew Vestal</a> of <a href="http://www.thegia.com/">the GIA</a> wrote a <a href="http://twinery.org/">Twine</a> game for <a href="http://itch.io/jam/cyberpunk-jam">#cyberpunkjam</a> called <a href="http://www.thegia.com/avestal/iceicebaby.html">ICE ICE Baby</a>.</p>

<p>It&rsquo;s playable in a quick ten minutes.  Parts of the game remind me of the sorts imagination games I would play growing up. This is quite a nice conceit for a text adventure, and it works well here.</p>

<p>I especially like the use of color to mark the transitions between meatspace and cyberspace.</p>

<p><a href="http://www.thegia.com/author/nmaragos/">Nich Maragos</a> wrote a more thorough <a href="http://www.thegia.com/2014/03/05/appetite-for-destruction-ice-ice-baby/">critical review</a> on the GIA.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrading to Mavericks]]></title>
    <link href="http://zerosalife.github.io/blog/2014/03/15/upgrading-to-mavericks/"/>
    <updated>2014-03-15T06:03:27-07:00</updated>
    <id>http://zerosalife.github.io/blog/2014/03/15/upgrading-to-mavericks</id>
    <content type="html"><![CDATA[<p>This week I upgraded to <a href="https://www.apple.com/osx/">Mac OS X 10.9 Mavericks</a>.  To keep <a href="http://octopress.org/">octopress</a> working, I had to uninstall and reinstall <a href="https://www.ruby-lang.org/">Ruby</a>.</p>

<p>Upon trying a <code>rake generate</code> task, I saw errors in the Ruby gems for processing <a href="http://www.yaml.org/">YAML</a>.  I assume this is due to the fact that I built them on the older OS X install.</p>

<p>Interestingly, <a href="https://rvm.io/">RVM</a> survived the upgrade and seems to be working just fine.</p>

<p>I followed the instructions <a href="https://gist.github.com/imathis/1104557">here</a> to uninstall and reinstall Ruby, the bundler, and all bundled gems for my octopress install.  The instructions mention a specific problem for OS X Lion, but these steps solved the problem for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cut it all right in two: bisect to find bugs]]></title>
    <link href="http://zerosalife.github.io/blog/2014/03/08/cut-it-all-right-in-two-bisect-to-find-bugs/"/>
    <updated>2014-03-08T08:25:02-08:00</updated>
    <id>http://zerosalife.github.io/blog/2014/03/08/cut-it-all-right-in-two-bisect-to-find-bugs</id>
    <content type="html"><![CDATA[<p>Imagine there&rsquo;s a lion in a desert.  You need to cage the lion or you
will be eaten.  In this example the desert is your code and the lion
is a bug that you&rsquo;re having a hard time pinning down.</p>

<p>There are many ways to trap a lion.  Here&rsquo;s one.</p>

<p>Build a fence dividing the desert in half going North to South.
Assuming the lion is not in the South section, divide the North
section in half with a fence going East to West.  Repeat the process
until your fence is arbitrarily small and has become a cage trapping
the lion.</p>

<p>But how does this relate to code?</p>

<p>Say you have a relatively large file that executes fine, but
introduces a bug into your larger system.  You suspect that something
has gone wrong with the large file, but you&rsquo;re not getting an error
implicating a specific line.</p>

<p>Cut it all right in two.</p>

<p>Comment out half the code in your large file and try to reproduce the
bug.  If you reproduce the bug, repeat the process as necessary until
you isolate the line producing the problem.</p>

<p>I learned about this approach for bugsleuthing from the <a href="https://gist.github.com/stardiviner/8109774#file-temp-txt-L26">bot in #emacs on freenode</a>.  It&rsquo;s particularly useful for tracking down bugs in large configuration files.  There&rsquo;s a list of humorous lion-trapping algorithm examples <a href="http://faculty.smu.edu/yzhou/humor/lion.htm">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's in a name?]]></title>
    <link href="http://zerosalife.github.io/blog/2014/03/01/whats-in-a-name/"/>
    <updated>2014-03-01T10:09:41-08:00</updated>
    <id>http://zerosalife.github.io/blog/2014/03/01/whats-in-a-name</id>
    <content type="html"><![CDATA[<p>Growing up, the seemingly interminable school-week gave way to an
anxious car drive home from the rental store with the weekend&rsquo;s score.
You remember those, right?</p>

<p>Usually the rental would include the instruction manual.  On the ride
home, I&rsquo;d pour over the manual, trying to glean useful information to
supplement my Nintendo Power-fueled strategies to maximize my fun in
the limited time I had with the game.  Often I&rsquo;d get so engrossed with
the manual, learning the universe for the game, I&rsquo;d let my brother or
a friend play the game first.</p>

<p>The looming question, not covered in the manual, was always: When will
my turn end?  When will my brother run out of lives, so I can get a
turn?</p>

<p>We developed a vocabulary to deal with the count down to game over. On
your first play-through it was unclear whether the last life was when
your stock counter read 1 or 0.  If you had one life left, you could
play extra hard, using a rush of adrenaline to try to stay alive
longer.</p>

<p>Sometimes, it was game over when the stock counter ticked over from 1
to 0.  In other games, when the stock counter reads 0, zero is a life.</p>

<p>The name of this blog comes from that reassuring sense that you have
an extra chance.  &ldquo;Don&rsquo;t worry, zero&rsquo;s a life.&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Emacs-like key bindings in MonoDevelop]]></title>
    <link href="http://zerosalife.github.io/blog/2014/02/22/setting-up-emacs-like-key-bindings-in-monodevelop/"/>
    <updated>2014-02-22T06:14:40-08:00</updated>
    <id>http://zerosalife.github.io/blog/2014/02/22/setting-up-emacs-like-key-bindings-in-monodevelop</id>
    <content type="html"><![CDATA[<p>I&rsquo;m playing around with <a href="http://unity3d.com/">Unity</a> to try to learn how it works.  Shout out to <a href="http://infiniteammo.ca/">Infinite Ammo</a> for the excellent <a href="http://www.youtube.com/playlist?list=PLEEAEA1E6B11B4DAE">video tutorials</a>.</p>

<p>Since I don&rsquo;t know much about Unity, I&rsquo;m reluctantly using their included <a href="http://monodevelop.com/">MonoDevelop IDE</a>.  While I&rsquo;d heard that Emacs-like key bindings were included, in the build I installed they weren&rsquo;t present.</p>

<p>MonoDevelop does not make it easy to import new key binding schemes (the <a href="http://mjhutchinson.com/journal/2011/02/06/key_bindings">blog post linked here</a> suggests submitting a bug report to propose new key bindings&#x2026;).  So, I did a little digging around on github and found the <a href="https://github.com/mono/monodevelop/blob/master/main/src/core/MonoDevelop.Ide/options/KeyBindingSchemeEmacs.xml">default emacs key binding scheme</a> that I imagine should have been included in the MonoDevelop build I installed.</p>

<p>There was no way to add this key binding scheme to my available key bindings in MonoDevelop, so I hacked my Custom key binding file located at <code>~/Library/MonoDevelop-Unity-4.0/KeyBindings/Custom.mac-kb.xml</code>.</p>

<p>I started with some simple copypasta.  But then I found some useful
navigation features were lacking.  So, I added key binds that
immediately came to mind, like <code>Alt-f</code> for moving forward one word and
<code>Alt-b</code> for backward word.  Yes, I know these are <code>M-f</code> in Emacs, but
I&rsquo;m using MonoDevelop&rsquo;s syntax here.</p>

<p>My key bindings are available in the gist below.  I&rsquo;ll update this
gist when I add key bindings, to keep a current working version
available.</p>

<script src="https://gist.github.com/zerosalife/9096788.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bunnies Don't Surf #flappyjam]]></title>
    <link href="http://zerosalife.github.io/blog/2014/02/15/bunnies-dont-surf-number-flappyjam/"/>
    <updated>2014-02-15T06:40:03-08:00</updated>
    <id>http://zerosalife.github.io/blog/2014/02/15/bunnies-dont-surf-number-flappyjam</id>
    <content type="html"><![CDATA[<p><img class="center" src="https://raw.github.com/zerosalife/bunnies-dont-surf/master/screenshot.png"></p>

<p>Here&rsquo;s a WIP FlappyBird-like game prototype for <a href="http://itch.io/jam/flappyjam">#flappyjam</a>: <a href="https://github.com/zerosalife/bunnies-dont-surf">Bunnies Don&rsquo;t Surf</a>. You are an unfortunate rabbit whose warren is being flooded by a passing thunderstorm.  You have to navigate the tunnels of the warren, propelled by the wave of water flooding your home.  There&rsquo;s only one problem: Bunnies Don&rsquo;t Surf.  So you&rsquo;re stuck hopping up and down in a futile attempt to survive.</p>

<p>Bunnies Don&rsquo;t Surf requires <a href="http://www.python.org/">Python</a> and <a href="http://pygame.org/news.html">pygame</a> (<a href="http://pygame.org/download.shtml">version 1.9.1</a>) to play.</p>

<p>Tap <code>SPACE</code> to hop. That&rsquo;s about all there is to say about the controls.</p>

<p>As I&rsquo;m sure you can see, the game is in dire need of art assets, sound assets, and some sort of high score system.  I&rsquo;ll do my best to add these, once time allows. If anyone has feedback or art design ideas, please let me know in the comments section or on Twitter.  I&rsquo;d love to hear it.</p>

<p>I&rsquo;ll post updates as the game progresses, and officially submit it to <a href="http://itch.io/jam/flappyjam">#flappyjam</a> if it&rsquo;s done before the jam ends on February 24.</p>
]]></content>
  </entry>
  
</feed>
