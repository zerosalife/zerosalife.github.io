<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[zero's a life]]></title>
  <link href="http://zerosalife.github.io/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2015-03-21T13:55:36-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AdventureJam Prep]]></title>
    <link href="http://zerosalife.github.io/blog/2015/03/21/adventurejam-prep/"/>
    <updated>2015-03-21T09:53:07-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/03/21/adventurejam-prep</id>
    <content type="html"><![CDATA[<p>In <strong>two weeks</strong>, April 3 &ndash; April 17, <a href="https://twitter.com/fenderbenter">Cassie Benter</a> and <a href="https://twitter.com/stacydavidson">Stacy Davidson</a> are hosting a game jam focused on creating adventure games called <a href="http://adventurejam.org">#adventurejam</a>.  I share the organizers&#8217; love of point-and-click adventure games, and I&rsquo;m totally thrilled to announce my participation.  AdventureJam is a fortnight-long competition to create and adventurous game-ish experience.</p>

<p>The <a href="http://jams.gamejolt.io/adventurejam/rules">rules</a> of AdventureJam are more strict than <a href="http://procjam.tumblr.com/">#procjam</a>, <a href="http://zerosalife.github.io/blog/2014/11/01/make-things-that-make-things-number-procjam-2014/">the jam I participated in last fall</a>.  They require that the work on a game take place over the two weeks of the AdventureJam competition.  I don&rsquo;t expect to have the time to create something that is truly competitive, but I may as well play along.  Like #procjam, I plan on spending the next series of blog posts covering AdventureJam-related content.</p>

<p>So, click every pixel on the screen, grab everything in sight, exhaust every dialog option, and combine items in new and mysterious ways, it&rsquo;s <a href="https://twitter.com/hashtag/AdventureJam?src=hash">#adventurejam</a> time.</p>

<!--more-->


<p>I&rsquo;d like to spend the rest of this post exploring the options in terms of game engines for creating adventure games.  The website and forums were great resources for constructing this list.  And I suspect that I&rsquo;ll come across some new resources as the jam progresses.</p>

<h2>Engines (Or, A Decidedly Unresearched and Perfunctory List)</h2>

<h3>Graphical</h3>

<h4>Windows</h4>

<ul>
<li><p><a href="http://www.adventuregamestudio.co.uk/">http://www.adventuregamestudio.co.uk/</a></p></li>
<li><p><a href="http://dead-code.org/home/">http://dead-code.org/home/</a></p></li>
</ul>


<h4>Non-windows</h4>

<ul>
<li><p><a href="http://codecanyon.net/item/jaguar-lucasarts-adventure-game-engine/8753130">http://codecanyon.net/item/jaguar-lucasarts-adventure-game-engine/8753130</a></p></li>
<li><p><a href="http://www.visionaire-studio.net/">Visionaire</a></p></li>
<li><p><a href="http://www.alpacaengine.com/">http://www.alpacaengine.com/</a></p></li>
</ul>


<h4>Unity</h4>

<ul>
<li><p><a href="http://age.seccia.com/">http://age.seccia.com/</a></p></li>
<li><p><a href="http://www.adventurecreator.org/">Adventure Creator</a></p></li>
</ul>


<h3>Text</h3>

<ul>
<li><p><a href="http://inform7.com/">Inform</a></p></li>
<li><p><a href="http://textadventures.co.uk/quest">Quest</a></p></li>
<li><p><a href="http://twinery.org/">Twine</a></p></li>
</ul>


<h2>The Adventure Jam Forums</h2>

<p>The <a href="http://www.adventurejam.org/forums/">#adventurejam forums</a> were a great resource for constructing this overview of adventure game engines.  I only expect the information there to grow as the jam progresses.</p>

<h2>My Plan</h2>

<p>Given my workload, familiarity with and access to the tools listed above, and artistic abilities, I&rsquo;m going to go with Twine to get any real progress done in the time constraints.</p>

<p>Like my <a href="http://zerosalife.github.io/blog/categories/procjam/">series of posts on #procjam</a>, I&rsquo;ll tag all the <a href="http://zerosalife.github.io/blog/categories/adventurejam/">posts related to AdventureJam</a> so they&rsquo;re easily accessible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Math Team Hearts]]></title>
    <link href="http://zerosalife.github.io/blog/2015/03/14/math-team-hearts/"/>
    <updated>2015-03-14T14:14:29-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/03/14/math-team-hearts</id>
    <content type="html"><![CDATA[<p>Math Team Hearts is a speedy modification to Hearts that ironically involves less math than the vanilla game.</p>

<!--more-->


<p>From <a href="http://www.crcpress.com/product/isbn/9781482217162">Game Design Workshop</a> by <a href="https://twitter.com/kinojabber">Tracy Fullerton</a>:</p>

<blockquote><p>One good way to train yourself in the design of game mechanics is to challenge yourself with controlled design exercises in which you take an existing game system, set a new player experience goal, and make changes to the system to meet that goal.</p></blockquote>

<h2>The Goal</h2>

<p>We needed a game that played quickly, without a defined endpoint (e.g. when one player reaches 100 points in normal <em>Hearts</em>) because this game was played in free time waiting for school to start or waiting for the bus.  There was no time to spend tallying up scores, counting hearts and doing awkward math.</p>

<p>The rules also modify the risk-reward value of shooting the moon to make it more attractive.  We found the game to be more interesting when multiple parties were invested in shooting the moon with less drawback from accumulating hearts.</p>

<h2>The Rules</h2>

<p>The game plays like normal <em><a href="http://en.wikipedia.org/wiki/Hearts">Hearts</a></em>, except taking <strong>hearts</strong> no longer gives you points.</p>

<ul>
<li>Taking any number of <strong>hearts</strong> without <strong>shooting the moon</strong> gives you 0 points.</li>
<li>Taking no <strong>hearts</strong> in a round gives you 1 point.</li>
<li><strong>Shooting the moon</strong> gives you 2 points.</li>
<li>Taking the <strong>queen of spades</strong> without <strong>shooting the moon</strong> gives you -1 point.</li>
</ul>


<p>The <strong>player</strong> with the most points at the end of play wins.</p>

<p>For more variety, use <strong>dealer</strong>&rsquo;s choice drafting rules.  Each round, the <strong>dealer</strong> decides on how players will pass cards prior to play.
<strong>Players</strong> take turns dealing.</p>

<h2>Tweaks</h2>

<p>I&rsquo;m working from memory, so I&rsquo;m not sure I&rsquo;ve got the point values exactly right.  Perhaps there should be more of a penalty for taking the Queen without shooting the moon.  That would create a more exciting risk-reward trade-off.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WuXingRPS: Elemental Rock Paper Scissors]]></title>
    <link href="http://zerosalife.github.io/blog/2015/02/28/wuxingrps-elemental-rock-paper-scissors/"/>
    <updated>2015-02-28T10:13:28-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/02/28/wuxingrps-elemental-rock-paper-scissors</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://zerosalife.github.io/images/assets/WuXing-screenshot.png"></p>

<p><a href="http://zerosalife.itch.io/wuxingrps">WuXingRPS</a> is a prototype 5-way rock paper scissors game.  The eventual purpose for the prototype is to serve as a minigame to teach elemental interactions in an RPG battle system.</p>

<p>I chose WuXing elements because they provide a nontraditional (in terms of typical RPGs) series of interesting interactions.</p>

<h2>The Five Elements</h2>

<p><img class="center" src="http://zerosalife.github.io/images/assets/WuXing-interactions.png"></p>

<p>The five elements are Earth (yellow), Metal (silver), Water (black), Wood (green), and Fire (red).  They have two levels of interactions that you can look at anytime by pressing the <code>?</code> button in the bottom right corner.</p>

<p>The <strong>Destruction</strong> interaction, indicated by red arrows, shows that, for example, Metal chops Wood.  So Metal beats Wood.</p>

<p>The <strong>Generation</strong> interaction shows that, for example, Water grows Wood.  So Wood &ldquo;eats&rdquo; Water.</p>

<p>That&rsquo;s all there is to it.  Click those element disks and try to get more points than the computer.</p>

<h2>Surprise: iteration to find mechanics</h2>

<p>In an earlier version of the prototype the player and enemy choices that resulted in a generation relationship interaction led to a draw.  This meant that 3/5 interactions were draws.  The prototype was less exciting than the current version.  This iteration was critical in achieving a sense of fun in this prototype, as well as fleshing out the goals of an eventual RPG battle system using the elemental mechanic.</p>

<p>So making this prototype led to unexpected value.  Let that be a lesson to keep it simple, because <em>sometimes the simple things that are achievable within your current skillset can lead to surprising results</em>.</p>

<h2>Conclusion</h2>

<p>I&rsquo;m really interested in feedback, so <a href="http://zerosalife.itch.io/wuxingrps">give the game a try</a> and tell me what you think in the comments or on <a href="http://twitter.com/zerosalife">twitter</a>.  If you&rsquo;re an artist interested in gussying up my shameful attempts at UI and UX, please please please reach out to me.  I&rsquo;d love to improve this prototype.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hosting a game on itch.io: account set up and transaction fees]]></title>
    <link href="http://zerosalife.github.io/blog/2015/02/21/hosting-a-game-on-itch-dot-io-account-set-up-and-transaction-fees/"/>
    <updated>2015-02-21T11:25:39-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/02/21/hosting-a-game-on-itch-dot-io-account-set-up-and-transaction-fees</id>
    <content type="html"><![CDATA[<h2>What is itch.io?</h2>

<p>According to the <a href="http://itch.io/about/faq">faq</a>, itch.io is a service for handling hosting and selling individual and bundled games, soundtracks, art, etc.  It has some handy features to <a href="http://itch.io/jams">manage and track gamejams</a> as well.  It was <a href="http://leafo.net/posts/introducing_itchio.html">created</a> by <a href="https://twitter.com/moonscript">@moonscript</a>.</p>

<p>In this post I&rsquo;ll look at the fees charged itch.io and the supported payment platforms and how to set up an account.  The <a href="http://itch.io/about/faq">faq</a> covers these and other topics in more detail so make sure you peruse it.</p>

<!--more-->


<h2>Fees</h2>

<p>There are a few payment options available on itch.io.  Here&rsquo;s how the fees break down.  I&rsquo;ll use the example of selling $5.00 and $2.00 games to show the revenue you could expect to receive after taking out the various fees.</p>

<p>It&rsquo;s worth noting that, at of the time of this post, <strong>itch.io is not collecting fees</strong>.  I&rsquo;ll still present the revenue calculations with the itch.io slice factored in, but itch.io won&rsquo;t start collecting a percentage of the game price until a later, unspecified date.</p>

<p>Itch.io currently provides three options for handling payments: <a href="http://payments.amazon.com/">Amazon Payments</a>, <a href="http://www.paypal.com/">PayPal</a> and <a href="http://stripe.com/">Stripe</a>.</p>

<h3>Supported currencies</h3>

<p>PayPal appears to be the least restrictive in terms of the countries and currencies it handles.  Stripe handles U.S., Canada, U.K., Australia, and Ireland.  Stripe has an <a href="https://support.stripe.com/questions/what-countries-does-stripe-support">open beta for some European countries</a>. Amazon Payments only handles U.S. currencies.  Non-U.S. purchases through Amazon Payments are <a href="https://payments.amazon.com/sdui/sdui/about?nodeId%3D77175#aspd_cost">only allowed via credit card transactions, and there&rsquo;s an additional charge</a>.</p>

<h3>Fee structure</h3>

<p>The fees for <a href="https://stripe.com/us/pricing">Stripe</a> and <a href="https://www.paypal.com/webapps/mpp/merchant-fees">PayPal</a> work similarly, assuming you&rsquo;re processing less than $3,000 monthly.  There&rsquo;s a base fee of $0.30 + 2.9% for each transaction.  Amazon Payments works similarly if the price is above $10.00, but below $9.99, there&rsquo;s a $0.05 surcharge + 5%.</p>

<p>Itch.io will charge a 10% fee for each transaction, but currently this charge is waived.</p>

<h3>Down and dirty</h3>

<p>So let&rsquo;s do the math for the two example prices I mentioned above:</p>

<p>For Stripe and PayPal the numbers look like this:</p>

<pre><code>$5 - ($5 * 0.1) - $0.30 - ($5 * 0.029) = $4.055

$2 - ($2 * 0.1) - $0.30 - ($2 * 0.029) = $1.442
</code></pre>

<p>I&rsquo;m not sure how the rounding works.  I will have to reach out to itch.io and the payment handling services to see how they handle tenths of a cent.</p>

<p>For Amazon Payments the numbers look like:</p>

<pre><code>$5 - ($5 * 0.1) - $0.05 - ($5 * 0.05) = $4.20

$2 - ($2 * 0.1) - $0.05 - ($2 * 0.05) = $1.65
</code></pre>

<p>Keep in mind, for each of these calculations you&rsquo;ll get an extra $0.50 and $0.20, respectively, since the itch.io surcharge is not in effect.</p>

<p>That&rsquo;s how the numbers breakdown for these price points.  I&rsquo;m not planning on charging money right now, but it&rsquo;s nice to see the real amounts you can expect to see.  I am really bad at reasoning about these sorts of percentages in the abstract.</p>

<h2>Signing up</h2>

<p><a href="http://itch.io/register">Registering for itch.io</a> was easy.  I created an account and checked <code>I'm interested in distributing games on itch.io</code>.  That&rsquo;s it.  It&rsquo;s very straightforward.</p>

<p>Now I have a relatively spartan page at <a href="http://zerosalife.itch.io/">zerosalife.itch.io</a>.</p>

<h2>The next step</h2>

<p>I&rsquo;d like to brand and personalize my itch.io page, but I don&rsquo;t think that the time for that is now.  Somewhere down the road, I&rsquo;ll look into itch.io&rsquo;s powerful customization tools.</p>

<p>The obvious clear thing to do with my new itch.io account is to release a game.  Tune in next week for exactly that!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VGBC Game Design Review: Gunstar Heroes]]></title>
    <link href="http://zerosalife.github.io/blog/2015/02/14/vgbc-game-design-review-gunstar-heroes/"/>
    <updated>2015-02-14T10:25:33-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/02/14/vgbc-game-design-review-gunstar-heroes</id>
    <content type="html"><![CDATA[<p>Inspired by <a href="http://twitter.com/danctheduck">Daniel Cook&rsquo;s</a> game design review format over at <a href="http://www.lostgarden.com/2005/09/game-design-review-advance-wars-dual.html">Lost Garden</a>.  I&rsquo;m going to take a similar approach to my write up covering
<em>Gunstar Heroes</em>, the first book we&rsquo;ve chosen for the VGBC.</p>

<h2>The Format</h2>

<ul>
<li><strong>A brief history</strong>: What is the historical context of the design of <em>Gunstar Heroes</em>?</li>
<li><strong>Game anthropology</strong>: What market niche does <em>Gunstar Heroes</em> fill?</li>
<li><strong>Layered game design</strong>: What major design lesson(s) does <em>Gunstar Heroes</em> teach us?</li>
<li><strong>What worked and what didn&rsquo;t?</strong>: What design decisions worked and what fell flat?</li>
</ul>


<!--more-->


<h2>Brief history</h2>

<p><em>Gunstar Heroes</em> was the first release by nascent studio Treasure.
But the developers at Treasure were old hats at run-and-gun game design.  Like a group of seasoned musicians coming together to form a supergroup, the studio was created by former Konami employees, to create great games.  Treasure was much smaller than Konami, lending the studio a dynamic, independent vibe that we would label AA or indie today.</p>

<p>Treasure&rsquo;s developers, designers, and artists cut their teeth making some of Konami&rsquo;s biggest hits.  While the list is long, ranging from classics like Castlevania and Metal Gear to relatively unknown games like Snatcher and Rocket Knight Adventures, for the purpose of this article I&rsquo;d like to compare arguably the greatest of its forebears: <em><a href="http://en.wikipedia.org/wiki/Contra_III:_The_Alien_Wars">Contra III: The Alien Wars</a></em>.</p>

<p>Games in the run-and-gun genre are straightforward, you run (and jump) and shoot at enemies (with guns).  <em>Contra III</em> was the pinnacle of the genre in 1993, when <em>Gunstar Heroes</em> was released, by way of the game&rsquo;s attractive graphics, challenging gameplay, excellent music, and varied level design.  <em>Gunstar Heroes</em> represented the developers at Treasure taking the lessons from <em>Contra III</em> and seeking to improve and expand on the previous success.</p>

<h2>Game anthropology</h2>

<p><em>Gunstar Heroes</em> entered a market during the heyday of the run-and-gun
action platformer genre.  The hardware of the 16-bit consoles allowed for better graphics and supported larger numbers of sprites, leading to more engaging and challenging gameplay.  But the hardware and arguably the developer mindsets had not yet evolved to support many other approaches to gameplay.</p>

<p>There are too many copy-cats and also-rans to list.  <em>Contra</em> was a hit and every publisher wanted their own version.  Treasure sought set
<em>Gunstar Heroes</em> off from the crowd by designing expressive sprites
and dynamic gameplay.</p>

<p>To my mind this approach worked, although I&rsquo;m not aware of the sales figures from the time.  The graphics of <em>Gunstar Heroes</em> have helped it occupy mindshare over the long run.  In fact, in my opinion,
<em>Gunstar Heroes</em> looks more like a predecessor to the popular <em>Metal
Slug</em> series than a sequel or offshoot from <em>Contra</em>.  For a game to have this longevity, there must be something the designers have done right.</p>

<h2>First Layer: Core Mechanics</h2>

<h3>Bosses</h3>

<p>An entire article could be devoted to the boss design in <em>Gunstar Heroes</em> by &ldquo;cool character creator&rdquo; HAN aka Tetsuhiko Kikuchi.  But the scope of this article is less concerned with the design of specific encounters and more focused on the overall experience.  A thorough exploration of the boss design would also require more skill in this game than your humble author possesses.</p>

<h2>Second Layer: Creating new variation</h2>

<h3>Controls</h3>

<ul>
<li><p>Right off the bat, players get a choice between two control styles Fixed Shot and Free Shot.  These differ in terms of freedom of movement while allowing for more precise targeting.</p></li>
<li><p>In addition to <em>Contra</em>&rsquo;s ducking and climbing mechanics, <em>Gunstar Heroes</em> adds slides, throws and jump attacks.</p></li>
<li><p>A lot of the additional moves grant invincibility frames.  Sometimes the only way to get through difficult sections of the game without taking damage is to slide or jump attack at the correct time, using the invincibility frames to avoid damage.</p></li>
<li><p>The throws also allow for a new interaction between player characters: throwing the other player.  It can be annoying but that is half of the fun of playing these cooperative games.  The players can also throw some of the bombs that are thrown by enemies.</p></li>
</ul>


<h3>Weapons</h3>

<p>Meaningful choices between the various weapon types allow players to experiment to find combinations that work best for each situation and style of play.  Players can adjust the difficulty of the game by restricting the available weapon combinations, and since weapons persist between levels players can attempt full game restriction-based challenge runs.  The fact that the designers alllowed for interactions between the different weapon types simply adds to the depth of available choices.</p>

<h3>Life is no longer a binary</h3>

<p>Players and bosses have numeric vitality indicators.  Vitality is tracked as an integer value rather than a binary alive/dead state. You start at a vitality of 100 and, notably, there is no maximum.  You can gain more than 100 vitality, adding even more a buffer between playing and the icy clutches of the grim reaper.</p>

<p>Boss vitality is indicated on the screen, communicating directly to the player when the boss will be defeated.  This removes some of the ambiguity of earlier titles, where often the indications that the boss was being damaged could be lost in the sea of explosions and screenshake that characterize the run-and-gun genre.</p>

<p>This approach gives you free range, as a designer, to throw more and more challenges at the player.</p>

<h2>Additional Layers</h2>

<h3>Destructible environment</h3>

<h3>Enemy interactions</h3>

<p>When thrown, enemies can hit other enemies.  Another notable type of enemy interaction is that bombs thrown by enemies can damage other enemies and the thrower.</p>

<p>The result of these additional layers of player choice and interactivity serve to situate the player characters, and thus the players, in the world.  <em>Gunstar Heroes</em> feels less like a series of obstacles to overcome and more like a madcap adventure in which you are desperately trying to survive.  Contrast this with the original <em><a href="http://en.wikipedia.org/wiki/Ninja_Gaiden">Ninja Gaiden</a></em>, in which player agency is reduced to memorizing and executing a series of well-timed button presses.</p>

<h3>The boardgame level</h3>

<p><em>Gunstar Heroes</em> combines the throwing mechanic with a giant die to create the most unique level in the game: The Dice Palace.  The player characters must move through a board populated with boss encounters, item rooms and spaces that can send the players back to the start of the board or require the players to fight a boss without weapons.</p>

<p>The addition of this level creates a dynamic experience that changes with each play through.  The result is a truly unique than the simple test of skill that most boss rushes represent, although there is a more typical boss rush present in one of the later levels.</p>

<h3>Anti-gravity mine carts</h3>

<p>While games like <em><a href="http://en.wikipedia.org/wiki/Battletoads">Battletoads</a></em> have previously done speedy vehicular mine-cart-style levels, <em>Gunstar Heroes</em> takes it to another level (forgive me).  The modified mine carts in <em>Gunstar Heroes</em> allow the players to flip gravity <em>a la</em> under-appreciated late-generation NES action platformer <em><a href="http://en.wikipedia.org/wiki/Metal_Storm_%28video_game%29">Metal Storm</a></em>.</p>

<h3>The genre switch</h3>

<p>Although this is not unique to <em>Gunstar Heroes</em> this may be one of the first times that developers have tried this.  In the last level, the gameplay changes from run-and-gun action to a side view bullet-hell shoot-em-up.  While interesting, to me, this is not where the bulk of the <em>Gunstar Heroes</em> experience lies.</p>

<h2>What worked?</h2>

<ul>
<li><p>Each player can decide on a unique approach, using the various weapon combinations and shot types.</p></li>
<li><p>Some of the combinations were overpowered but that was half of the fun.  Less skilled players could equip the over powered lighting/chaser combination, while experienced players could try to become proficient in the other combinations.</p></li>
<li><p>Anti-gravity is communicated through overlap with previous commands like jump attack.  When the minecart level starts, the player likely doesn&rsquo;t know about the anti-gravity mechanic, that is, until an enemy comes into jump attack range.</p></li>
<li><p>Switching between combined and individual weapon powerups allows the player to exercise choice, a fundamental goal of game design and play in general.</p></li>
</ul>


<h2>What didn&rsquo;t work?</h2>

<ul>
<li><p>The length.  This is hardly a damning complaint, but the game could be longer.  There are seven stages, a couple of which are totally innovative, but most of them have been done before.  Perhaps it was simply a problem of time and cartridge size constraints.</p></li>
<li><p>The poor, poor framerate couldn&rsquo;t always keep up with the destruction on the screen, but again, this is likely due to constraints of the technology during the early 90s.</p></li>
<li><p>The airship level sets up rules and breaks them. You need to keep climbing and climbing and climbing until, well, you don&rsquo;t need to any more.  You need to get on top of that airship and if you don&rsquo;t, it&rsquo;ll take off leaving you marooned with nary a Wilson to keep you company.</p></li>
</ul>


<h2>Conclusion</h2>

<p><em>Gunstar Heroes</em> illustrates the maxim (allegedly) espoused by Sid
Meier: &ldquo;A game is a series of interesting choices.&rdquo;  It takes ideas formed in the great <em>Contra III</em> and expands the number of interesting choices and interactions for the player, leading to an undeniable classic.</p>

<p>I hope you&rsquo;ve enjoyed this Design Review.  It requires a lot of effort to put these together, so I&rsquo;d like to take my hat off to Daniel Cook at Lost Garden, who inspired me to use this format.  I&rsquo;d also like to thank Rick Wolf for contributing to and helping to crystallize the ideas in this article.  I also could not have done this without the research cited in my Resources, so shoutout to <a href="http://wikipedia.org">Wikipedia</a> and <a href="http://www.hardcoregaming101.net">Hardcore Gaming 101</a>.</p>

<p>Expect more Design Reviews as our book club mulls over more games in the coming months.</p>

<h2>Resources</h2>

<p>I got my information from:</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Gunstar_Heroes">http://en.wikipedia.org/wiki/Gunstar_Heroes</a></li>
<li><a href="http://www.hardcoregaming101.net/gunstarheroes/gunstarheroes.htm">http://www.hardcoregaming101.net/gunstarheroes/gunstarheroes.htm</a></li>
</ul>


<p>Many thanks to the original authors of these articles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 Year In Review]]></title>
    <link href="http://zerosalife.github.io/blog/2015/02/07/2014-year-in-review/"/>
    <updated>2015-02-07T10:15:45-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/02/07/2014-year-in-review</id>
    <content type="html"><![CDATA[<p>This week is the anniversary of <a href="http://zerosalife.github.io/blog/2014/02/01/some-thoughts-on-attack-of-the-friday-monsters/">the first post on this blog</a>.  I&rsquo;d like to take a moment to reflect on the first year.</p>

<p>A recent tweet by <a href="https://twitter.com/McFunkypants">@McFunkypants</a> sums up my approach to blogging:</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p>What&#39;s the &quot;secret&quot; to get 120k followers?&#10;&#10;<a href="https://twitter.com/HobbyGameDev">@HobbyGameDev</a>: &quot;make 4 articles/videos every month for nearly 6 years: <a href="http://t.co/PsXwlW676N">http://t.co/PsXwlW676N</a></p>&mdash; Christer Kaitila (@McFunkypants) <a href="https://twitter.com/McFunkypants/status/562450390839353345">February 3, 2015</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>I&rsquo;m not vain enough to imagine a future of internet (in)famy and riches(?) to emerge as a product of this blog.  If I was linearly following the <a href="https://twitter.com/HobbyGameDev">@HobbyGameDev</a> trend, I should have around 20k followers by now.  I&rsquo;m nowhere near that total.  But, like <a href="https://twitter.com/HobbyGameDev">@HobbyGameDev</a>, I set out with a goal of publishing weekly content.  And with that in mind, I consider the first year a success.</p>

<!--more-->


<h2>Looking back</h2>

<p>In the past year, I covered recently released games from <a href="http://zerosalife.github.io/blog/2014/02/01/some-thoughts-on-attack-of-the-friday-monsters/">major publishers</a> <a href="http://zerosalife.github.io/blog/2014/03/22/ice-ice-baby/">and</a> <a href="http://zerosalife.github.io/blog/2014/06/21/playable-call-for-papers/">game</a> <a href="http://zerosalife.github.io/blog/2014/07/26/space-is-read/">jams</a>.  I linked to useful <a href="http://zerosalife.github.io/blog/2014/03/29/a-twine-tutorial-in-twine/">tutorial</a> content and <a href="http://zerosalife.github.io/blog/2014/05/31/hammock-driven-creativity/">talks</a>.  I pointed out some of my <a href="http://zerosalife.github.io/blog/2014/04/12/the-fate-of-adventure-games/">favorite essays</a> about games.  And I released my own <a href="http://zerosalife.github.io/blog/2014/02/15/bunnies-dont-surf-number-flappyjam/">games</a>, <a href="http://zerosalife.github.io/blog/2014/09/06/automating-blog-deployment-with-octopress/">tools</a>, <a href="http://zerosalife.github.io/blog/2014/09/27/text-encoding-further-improvements-to-using-git-for-unity-projects/">and</a> <a href="http://zerosalife.github.io/blog/2014/03/08/cut-it-all-right-in-two-bisect-to-find-bugs/">tutorials</a>.</p>

<h2>New year, new goals</h2>

<p>Part of the motivation for creating this blog was to provide myself with a platform for regular publishing.  Failing a few travel-related <a href="http://en.wikipedia.org/wiki/Snafu">SNAFUs</a>, I&rsquo;ve maintained weekly posts.  And I think the weekly post on Saturday model works for me.</p>

<p>In the coming year, I&rsquo;d like to focus on using Google Analytics and marketing tools to better publicize these posts.  I&rsquo;m not sure what this marketing push will look like.  I&rsquo;ll likely pursue it like an experiment.  Maybe one month I&rsquo;ll publicize the blog posts twice on the day of publication, or once on Saturday and once on Wednesday, then compare the traffic to months when I only publicize posts on Saturdays.  Of course, this doesn&rsquo;t control for variable interest in the content of the posts, but it&rsquo;s a start.  Posts have been most successful when they reach the people who are most interested in them, and it&rsquo;s easy to get lost in a sea of irrelevant hashtags.  I&rsquo;m looking for better ways to get the word out.</p>

<h2>What worked?</h2>

<h3>#procjam</h3>

<p>My two most successful topics this year were <a href="http://zerosalife.github.io/blog/2014/11/01/make-things-that-make-things-number-procjam-2014/">#procjam</a> and an <a href="http://zerosalife.github.io/blog/2014/05/03/why-are-caves-central-to-so-many-games/">original article on the centrality of caves in game design</a>.</p>

<p>I think #procjam was successful because I got a post out in front of the jam, the week before the jam started.  At that time it was a low-traffic hashtag.  People were just finding out about the gamejam, and my post was one of the only things written about #procjam, other than the announcement.  The jam also worked for me because I had a <a href="http://zerosalife.github.io/blog/2014/11/08/insceptahdeckwu/">lot</a> of <a href="http://zerosalife.github.io/blog/2014/11/15/patchwerk/">ideas</a> to jam out during the event, and I got a kick out of <a href="http://zerosalife.github.io/blog/2014/11/29/procjam-review/">reviewing</a> <a href="http://zerosalife.github.io/blog/2014/12/06/a-proper-review-of-dungen-star/">several of the entries</a> by others.  My projects, <a href="https://twitter.com/insceptahdeckwu">@INSceptahdeckWU</a> and <a href="https://github.com/zerosalife/patchwerk">Patchwerk</a>, were a ton of fun to work on.  I&rsquo;ll definitely plan on participating in #procjam next year.</p>

<p>It would be worth my time to seek out other interesting gamejams to participate in this year.  It can be easy to miss gamejams, but I&rsquo;d like to get involved in at least one more, maybe if there&rsquo;s another <a href="http://itch.io/jam/space-cowboy-jam">Space Cowboy Jam</a>.  I&rsquo;m not sure there&rsquo;s a definitive resource for gamejams, but I reckon <a href="http://itch.io/jams">itch.io&rsquo;s list</a> is pretty good. One thing I&rsquo;d like to look into is pursuing <a href="http://itch.io/">itch.io</a> as a platform to release tools and games.</p>

<h3>Cavernous worlds</h3>

<p>My <a href="http://zerosalife.github.io/blog/2014/05/03/why-are-caves-central-to-so-many-games/">article on the centrality of caves</a> and <a href="http://zerosalife.github.io/blog/2014/05/10/follow-up-to-the-centrality-of-caves/">the follow-up</a> involved a little bit of synthesis and a bit of serendipity.  I saw a series of tweets discussing the topic and set out to simply catalog the main themes in the discussion.  Once the themes were clear, it was impossible for me not to write the article.  I got some great <a href="http://zerosalife.github.io/blog/2014/05/10/follow-up-to-the-centrality-of-caves/">feedback</a> on twitter from the initial post that I turned into the follow-up article.  This pair of posts worked because there was a clear audience that I could make aware of the articles through mentions in the tweets announcing the publication on the blog.  I was lucky that the audience was vocal and willing to discuss the topic in depth with me and with others.</p>

<h2>Conclusion</h2>

<p>Overall, I&rsquo;m happy with the format of the blog covering a bit of the technical side and a bit of the design side.  In the coming year, I fully intend on releasing some more of my own original games and prototypes.  Hopefully I can find a receptive audience to kindle discussion and constructive feedback.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Dictionary with multiple keys in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/01/31/create-a-dictionary-with-multiple-keys-in-unity-c-number/"/>
    <updated>2015-01-31T11:03:42-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/01/31/create-a-dictionary-with-multiple-keys-in-unity-c-number</id>
    <content type="html"><![CDATA[<p>I want to create a lookup table for comparing a player choice and an enemy choice.  Each pair of choices can lead to a variety of outcomes.  So, in order to map the relationship between choice pair and outcome, I&rsquo;ve decided to use a Dictionary with choice pairs as keys and outcomes as values.</p>

<p>To me, the obvious way to do this is by using <a href="http://en.wikipedia.org/wiki/Tuple">tuples</a> to encode the choice pairs.  I&rsquo;ve already enumerated the choices so it&rsquo;s simple enough to pair them off in tuples for use as keys for the Dictionary.  This approach worked, however, I ran into a couple of problems along the way.</p>

<!--more-->


<h2>Unity&rsquo;s C# doesn&rsquo;t have Tuples</h2>

<p>Unity&rsquo;s <a href="http://en.wikipedia.org/wiki/Mono_%2528software%2529">Mono framework</a> includes a C# compiler, runtime, and lots of libraries.  The version of Mono included with version <code>4.6.1f1</code> of Unity is <code>2.6.5 (tarball)</code>.  Mono recreates some of the features of .NET, but apparently not a <code>Tuple</code> type.  The <code>Tuple</code> type got added to .NET in version <code>4.0</code>.  Looks like Mono version <code>2.8</code> may support it, but I&rsquo;ll have to wait for the folks at Unity to update Mono.</p>

<p>I checked the version of Mono using the following code:</p>

<figure class='code'><figcaption><span>Check Unity&#8217;s version of Mono</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Type</span> <span class="n">type</span> <span class="p">=</span> <span class="n">Type</span><span class="p">.</span><span class="n">GetType</span><span class="p">(</span><span class="s">&quot;Mono.Runtime&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MethodInfo</span> <span class="n">displayName</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="n">GetMethod</span><span class="p">(</span><span class="s">&quot;GetDisplayName&quot;</span><span class="p">,</span>
</span><span class='line'>                                            <span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Static</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">displayName</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">displayName</span><span class="p">.</span><span class="n">Invoke</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">));</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since Mono <code>2.8</code> was released 5 years ago, it seems like Unity is in no rush to update their Mono version.  So it looks like I&rsquo;ll have to roll my own tuple class.</p>

<h2>Implementing a Pairs class</h2>

<p>Since I&rsquo;m only concerned with pairs of choices, I decided to implement the simplest possible solution.  I followed the implementation of a <code>Pair</code> class from <a href="http://stackoverflow.com/questions/569903/multi-value-dictionary">this Stack Overflow question regarding encoding multiple values in Dictionaries</a>.  The trick is that the tuple implemented here can be used to encode keys as well.</p>

<p>The critically important part of the <code>Pair</code> class is that it inherits from <code>IEquatable</code> and implements methods for determining equality and hashing.  The fundamental thing a Dictionary needs is to test whether keys are equal in order to store or retrieve the correct values and it typically does so by hashing the key.</p>

<p>I won&rsquo;t bother reproducing the code for the <code>Pair</code> class here.  You can <a href="http://stackoverflow.com/a/569920">check it out for yourself</a>.</p>

<h2>How I wish I could use it</h2>

<p>Once I implemented the <code>Pair</code> class in its own file <code>Pair.cs</code>, I had to import it in the file where I wanted to create the Dictionary.  Also note that I&rsquo;m <a href="http://msdn.microsoft.com/en-us/library/bb531208.aspx">using literal syntax to construct the Dictionary when I define it</a>.  And yes, unlike most uses of curly braces in C#, that <code>;</code> is necessary to end the line after the literal.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">Pair</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Not shown: lots of enums...</span>
</span><span class='line'>
</span><span class='line'><span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">Pair</span><span class="p">&lt;</span><span class="n">Choice</span><span class="p">,</span> <span class="n">Choice</span><span class="p">&gt;,</span> <span class="n">Outcome</span><span class="p">&gt;</span> <span class="n">lookup</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">Pair</span><span class="p">&lt;</span><span class="n">Choice</span><span class="p">,</span> <span class="n">Choice</span><span class="p">&gt;,</span> <span class="n">Outcome</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Pair</span><span class="p">(</span><span class="n">Choice</span><span class="p">.</span><span class="n">ChoiceOne</span><span class="p">,</span> <span class="n">Choice</span><span class="p">.</span><span class="n">ChoiceOne</span><span class="p">),</span> <span class="n">Outcome</span><span class="p">.</span><span class="n">Win</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Pair</span><span class="p">(</span><span class="n">Choice</span><span class="p">.</span><span class="n">ChoiceOne</span><span class="p">,</span> <span class="n">Choice</span><span class="p">.</span><span class="n">ChoiceTwo</span><span class="p">),</span> <span class="n">Outcome</span><span class="p">.</span><span class="n">Lose</span><span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Outcome</span> <span class="n">outcome</span> <span class="p">=</span> <span class="n">lookup</span><span class="p">[</span><span class="n">Pair</span><span class="p">(</span><span class="n">ChoiceOne</span><span class="p">,</span> <span class="n">ChoiceOne</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Compiler throws an error</span>
</span></code></pre></td></tr></table></div></figure>


<p>But alas, I run into this error: <code>Using the generic type `Pair&lt;TFirst,TSecond&gt;' requires `2' type argument(s)</code>.  I can&rsquo;t seem to find any documentation detailing what I&rsquo;m doing wrong.  Maybe it&rsquo;s just a problem with Unity&rsquo;s version of Mono .NET runtime.</p>

<h2>The workaround: A Dictionary of Dictionaries</h2>

<p>I&rsquo;ve found a workaround.  It is, in my humble opinion, way less elegant, but it gets the job done.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// Not shown: lots of enums...</span>
</span><span class='line'>
</span><span class='line'><span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">Choice</span><span class="p">,</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">Choice</span><span class="p">,</span> <span class="n">Outcome</span><span class="p">&gt;&gt;</span> <span class="n">lookup</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">Choice</span><span class="p">,</span> <span class="n">Outcome</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Choice</span><span class="p">.</span><span class="n">ChoiceOne</span><span class="p">,</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">Choice</span><span class="p">,</span> <span class="n">Outcome</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">{</span><span class="n">Choice</span><span class="p">.</span><span class="n">ChoiceOne</span><span class="p">,</span> <span class="n">Outcome</span><span class="p">.</span><span class="n">Win</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">Choice</span><span class="p">.</span><span class="n">ChoiceTwo</span><span class="p">,</span> <span class="n">Outcome</span><span class="p">.</span><span class="n">Lose</span><span class="p">}</span>
</span><span class='line'>    <span class="p">}},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Choice</span><span class="p">.</span><span class="n">ChoiceTwo</span><span class="p">,</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">Choice</span><span class="p">,</span> <span class="n">Outcome</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">{</span><span class="n">Choice</span><span class="p">.</span><span class="n">ChoiceOne</span><span class="p">,</span> <span class="n">Outcome</span><span class="p">.</span><span class="n">Lose</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">Choice</span><span class="p">.</span><span class="n">ChoiceTwo</span><span class="p">,</span> <span class="n">Outcome</span><span class="p">.</span><span class="n">Win</span><span class="p">}</span>
</span><span class='line'>    <span class="p">}}};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Outcome</span> <span class="n">outcome</span> <span class="p">=</span> <span class="n">lookup</span><span class="p">[</span><span class="n">Choice</span><span class="p">.</span><span class="n">ChoiceOne</span><span class="p">][</span><span class="n">Choice</span><span class="p">.</span><span class="n">ChoiceOne</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Will return Outcome.Win</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>I find the tuple key code way more readable than the Dictionary of Dictionaries code.  You can imagine how the legibility of the Dictionary of Dictionaries approach decreases with additional keys but the tuple key code legibility remains the same no matter how many keys you add.  This is probably a moot point for using two keys, as I have in this example, but I hope you can appreciate why I think the tuple approach is more elegant.</p>

<p>If you have any insight into how to solve the <code>Using the generic type `Pair&lt;TFirst,TSecond&gt;' requires `2' type argument(s)</code> error I encountered using the <code>Pair</code> class, please let me know in the comments below or on <a href="http://twitter.com/zerosalife">twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VGBC: a Video Game Book Club]]></title>
    <link href="http://zerosalife.github.io/blog/2015/01/24/vgbc-a-video-game-book-club/"/>
    <updated>2015-01-24T12:54:10-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/01/24/vgbc-a-video-game-book-club</id>
    <content type="html"><![CDATA[<p>Credit for the original idea for a #VGBC goes to Rick Wolf, who also
coauthored this post.  You can get in touch with Rick at
<a href="https://twitter.com/involvingsalmon">@InvolvingSalmon</a> on Twitter.</p>

<h2>What?</h2>

<p>Your very own #VGBC (one of those newfangled acronyms we hear are all the rage these days).  A <strong>club</strong> devoted to selecting and critically
<strong>discussing video games</strong>. We like the acronym #VGBC, but you can call it
what you feel. It&rsquo;s worth noting that we aren’t reading a book each month (although some game design books would do us well), but we’re calling it a “book” club to emphasize the format that encourages thoughtful discussion.</p>

<p>Each meeting you can discuss any aspect of a video game that strikes your fancy.  Maybe you really like the music or art direction, maybe there&rsquo;s one level that you could play over and over again until you get it perfect, maybe you really like the silent protagonist&rsquo;s haircut.  Let your club know.  Chances are, your thoughts about the video game will evoke some exciting input from others in your club.  You can respond with all those witty retorts you&rsquo;ve been practicing in the mirror.  This is what&rsquo;s known colloquially as a discussion.</p>

<p>But how do I know what to discuss, you ask?  It&rsquo;s simple.  <strong>Take turns picking a topical game that everyone can play</strong>, within reason.  We say within reason because, like a book club, everyone needn&rsquo;t finish the discussion material to weigh in.  Don&rsquo;t expect everyone in your club to buy the latest $60 game.</p>

<p>A rule of thumb can be that the host of the last meeting gets to choose the game for the next meeting.</p>

<h2>Who?</h2>

<p>You, your friends, the cat (If you have one. No catnapping.), <strong>anyone</strong> with interest in critically discussing video games. Maybe, like us, the group consists of people that are interested in game design. Maybe you invite your friends that love games, but haven’t ventured into the realm of formal discussion. The more the people you have with different interests, the more likely you are to get a new take on a game.</p>

<h2>When?</h2>

<p>Pick your favorite periodic adjective.  We&rsquo;d recommend starting with
<strong>monthly</strong> meetings, but you can meet as often as you like.  Really.
We don&rsquo;t mind.  See if we care.  It&rsquo;s not like you invited us.</p>

<p>Anyway. Pick a time that works best for your group.  Sometime in the evening, say around happy hour, with a delicious beverage and snacks sounds good to us.  We&rsquo;d reckon that allowing for <strong>two hours</strong> should be enough discussion.  If a topic is particularly engaging you can always spread it out over multiple meetings.</p>

<p>It&rsquo;s up to you to work out a schedule that works for your group.
<strong>Scheduling apps</strong> like <a href="http://doodle.com/">Doodle.com</a> can be helpful for coordinating busy
schedules and finding a time that works for everyone in your group.</p>

<h2>Where?</h2>

<p>In your <strong>home</strong>, in your friends&#8217; homes (assuming they&rsquo;re part of the meeting&#x2026;), in your garage, <strong>at a local pub</strong>.</p>

<p>It&rsquo;s nice to meet <strong>somewhere with a television</strong> and a <strong>game system</strong> to play the game you will discuss.  Showing video of your favorite parts of the game can be nice too.  If you want to do that, try to plan ahead and get a save near the part you want to discuss or check for video playthroughs on <a href="https://www.youtube.com/">YouTube</a>.</p>

<p>If you meet outside your home make sure you check with the establishment beforehand.  Give them a headcount and check if it&rsquo;s ok.  Be sure to spend a little scrilla and tip well.  Be aware of other customers.</p>

<h2>Why?</h2>

<p>Because <strong>video games deserve a critical reading</strong>.  Discussions force all of us to crystallize our views from vague notions of &ldquo;It&rsquo;s good,&rdquo; to &ldquo;The fog of war mechanic in this game vastly improves the strategic elements, strengthening the multiplayer meta-game.&rdquo;  (Your mileage may vary.)</p>

<p>Sometimes you&rsquo;ll get to suggest your favorite game.  Others may deride your choice, but they will get their chance too.  Heck someone may even like the games you suggest, discussing an intriguing aspect that was lost on you.  Then the others in your club will suggest other games.  You never know, you may just find a game that you like.  If you&rsquo;re anything like us, assigning a game and being accountable to comment on it can also help <a href="http://www.backloggery.com/">curb the constant growth of your Steam library</a>.</p>

<p>Maybe one month you&rsquo;ll find that you hated a game. But take a moment and think about why it isn&rsquo;t fun. Do you dislike it because you&rsquo;re bad at puzzle games, or is it unenjoyable because it&rsquo;s a garbage visual novel whose writer has never heard of the three act structure? These reasons are very different, and both are worth considering. We&rsquo;re hoping that reflecting on what makes a game good or bad will make us better designers. We do this with most games that we play, but by doing it with friends we can all get feedback on our thoughts; and we guarantee that will make us grow as designers.</p>

<p>What we&rsquo;ve presented here are a set of guidelines.  There are no hard and fast rules or requirements for hosting your own #VGBC.  Want to talk about knitting?  Cool.  Want to discuss your favorite sporting moments?  Great.  Board games?  Lawn darts?  More power to you.</p>

<p>So start up your own #VGBC and let us know how it goes in the comments or on the twitters <a href="http://twitter.com/zerosalife">@zerosalife</a> or <a href="http://twitter.com/involvingsalmon">@InvolvingSalmon</a>.  When I post about something from #VGBC on the blog, I&rsquo;ll tag it with <a href="http://zerosalife.github.io/blog/categories/vgbc/">VGBC</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Syntax highlighting for Octopress]]></title>
    <link href="http://zerosalife.github.io/blog/2015/01/17/syntax-highlighting-for-octopress/"/>
    <updated>2015-01-17T11:12:37-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/01/17/syntax-highlighting-for-octopress</id>
    <content type="html"><![CDATA[<p>It&rsquo;s relatively simple, but I always forget how it&rsquo;s done.  In the
interest of documenting useful information for myself, here is how to
use <a href="http://octopress.org/docs/blogging/code/">syntax highlighting with code blocks in Octopress</a>.</p>

<!--more-->


<p>Here are some examples of languages I typically use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="n">IEnumerator</span> <span class="nf">GUIMoveToPosition</span><span class="p">(</span><span class="n">Vector3</span> <span class="n">newPosition</span><span class="p">,</span> <span class="kt">float</span> <span class="n">duration</span><span class="p">,</span> <span class="n">RectTransform</span> <span class="n">rect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">elapsedTime</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Vector3</span> <span class="n">startingPos</span> <span class="p">=</span> <span class="n">rect</span><span class="p">.</span><span class="n">position</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">elapsedTime</span> <span class="p">&lt;</span> <span class="n">duration</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">rect</span><span class="p">.</span><span class="n">position</span> <span class="p">=</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">Lerp</span><span class="p">(</span><span class="n">startingPos</span><span class="p">,</span>
</span><span class='line'>                                 <span class="n">newPosition</span><span class="p">,</span>
</span><span class='line'>                                 <span class="n">elapsedTime</span> <span class="p">/</span> <span class="n">duration</span><span class="p">);</span>
</span><span class='line'>    <span class="n">elapsedTime</span> <span class="p">+=</span> <span class="n">Time</span><span class="p">.</span><span class="n">deltaTime</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">time_elapsed</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">tick</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">total_time</span> <span class="o">+=</span> <span class="n">time_elapsed</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">mode</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">mode</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">time_elapsed</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">valid-string?</span> <span class="p">[</span><span class="nv">s</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Valid strings are non-empty strings that do not contain</span>
</span><span class='line'><span class="s">  [ (commonly used to denote parts of the song and which rappers are</span>
</span><span class='line'><span class="s">  rapping) and : (commonly used in the album info and transcriber</span>
</span><span class='line'><span class="s">  info).&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nf">contains-char?</span> <span class="nv">s</span> <span class="sc">\[</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nf">contains-char?</span> <span class="nv">s</span> <span class="sc">\:</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nf">contains-char?</span> <span class="nv">s</span> <span class="sc">\&quot;</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nf">contains-char?</span> <span class="nv">s</span> <span class="sc">\(</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">seq </span><span class="nv">s</span><span class="p">)))</span>
</span><span class='line'><span class="c1">;;; http://clojuredocs.org/clojure_core/clojure.core/empty_q</span>
</span><span class='line'><span class="c1">;;; Please use the idiom (seq x) rather than (not (empty? x))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Bonus: Help me refactor this code</h2>

<p>I think there&rsquo;s some way to refactor these two similar functions so
they don&rsquo;t share code, but I don&rsquo;t see it.  If you have a clever way
to offload the common functionality, let me know in the comments
(<a href="http://gist.github.com">gists</a> preferred).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// NOTE: there are some differences between the two functions</span>
</span><span class='line'><span class="c1">// because I&#39;m still adding funcitonality.  I think there should be</span>
</span><span class='line'><span class="c1">// a way to pull out some of the common functionality so I don&#39;t</span>
</span><span class='line'><span class="c1">// have two functions that share code.  Maybe by separating the</span>
</span><span class='line'><span class="c1">// boundary checks from the actual &quot;counting&quot; steps?</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nf">Countdown</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">iTargetHp</span> <span class="p">=</span> <span class="n">iHp</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// If the rolling hp reaches the hit point above iHp then we can</span>
</span><span class='line'>  <span class="c1">// stop the rolling because each RollEvent effectively moves past</span>
</span><span class='line'>  <span class="c1">// the current iRolHp.</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">iRolHp</span> <span class="p">==</span> <span class="n">iTargetHp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Start Coroutine to return reels to original positions</span>
</span><span class='line'>    <span class="n">StartCoroutine</span><span class="p">(</span><span class="n">WaitAndResetReels</span><span class="p">(</span><span class="n">RollDir</span><span class="p">.</span><span class="n">Down</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CancelInvoke</span><span class="p">(</span><span class="s">&quot;Countdown&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">iRolHp</span> <span class="p">&lt;=</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">StartCoroutine</span><span class="p">(</span><span class="n">WaitAndResetReels</span><span class="p">(</span><span class="n">RollDir</span><span class="p">.</span><span class="n">Down</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// TRUE DEATH!</span>
</span><span class='line'>    <span class="n">CancelInvoke</span><span class="p">(</span><span class="s">&quot;Countdown&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// If the rolling HP is larger than the target HP and positive,</span>
</span><span class='line'>  <span class="c1">// then roll down.</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">iRolHp</span> <span class="p">&gt;</span> <span class="n">iTargetHp</span> <span class="p">||</span> <span class="n">iRolHp</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">RollEvent</span><span class="p">(</span><span class="n">RollDir</span><span class="p">.</span><span class="n">Down</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">iRolHp</span> <span class="p">=</span> <span class="n">iRolHp</span> <span class="p">+</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">RollDir</span><span class="p">.</span><span class="n">Down</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nf">Countup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">iTargetHp</span> <span class="p">=</span> <span class="n">iHp</span> <span class="p">-</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// If the rolling hp reaches the hit point below iHp then we can</span>
</span><span class='line'>  <span class="c1">// stop rolling because each RollEvent effectively moves past the</span>
</span><span class='line'>  <span class="c1">// current iRolHp.</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// Also take care of some nasty edge cases resulting in two calls</span>
</span><span class='line'>  <span class="c1">// to WaitAndResetReels.</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">iRolHp</span> <span class="p">==</span> <span class="n">iTargetHp</span> <span class="p">&amp;</span> <span class="n">iRolHp</span> <span class="p">&lt;</span> <span class="n">iMaxHp</span> <span class="p">&amp;</span> <span class="n">iRolHp</span> <span class="p">!=</span> <span class="n">iMaxHp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">StartCoroutine</span><span class="p">(</span><span class="n">WaitAndResetReels</span><span class="p">(</span><span class="n">RollDir</span><span class="p">.</span><span class="n">Up</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CancelInvoke</span><span class="p">(</span><span class="s">&quot;Countup&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">iRolHp</span> <span class="p">&gt;=</span> <span class="n">iMaxHp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">iHp</span> <span class="p">=</span> <span class="n">iMaxHp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">StartCoroutine</span><span class="p">(</span><span class="n">WaitAndResetReels</span><span class="p">(</span><span class="n">RollDir</span><span class="p">.</span><span class="n">Up</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Maxed out HP.</span>
</span><span class='line'>    <span class="n">CancelInvoke</span><span class="p">(</span><span class="s">&quot;Countup&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// If the rolling HP is smaller than the target HP and less than</span>
</span><span class='line'>  <span class="c1">// Max HP, then roll up.</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">iRolHp</span> <span class="p">&lt;</span> <span class="n">iTargetHp</span> <span class="p">||</span> <span class="n">iRolHp</span> <span class="p">&lt;</span> <span class="n">iMaxHp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">RollEvent</span><span class="p">(</span><span class="n">RollDir</span><span class="p">.</span><span class="n">Up</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">iRolHp</span> <span class="p">=</span> <span class="n">iRolHp</span> <span class="p">+</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">RollDir</span><span class="p">.</span><span class="n">Up</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Previewing a post using Octopress]]></title>
    <link href="http://zerosalife.github.io/blog/2015/01/10/previewing-a-post-using-octopress/"/>
    <updated>2015-01-10T10:01:44-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/01/10/previewing-a-post-using-octopress</id>
    <content type="html"><![CDATA[<p>It&rsquo;s nice to preview some of my more complicated posts before I ship them out to the Internets.  Here&rsquo;s how I do it.</p>

<h2>make preview</h2>

<p>I <a href="http://zerosalife.github.io/blog/2014/09/06/automating-blog-deployment-with-octopress/">previously posted</a> a <code>makefile</code> I use to automate deployment of my blog.  Here are the germane lines for previewing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nf">preview</span><span class="o">:</span>
</span><span class='line'>  bundle <span class="nb">exec </span>rake generate <span class="o">&amp;&amp;</span> bundle <span class="nb">exec </span>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>So typing <code>make preview</code> at the command prompt will run start up <a href="https://github.com/ruby/rake">rake</a>&rsquo;s webserver at <code>http://localhost:4000</code>.  Then all I have to do is launch a browser, connect to that port, and voila: a preview of the blog that regenerates to match the changes I make live, as I make them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Year, New Footer]]></title>
    <link href="http://zerosalife.github.io/blog/2015/01/03/new-year-new-footer/"/>
    <updated>2015-01-03T09:17:24-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/01/03/new-year-new-footer</id>
    <content type="html"><![CDATA[<p>It&rsquo;s 2015.  Time to update my footer.  I came across a link to a
website called, <a href="http://updateyourfooter.com/">updateyourfooter.com</a>.  It describes ways to
dynamically update footer info in a variety of languages.</p>

<p>I set out to intrepidly implement one of the JavaScript snippets from the website in the <code>source/_includes/custom/footer.html</code> file in my <a href="http://octopress.org/">Octopress</a> install.  But, to my surprise, there was a bit of code in the footer that already dynamically generated the date timestamp for the footer.</p>

<p>The code looks like this:</p>

<p><code>{{ site.time | date: "%Y" }}</code></p>

<p>Ready for this?  Octopress is a framework built on top of <a href="https://github.com/jekyll/jekyll">Jekyll</a>.  Jekyll uses <a href="http://docs.shopify.com/themes/liquid-documentation/basics">Shopify&rsquo;s Liquid Template Engine</a>.  All of that is a fancy way of saying that this code is compiled into useful stuff for my site.</p>

<p>All I had to do was preface that with the year my blog was established, and badabing, no-mess dynamic footer.  Now the relevant section of the footer looks like this:</p>

<p><code>Copyright &amp;copy; 2014 &amp;ndash; {{ site.time | date: "%Y" }}</code></p>

<p>You can see the results at the bottom of this page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharing Philosophy]]></title>
    <link href="http://zerosalife.github.io/blog/2014/12/27/sharing-philosophy/"/>
    <updated>2014-12-27T08:01:01-06:00</updated>
    <id>http://zerosalife.github.io/blog/2014/12/27/sharing-philosophy</id>
    <content type="html"><![CDATA[<p>From <a href="http://www.imperica.com/en/in-conversation-with/meta-ex-the-music-of-code">this interview</a> with <a href="https://twitter.com/samaaron">Sam Aaron</a>.  Aaron talks about sharing software to create music, but it applies just as well to games.</p>

<blockquote><p>We believe that most value in the world comes through sharing, and that music is no exception. One of the benefits of sharing is that it makes learning much easier. For example, we often hear amazing sounds on albums and wonder how they were made. However, musicians rarely share their production methods. We release all the software we write, which includes our synthesiser designs, interaction abstractions, and compositional structures, under an open source license, and we distribute it to everyone through GitHub. This makes it free and easy for anybody to copy and recreate any aspect of our work. For example, when one of our fans is interested in the sound of one of the synths we&rsquo;re using, they can go to GitHub and download the synth design as text. They can email it to their friends, read it, study it, copy it, modify it and run it to recreate the exact sound.</p></blockquote>

<p>&#x2013;Sam Aaron</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Mind-reading Machine in Unity JavaScript]]></title>
    <link href="http://zerosalife.github.io/blog/2014/12/13/simple-mind-reading-machine-in-unity-javascript/"/>
    <updated>2014-12-13T14:38:20-06:00</updated>
    <id>http://zerosalife.github.io/blog/2014/12/13/simple-mind-reading-machine-in-unity-javascript</id>
    <content type="html"><![CDATA[<p>I ported a cool toy from <a href="http://alastaira.wordpress.com/2014/03/15/a-simple-mind-reading-machine/">Alastair Aitchison&rsquo;s blog</a> to Unity JavaScript.  The toy implements a simple &lsquo;mind-reading&rsquo; algorithm that attempts to guess whether the player will choose Left (by pressing the left arrow key) or Right (by pressing the right arrow key).</p>

<!--more-->


<h2>How does it work?</h2>

<p>Aitchison&rsquo;s blog post describes how it works:</p>

<blockquote><p>How does it work? Not by mind-reading, obviously, but by exploiting
the fact that humans do not behave as &ldquo;randomly&rdquo; as they think they
do. The computer maintains a very simple memory that records the
pattern of results of the last two rounds – whether the player won or
lost, whether they switched strategy, and then whether they then won
or last the following round. The computer then uses this to choose its
own best strategy based on the way the player behaved last time the
current pattern occurred. If the computer loses twice in a row using
the current strategy, it picks a random response in the next round.</p></blockquote>

<p>The original idea came from some AI work by <a href="http://en.wikipedia.org/wiki/Claude_Shannon">Claude Shannon</a> and D. W. Hagelbarger. <a href="http://cs.stanford.edu/people/eroberts/courses/soco/projects/1999-00/information-theory/ai.html">They describe the internal memory of the toy mind-reader</a> that we will model using a multidimensional array <code>v</code>:</p>

<blockquote><p>There are 8 possible situations and two things the player can do at each one:</p>

<ol>
<li><p>player wins, plays same, wins. Then same or differently.</p></li>
<li><p>player wins, plays same, loses. Then same or differently.</p></li>
<li><p>player wins, plays differently, wins. Then same or differently.</p></li>
<li><p>player wins, plays differently, loses.Then same or differently.</p></li>
<li><p>player loses, plays same, wins.Then same or differently.</p></li>
<li><p>player loses, plays same, loses.Then same or differently.</p></li>
<li><p>player loses, plays differently, wins.Then same or differently.</p></li>
<li><p>player loses, plays differently, loses.Then same or differently.</p></li>
</ol>
</blockquote>

<h2>Why port it?</h2>

<p>Why not just take a straightforward approach, running the code myself? First, I wanted to fully understand the algorithm the hard way, by coding it line for line myself. And second, I wanted to better familiarize myself with Unity JavaScript, including its differences from C#.</p>

<p>The port was relatively simple, except for two small hiccups.  First, as far as I know, Unity JavaScript doesn&rsquo;t allow for initializing a multidimensional array.  So I looped over the cells in the array, filling them that way.  I have a hunch that the cells are initialized to the <code>int</code> <code>0</code> by default, but I wanted to be explicit.  Please let me know in the comments or <a href="https://twitter.com/zerosalife">via twitter</a> if I&rsquo;m way off base.</p>

<pre><code>var v : int[2, 2, 2];
for(var cell in v) {
    cell = 0;
}
</code></pre>

<p>I also encountered some unfamiliar syntax: the sonorously named Elvis operator, <a href="http://en.wikipedia.org/wiki/Conditional_operator">?:</a>.  It&rsquo;s also called the <a href="http://en.wikipedia.org/wiki/Ternary_operation">ternary operator</a>, when it&rsquo;s used with 3 arguments, as I&rsquo;ve used it here.  In C-like languages it allows for succinctly stating these kinds of conditional expressions. The example below illustrates how it&rsquo;s used.</p>

<pre><code>// Is the current player's choice the same as the previous player's
// choice?
//
// if (playerChoice == lastChoice)
//     sameChoice = True;
// else
//     sameChoice = False;
//
// Using ternary operator:
v[lw2, lw1, 1] = (v[lw2, lw1, 0] == playerChoice ? 1 : 0);
</code></pre>

<h2>The code</h2>

<p>The ported code for the mind-reader is reproduced below.</p>

<pre><code>#pragma strict
import System.Collections.Generic;

// Used to record play history
var v: int[,,];
var lw1: int;
var lw2: int;
var losingStreak: int;

// The prediction of the player's next turn
var prediction: int;

// Keep track of scores
var cpuScore: int;
var playerScore: int;

var outText: String;

function Start () {
    // Initialize matrix to track state of play history

    v = new int[2, 2, 2];

    for(var cell in v) {
        cell = 0;
    }

    // No prior knowledge, so set inital prediction based on random chance.
    prediction = flip();

    // Set scores to 0
    cpuScore = 0;
    playerScore = 0;

    // Initialize previous play and play before last win-lost trackers
    lw1 = 0;
    lw2 = 0;

    // Output
    outText = "";
}

function TakeTurn(playerChoice: int) {
    // Display player and computer's choices
    var outTextString: String = "You pressed " + playerChoice + ", " + "I guessed " + prediction + "\n";

    // Computer guessed correctly
    if (playerChoice == prediction) {
        cpuScore++;
        losingStreak = 0;
        outTextString += " I WIN!\n";
    }
    else {
        playerScore++;
        losingStreak++;
        outTextString += " YOU WIN!\n";
    }

    outText = outTextString;

    // Is the current player's choice the same as the previous player's
    // choice?
    //
    // if (playerChoice == lastChoice)
    //     sameChoice = True;
    // else
    //     sameChoice = False;
    //
    // Using ternary operator:
    v[lw2, lw1, 1] = (v[lw2, lw1, 0] == playerChoice ? 1 : 0);
    v[lw2, lw1, 0] = playerChoice;
    lw2 = lw1;
    lw1 = playerChoice;

    // If lost more than twice in present state, choose random
    // strategy.  Otherwise keep the same strategy.
    prediction = v[lw2, lw1, 1] == 1 &amp;&amp; losingStreak &lt; 2 ? v[lw2, lw1, 0] : flip();
}

function flip() : int {
    // Simulate a coin flip to produce 50:50 chance of [0, 1]
    return Random.Range(0, 2);
}


function Update () {
    if (Input.GetKeyDown(KeyCode.LeftArrow)) {
        TakeTurn(0);
    }
    if (Input.GetKeyDown(KeyCode.RightArrow)) {
        TakeTurn(1);
    }
}

function OnGUI() {
    var style : GUIStyle = new GUIStyle();
    style.fontSize = 36;

    GUI.Label(new Rect(0, 0, Screen.width, 100), outText, style);
    GUI.Label(new Rect(0, 100, Screen.width, 200), "Player: " + playerScore + " CPU: " + cpuScore, style);
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A proper review of DUNGEN [Star]]]></title>
    <link href="http://zerosalife.github.io/blog/2014/12/06/a-proper-review-of-dungen-star/"/>
    <updated>2014-12-06T09:44:36-06:00</updated>
    <id>http://zerosalife.github.io/blog/2014/12/06/a-proper-review-of-dungen-star</id>
    <content type="html"><![CDATA[<p><em>My green fingers sweat on the handle of my pistol as I creep through the door, into the next room.  I found two boxes of ammunition in the previous room so I&rsquo;m well equipped for the next horrible monster I encounter.  My grip on the pistol tightens as a horrible three-legged spherical thing jumps down from the ceiling, pirouetting to land on its feet and shooting a stream of acidic liquid at me.</em></p>

<p><em>&ldquo;Oof,&rdquo; is all I manage to get out, as I feel the Burster&rsquo;s fluid eat into my skin.  Without thinking I fire at it, killing the thing in two shots.</em></p>

<p><em>While reloading my pistol, I notice a glowing jewel on the stone.  If it&rsquo;s what the briefings said, this is the teleport stone that will allow me to phase out of our normal reality just long enough to escape the next deadly monster I encounter in</em> DUNGEN [Star].</p>

<!--more-->


<p><a href="http://zerosalife.github.io/images/assets/DUNGENStar.gif"><img class="center" src="http://zerosalife.github.io/images/assets/DUNGENStar.gif"></a></p>

<p>(Please excuse my lame attempt at illustrating play with a .gif).</p>

<p><a href="http://zerosalife.github.io/blog/2014/11/29/procjam-review/">Last week, I posted an overview of my favorite #procjam games</a>.  I felt remissed when I got a tweet from the designer, asking whether I had actually printed and played the game.  I hadn&rsquo;t and neither had any of the other reviewers who praised it.  So, this week I took some time to cut out the cards on my computer, effectively making a print-and-play game I could play in Illustrator without bothering to print it out.</p>

<p>After the initial time investment, <em><a href="http://jctwood.itch.io/dungen">DUNGEN [Star]</a></em>, a print-and-play game designed by <a href="https://twitter.com/JctWood">@JctWood</a> for the <a href="https://twitter.com/hashtag/paperjam">#paperjam</a>, <a href="https://twitter.com/hashtag/procjam">#procjam</a>, and <a href="https://twitter.com/hashtag/7dfps">#7dfps</a> gamejams, plays quickly.  Especially if you are brave enough to choose the roguelike secret difficulty level of starting with 1HP.  Add to that, the advanced enemy rules, which give the monsters more personality on top of their already evocative illustrations and you&rsquo;ve got a challenging game.</p>

<p>I&rsquo;m a fan of the cartoonish art style of <em>DUNGEN [Star]</em>.  The character design does a good job of communicating interesting variety, even though there are few monsters to go up against.</p>

<p><em>DUNGEN [Star]</em> runs out of steam quickly, but I think the intent behind it is clear.  This game does a good job of bringing the feel of a procedural first-person shooter with roguelike elements to the print-and-play market.  I think extending the combat to involve multiple weapons would add some depth to the game.  I would like to see more enemies, particularly ones with more interesting advanced enemy rules.  I&rsquo;d also like to see an overarching goal or theme tying together <em>DUNGEN [Star]</em>&rsquo;s dungeoning and star, so you feel more satisfied when you survive the dungeon.  With that criticism said, I still think <em>DUNGEN [Star]</em> succeeds as a gamejam game and a great prototype from which to build.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Procjam review]]></title>
    <link href="http://zerosalife.github.io/blog/2014/11/29/procjam-review/"/>
    <updated>2014-11-29T09:33:47-06:00</updated>
    <id>http://zerosalife.github.io/blog/2014/11/29/procjam-review</id>
    <content type="html"><![CDATA[<p>Looking through the entries, I could only spend a minute or two with each entry.  It helped if the game ran in my browser, so HTML and Unity were big.  Here are some of the games that caught my eye.</p>

<!--more-->


<h2>The top two</h2>

<h2>JET/LAG</h2>

<p>Simple instructions: &ldquo;Click to move. Kill enemies by bashing them.&rdquo;  There may be little to <em><a href="http://svblm.itch.io/jet-lag">JET/LAG</a></em>, but its excellent stylish visuals set this entry apart for me.  A CRT-like distortion bends the corners of the screen complete with scrolling scan lines, while multi-colored text oscillates above a simple square.  The simple square is your character battering your way through procedurally generated maze-like levels.</p>

<p>There&rsquo;s no fancy art in this game, all the characters are made from simple shapes.  But that doesn&rsquo;t stop the graphics from impressing.  It&rsquo;s clear that <a href="https://twitter.com/JakeCataford">@JakeCataford</a> turned the juice up to 11, and it works.  The game feels great.</p>

<p>As a &ldquo;rogue-like like like&rdquo; you may expect it to be deviously hard, and you&rsquo;d be right.  But the controls are responsive and the enemies telegraph their moves, so you feel like you are learning something with each death.  <a href="https://twitter.com/JakeCataford">@JakeCataford</a> clearly understands some fundamentals of engaging game design and I&rsquo;m excited to see what&rsquo;s coming up next.</p>

<h2>DUNGEN [star]</h2>

<p>A multi-jam entry for <a href="http://itch.io/jam/procjam">#procjam</a>, <a href="http://itch.io/jam/paper-jam-1">#paperjam</a>, and <a href="http://7dfps.com/">#7dfps</a> by <a href="https://twitter.com/JctWood">@jctwood</a>, this first person shooter uses shuffling to generate a dynamic dungeon with each play-through.  I like the simplicity of the mechanics <a href="https://twitter.com/JctWood">@jctwood</a> has designed.  Stats on a 1-10 scale can be just as interesting as stats in the thousands.  There are even multiple skin options for the protagonist&rsquo;s hand.  That&rsquo;s more advanced than all three <em><a href="http://en.wikipedia.org/wiki/Doom_%2528series%2529">DOOM</a></em>s.</p>

<p>I think I&rsquo;m most interested in the literal realization of the procedural generation algorithm.  By shuffling the cards the procedural generation of the dungeon is clear both to designer and player, and this type of randomization has been used for many years in many games with standard and nonstandard sets of cards.  I&rsquo;m interested in seeing how this shuffling mechanic, both literal and metaphorical, can be leveraged to encourage new avenues of play in the future.  I can imagine tuning some aspects of a proc gen algorithm by exposing the contents to the player as a deck of cards, both literally as is typical in CCGs and other tabletop games and as a metaphor for abstraction of systems in a video game.</p>

<h2>Favorite games</h2>

<ul>
<li><a href="http://svblm.itch.io/jet-lag">JET/LAG</a>

<ul>
<li>Bump or get bumped.  Excellent style and great graphics.  Very
juicy!</li>
</ul>
</li>
<li><a href="http://lissar.itch.io/peregrin">Peregrin</a>

<ul>
<li>Beautiful.</li>
</ul>
</li>
<li><a href="http://entropyphi.itch.io/nauticalith">Nauticalith</a>

<ul>
<li>Simple, but really conveys a sense of scale.  Adding some mechanic
like dynamic wind that affects sailing could put this over the
top.</li>
</ul>
</li>
<li><a href="http://tfurmanskigmailcom.itch.io/forska-web-version">Forska</a>

<ul>
<li>Great shader.  Generate some <em><a href="http://wikipedia.com/wiki/Myst">Myst</a></em>-like puzzles and you&rsquo;ve got a game, here.</li>
</ul>
</li>
<li><a href="http://8-bit-ape.itch.io/infinity-explorer">Infinity Explorer</a>

<ul>
<li>Reminds me of <em><a href="http://en.wikipedia.org/wiki/Magic_Carpet_%28video_game%29">Magic Carpet</a></em>.</li>
</ul>
</li>
<li><a href="http://jctwood.itch.io/dungen">DUNGEN star</a>

<ul>
<li>Print and play games are great.</li>
</ul>
</li>
</ul>


<h2>Favorite generators</h2>

<ul>
<li><a href="http://nihilocrat.itch.io/nodemancer">http://nihilocrat.itch.io/nodemancer</a>

<ul>
<li>Interesting.  Will have to look more into it.  Now that I think
about it, this one deserves an honorable mention for favorite tool
of the jam.  I will revisit it in depth in a later post because the
generation algorithm looks like an idea I&rsquo;ve batted around in my
head.</li>
</ul>
</li>
<li><a href="http://diaspora-colonies.herokuapp.com/">http://diaspora-colonies.herokuapp.com/</a>

<ul>
<li>Useful and cool!  Check out <a href="http://ptychomancer.itch.io/diaspora">http://ptychomancer.itch.io/diaspora</a>
for some more background on this space colony generator.</li>
</ul>
</li>
<li><a href="http://eduardo.itch.io/procedural-fabrics">http://eduardo.itch.io/procedural-fabrics</a>

<ul>
<li>Clever tiling textures using diagonal lines that really break up
the patterns to make it more pleasing to the eye.</li>
</ul>
</li>
<li><a href="http://ibol17.itch.io/procedural-pixel-monsters">http://ibol17.itch.io/procedural-pixel-monsters</a>

<ul>
<li>Artistic style.  Simple color palette still allow for a variety of
expressive monsters. Interested in following up on the
procedural tree generation–looks great!</li>
</ul>
</li>
<li><a href="https://github.com/cutgarnetgames/gaia">https://github.com/cutgarnetgames/gaia</a>

<ul>
<li>Beautiful world generator with some source code worth digging
into.</li>
</ul>
</li>
<li><a href="http://gillianms.itch.io/hoopla">http://gillianms.itch.io/hoopla</a>

<ul>
<li>Really think there&rsquo;s something to explore in pixels-as-stitches
graphics.</li>
</ul>
</li>
<li><a href="http://aerique.itch.io/rocks-bitch">http://aerique.itch.io/rocks-bitch</a>

<ul>
<li>The pet rock generator I always wanted!</li>
</ul>
</li>
<li><a href="http://playcrafts.itch.io/palette-generator">http://playcrafts.itch.io/palette-generator</a>

<ul>
<li>Useful.</li>
</ul>
</li>
<li><a href="http://tccoxon.itch.io/dreamer">http://tccoxon.itch.io/dreamer</a>

<ul>
<li>Weird hybrid between an AI and a text adventure, but very
  creative and very cool.</li>
</ul>
</li>
<li><a href="http://itch.io/jam/procjam/rate/14026">http://itch.io/jam/procjam/rate/14026</a>

<ul>
<li>Great concept, but I need remedial lessons or a tutorial.  One to
revisit when I can really dig into it.</li>
</ul>
</li>
</ul>


<h2>Cool looking Windows games I couldn&rsquo;t play</h2>

<ul>
<li><a href="http://crabowitz.itch.io/key-geist">http://crabowitz.itch.io/key-geist</a>

<ul>
<li>Reminds me of <em><a href="http://en.wikipedia.org/wiki/The_Wonderful_101">Wonderful 101</a></em>–a game I haven&rsquo;t played, but probably should.  Something about the aesthetic of dozens of little flocking characters appeals to me.</li>
</ul>
</li>
<li><a href="http://caseportman.itch.io/riser">http://caseportman.itch.io/riser</a>

<ul>
<li>Looks like it controls well</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[procjam comedown]]></title>
    <link href="http://zerosalife.github.io/blog/2014/11/22/procjam-comedown/"/>
    <updated>2014-11-22T13:26:16-06:00</updated>
    <id>http://zerosalife.github.io/blog/2014/11/22/procjam-comedown</id>
    <content type="html"><![CDATA[<p>Now that two weeks have passed (a geologic era in internet time), I&rsquo;m ready begin to look back on the <a href="https://twitter.com/hashtag/procjam">#procjam</a> talks and the entries to the jam that caught my eye.  I&rsquo;ve been very busy lately working on my own submissions <a href="http://zerosalife.github.io/blog/2014/11/08/insceptahdeckwu/">INSceptahdeckwu</a> and <a href="http://zerosalife.github.io/blog/2014/11/15/patchwerk/">Patchwerk</a>, among other commitments, so this is by no means an exhaustive look at everything in #procjam.</p>

<!--more-->


<p>Since I actually have no time at all to write a full retrospective, I&rsquo;ll have to be brief.  This post will have to serve as a collection of links and notes until I get a chance to look back in detail.  It&rsquo;s by no means complete, as I&rsquo;m still looking over all of the great entries to #procjam.  I enjoyed the interactions with the speakers and participants.  Unfortunately other commitments may occupy my time through the end of the year, so don&rsquo;t worry if the blogging is intermittent.  I&rsquo;ll revisit the #procjam talks and the submissions when I find time.</p>

<h2>Great ideas</h2>

<p><a href="https://twitter.com/PNJeffries/status/531592288733261824">https://twitter.com/PNJeffries/status/531592288733261824</a></p>

<p><a href="https://twitter.com/redblobgames/status/527485845616340992">https://twitter.com/redblobgames/status/527485845616340992</a></p>

<p><a href="https://twitter.com/mtthwcmpbll/status/527881936178778113">https://twitter.com/mtthwcmpbll/status/527881936178778113</a></p>

<p><a href="https://twitter.com/DragonXVI/status/531078933161476096/photo/1">https://twitter.com/DragonXVI/status/531078933161476096/photo/1</a></p>

<p><a href="https://twitter.com/TomNullpointer/status/531108417096916992">https://twitter.com/TomNullpointer/status/531108417096916992</a></p>

<p><a href="http://chrismwaite.github.io/procjam/">http://chrismwaite.github.io/procjam/</a></p>

<p><a href="https://github.com/chrismwaite/procjam/blob/gh-pages/app.js">https://github.com/chrismwaite/procjam/blob/gh-pages/app.js</a></p>

<p><a href="http://renderingpipeline.com/2013/01/adding-analog-inputs-to-your-graphics-app/">http://renderingpipeline.com/2013/01/adding-analog-inputs-to-your-graphics-app/</a></p>

<p><a href="https://github.com/keijiro/unity-midi-input">https://github.com/keijiro/unity-midi-input</a></p>

<p><a href="http://cgaudino.itch.io/tailgunner">http://cgaudino.itch.io/tailgunner</a></p>

<p><a href="https://github.com/civilframe/node-spacegame-ship-gen">https://github.com/civilframe/node-spacegame-ship-gen</a></p>

<p><a href="http://jctwood.itch.io/dungen">http://jctwood.itch.io/dungen</a></p>

<h2>Good tutorials</h2>

<p>Some tutorials I came across during the jam:</p>

<p><a href="http://procjam.tumblr.com/post/99689402659/procedural-generation-tutorials-getting-started">http://procjam.tumblr.com/post/99689402659/procedural-generation-tutorials-getting-started</a></p>

<p><a href="https://twitter.com/alexjc/status/531077005815869440">https://twitter.com/alexjc/status/531077005815869440</a></p>

<p><a href="http://samatkins.co.uk/blog/2014/11/08/procjam-procedural-building-generation/">http://samatkins.co.uk/blog/2014/11/08/procjam-procedural-building-generation/</a></p>

<h2>Talks</h2>

<p>Here are my notes on the talks that I had a chance to see.  In lieu of writing anything up, I&rsquo;ll post them here for now.</p>

<h3>Overall themes</h3>

<ul>
<li>Meaning over randomness</li>
<li>Scale and direction

<ul>
<li>Layering</li>
<li>Deck metaphor really nice for prototyping.</li>
<li>Great question, how do you make sure the player is not lost in
this huge history.  Player only aware of history of own house,
data is gathered by reading books etc.; there&rsquo;s some context for
the entrance of new bits of history.  Books are populated in
places where it makes sense for them to turn up.</li>
<li>Top-down (designer first) is easier than bottom-up (player first;
shout out to <a href="https://twitter.com/gillianmsmith">@gillianmsmith</a> for this formulation).  Callbacks?
How to percolate up from lower elements on tree?</li>
</ul>
</li>
<li>Storytelling as divination</li>
<li><a href="https://github.com/dariusk/NaNoGenMo">NaNoGenMo</a></li>
<li>Flow in procedural generation

<ul>
<li>Meaning, codifying design principlse</li>
<li><a href="http://artofgamedesign.com/">Art of Game Design by Jesse Schell</a></li>
<li>a feeling of complete and energized focus in an activity, with a
high level of enjoyment and fulfillment

<ul>
<li>clear goals</li>
<li>no distractions

<ul>
<li>How does this figure into open world distraction fests like
triple a sandbox games?</li>
</ul>
</li>
<li>feedback</li>
<li>continuously challenging</li>
</ul>
</li>
<li>Frustration vs. boredom, find a balance</li>
<li>Dynamic

<ul>
<li>Scale enemy level to meet player&rsquo;s level</li>
<li>AI director, see when the player is overwhelmed, drop difficulty;
boredom spawn more enemies.  Requires some kind of metric</li>
</ul>
</li>
<li>Static

<ul>
<li>Lock and key</li>
<li><a href="https://github.com/tcoxon/metazelda">Metazelda</a> calculates difficulty number for each room from desired flow curve.</li>
<li>Love <a href="https://github.com/tcoxon">@tcoxon</a> &rsquo;s thoughts on less backtracking.  Algorithmically respecting players&#8217; time.</li>
</ul>
</li>
<li><a href="http://www.gamasutra.com/blogs/ToniSala/20131208/206535/Game_Design_Theory_Applied_The_Flow_Channel.php">Gamasutra Toni Sala</a></li>
</ul>
</li>
<li>Emotion and interactivity &#x2013; expressivity

<ul>
<li>Workflow, ease of adjustment can be good for designer and exposing
the same tools to the player can be fun</li>
</ul>
</li>
</ul>


<h2>itch.io</h2>

<p>It looks like most of the entries are gathered on a <a href="http://itch.io/jam/procjam">#procjam itch.io page</a>.  I have no experience with <a href="http://itch.io/">itch.io</a>, but I think setting up an account and exploring what itch.io has to offer couldn&rsquo;t hurt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Patchwerk]]></title>
    <link href="http://zerosalife.github.io/blog/2014/11/15/patchwerk/"/>
    <updated>2014-11-15T07:22:18-06:00</updated>
    <id>http://zerosalife.github.io/blog/2014/11/15/patchwerk</id>
    <content type="html"><![CDATA[<h2>Procjam updates</h2>

<p>I&rsquo;ve spent the week at a couple of major international conferences sponsored to some degree by old dead-tree journals.  I was struck, following last weekends&#8217; <a href="https://twitter.com/search?q%3Dprocjam">#procjam</a> <a href="http://www.twitch.tv/procjam">talks</a>, by the lack of openness.  None of these talks are going to be made freely available.  Photography and recording is actively discouraged.  The official conference hashtags, when provided, were silent or only used by those in attendance.  While this exclusivity may generate profits for the aforementioned dead-tree journals and give a leg up to those fortunate enough to be able to attend these conferences, I find it ethically reprehensible in the 21st century, given the tools that we have available.</p>

<p>I&rsquo;d like to once again thank <a href="https://twitter.com/mtrc">@mtrc</a> for hosting <em>and streaming</em> #procjam.  Because conference was made freely available, I was able to interact with the attendees in a way that would be impossible if I was trying to divine through twitter what was going on behind closed doors.  I think this kind of openness can only generate more interest and ideas, regardless of the field of study.</p>

<h2>Patchwerk</h2>

<p>A <a href="https://github.com/quil/quil">Quil</a> sketch designed to generate patterns for quilts.  The code is <a href="https://github.com/zerosalife/patchwerk">available on github</a>.</p>

<p><a href="https://github.com/zerosalife/patchwerk/blob/master/patchwerk-example.png"><img class="center" src="https://raw.githubusercontent.com/zerosalife/patchwerk/master/patchwerk-example.png"></a></p>

<!--more-->


<h2>What is Quil?</h2>

<p>Quil is a port of <a href="http://processing.org">Processing</a> to <a href="http://clojure.org/">Clojure</a>.</p>

<h2>Motivation</h2>

<p>When I came across some interesting pictures of quilts, I was struck by the regularity of the shapes used to construct them.  A quilt is simply a grid of squares containing some pattern of simple shapes.  I thought it would be interesting to have an algorithm generate the grid (what I guess quilters probably call a pattern), so I set out to build some functions in Quil to draw a few simple shapes that I identified in the squares of the quilts and then to randomly draw them in a grid.</p>

<h2>How to model a quilt</h2>

<p>Using the fundamental assumption I already stated: a quilt is just a grid of squares.  My algorithm defines a <code>grid-width</code> and <code>grid-height</code> along with a <code>square-size</code> in pixels that determine the overall size of the quilt pattern to generate.  This allows you to generate an arbitrary number of quilt squares of a certain size.</p>

<p>Each square contains a subgrid with a defined <code>sub-grid-width</code> and <code>sub-grid-height</code>.  In retrospect, it would probably be better to define one parameter because if the dimensions are not square, everything will be screwed up.</p>

<p>I then define several basic drawing functions to fill the squares of the grid.  The procedural generation&rsquo;s <code>draw</code> algorithm knows about each of the drawing functions, called <code>pattern-funcs</code>, and picks one of the <code>patterns</code> to draw each square of the grid.</p>

<h2>The drawing functions</h2>

<p>The primary elements of the quilt squares that I wanted to replicate were large squares, smaller checkers, triangles, and a mixed pattern of small triangles with a square that I called &ldquo;fish&rdquo;.</p>

<p>The squares (see the square second left from the top right) and the smaller checkers (see quilt square fourth down from the top left) use the same drawing function.  However, they differ in that they utilize different helper functions return the correctly sized vertices and support multiple calls for the smaller checkers.</p>

<p>The triangles (see square in the top right) use a lookup table, <code>triangle-lookup-table</code>, to store information about the appropriate &ldquo;legs&rdquo; for a triangle with a point in a given corner.  By using a common syntax for the vertices, the <code>draw-triangle</code> algorithm can share the vertex lookup algorithm with the square routines.</p>

<p>Then the culmination of my dastardly plan involves marrying a square from the smaller checker function with flanking triangles, based on the subgrid this time instead of the larger grid.  The result is a pattern that looks like a fish to me (see quilt square in the top left).  Because I built the abstract drawing functions, I simply have to take care of the four directional possibilities and let the drawing functions more fundamental handle the work.</p>

<h2>Future plans: toward Patchwerk 1.0.0</h2>

<p>The project is in need of a major refactoring session, when I can find the time.  I developed it in a single monolithic Clojure file for ease of testing in the REPL.  It will be easier to maintain and understand if I separate out the distinct functionalities into their own namespaces.  The ones that come to mind are <code>patchwerk.grid</code> to handle the generation of the grid, <code>patchwerk.patterns</code> to manage the drawing functions, and <code>patchwerk.util</code> to house the helper functions.  I&rsquo;d also like to make it clear which functions use the <code>quil.core</code> namespace instead of using <code>:refer :all</code>.</p>

<p>There is also <a href="https://github.com/quil/quil/wiki/Functional-mode-(fun-mode">some interesting new functional middleware for Quil</a>).  It provides a framework for you to separate out the mutable state from your Quil functions so that you avoid side effects and can program pure functions, in Processing&rsquo;s typically imperative syntax.  To get this up and running, I imagine that I will have to represent the pixel grid in the <code>state</code> map.</p>

<p>Eventually, and this is beyond the scope of 1.0.0, I&rsquo;m intrigued by the possibility of <a href="https://github.com/quil/quil/wiki/ClojureScript">porting this code over to Clojurescript</a> and creating a web-based version of the application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[INSceptahdeckWU]]></title>
    <link href="http://zerosalife.github.io/blog/2014/11/08/insceptahdeckwu/"/>
    <updated>2014-11-08T08:28:39-06:00</updated>
    <id>http://zerosalife.github.io/blog/2014/11/08/insceptahdeckwu</id>
    <content type="html"><![CDATA[<h2>#procjam updates</h2>

<p><a href="https://twitter.com/search?q%3Dprocjam">#procjam</a> is upon us.  The conference is on and popping, streaming at <a href="http://www.twitch.tv/procjam">http://www.twitch.tv/procjam</a>.  I&rsquo;ll try to precede my #procjam posts with a little update on some of the cool things I&rsquo;ve seen that need pointing out during the jam itself.</p>

<p><a href="https://twitter.com/GalaxyKate">@GalaxyKate</a> will be streaming <a href="http://vimeo.com/111272682">some tutorials</a> today, following the conference.</p>

<p><a href="https://twitter.com/SudoRossy">@sudorossy</a> is currently streaming some development and modeling at <a href="http://www.twitch.tv/sudorossy">http://www.twitch.tv/sudorossy</a>.  I imagine that sudorossy will continue this throughout the jam.</p>

<p>The <a href="https://twitter.com/search?q%3D7dfps">#7dfps</a> jam is also going on this week.  So, I&rsquo;ve decided to release my third person procedural tweeter.  Or maybe it&rsquo;s a fourth person tweeter, third person once removed.</p>

<h2>Fourth-person tweets</h2>

<p>I&rsquo;m at it again, <a href="http://zerosalife.github.io/blog/2014/04/19/styx-ebooks/">making a twitter bot</a> like <a href="https://twitter.com/styx_ebooks">@styx_ebooks</a>.  Only this time it&rsquo;s in a completely different language and it&rsquo;s got a completely different corpus.  Corpus is a Latin way of saying text, in case you forgot.</p>

<!--more-->


<h2>Making the tweets</h2>

<p>The basic algorithm works like this.</p>

<p>The bot creates a huge textfile containing lyrics from Wu Tang Clan songs.  I trim away a lot of the information about verses and choruses, but I keep the punctuation because I like the sense of rhythm it creates.</p>

<p>Based on the relationship between the words in this corpus file, the bot builds a <a href="http://en.wikipedia.org/wiki/Markov_chain">markov process</a> to generate the text of the tweets.  To do so, the bot generates a transition matrix using <a href="https://github.com/Janiczek/markov">Janiczek&rsquo;s Clojure markov library</a>.  It then takes random walks through that matrix to produce a string of text with a similar relationship between words to the input lyrics corpus.</p>

<h2>Making it a command line app</h2>

<p>This is the first time I&rsquo;ve tried to make a command line application in Twitter.  Luckily there are some good tools out there.</p>

<p>I wondered how to deal with multiple options and inputs, and the good news is: it&rsquo;s just as easy as you&rsquo;d think.  You simply add conditionals to deal with the possible behaviors of your program.  The magic of <code>parse-opts</code> handles the rest.  Options with long names automatically become keys to the option dictionary, and if you&rsquo;ve marked them as a <code>:flag</code> you can depend on the truth-value to control the flow of your program.</p>

<p>You may think it&rsquo;s odd that I&rsquo;m using options instead of actions as in the <code>cli</code> example, but hey.  It&rsquo;s my program.  Your program can work the way you want it too.  I&rsquo;m going to make sure to document it so you can use the Rebel INS or build a twitter bot based on this code.</p>

<p>To build the app, I use <code>lein bin</code> from the command line.</p>

<p>I&rsquo;m interested in <a href="http://www.rkn.io/2014/02/06/clojure-cookbook-daemons/">daemonizing</a> the application.  That is to say, I&rsquo;m interested in turning it into a persistent process that runs in the background on my computer.  But for now, I&rsquo;ve set up a simple <a href="http://en.wikipedia.org/wiki/Cron">cron</a> script to tweet every few hours.</p>

<h2>Logging</h2>

<p>When I do tweets from the command line there&rsquo;s some dark magic going on that I don&rsquo;t understand.  Anyway it seems to invoke the <code>Log4j</code>, so I <a href="http://www.bahmanm.com/blogs/how-to-add-logging-to-a-clojure-project">set that up according to this blog post</a>.</p>

<h2>Markov chain text generation</h2>

<p>One of the quirks of the markov package I used is that it stops generating &lsquo;random walks&rsquo; when it reaches states that it has not been trained on.  As you can imagine when using imagery-rich, neologism-laden rap music, there are many words that occur once, even in a very large corpus.  Being unique is kind of a goal of the form, a fact reflected in <a href="http://en.wikipedia.org/wiki/Ol%2527_Dirty_Bastard">at least one alias</a>.</p>

<p>In order to make more realistic texts, it&rsquo;s common to increase the order of the transition matrix.  That is to say, to determine the probability for a following word from the prior two or more words.  However, given my idiosyncratic corpus, this leads the &lsquo;random walk&rsquo; algorithm to halt, giving me too few words in my output.</p>

<p>Interestingly, in this case, dialing back the order tends to lead to more rhyming and a few recognizable couplets, which I find kinda nice.</p>

<h2>Setting up the twitter account</h2>

<p>I ran into a problem getting an app set up for the bot&rsquo;s twitter account.  I am merely one person, and thus have need for merely one cell phone.  Since twitter requires a unique mobile number for authenticating apps, I was out of luck.  That is, until I found this <a href="http://dghubble.com/blog/posts/twitter-app-write-access-and-bots/">blog post showing how to use the same app on multiple bot clients</a>.</p>

<p>Faithful readers may remember my wildly popular, and yet still somehow deeply underrated, <a href="http://en.wikipedia.org/wiki/Bangsian_fantasy">Bangsian</a> fantasy bot, <a href="https://twitter.com/styx_ebooks">@styx_ebooks</a>.  Using <code>twurl</code> I was able to grant access to the <a href="https://twitter.com/styx_ebooks">@styx_ebooks</a> app credentials for the new bot.</p>

<h2>Moving on</h2>

<p>You can find the source code over on <a href="http://github.com/zerosalife/insceptahdeckwu">github.</a></p>

<p>Here&rsquo;s one of my favorite tweets so far:</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p>struck oil, the whole experience is wild</p>&mdash; INSceptah Deck (@insceptahdeckwu) <a href="https://twitter.com/insceptahdeckwu/status/529619098758823937">November 4, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>From here the sky&rsquo;s the limit.  I could try analyzing the generated text to try to build lines or stanzas.  I could try to reorder words to reflect the syntax present from the transcription.  I could try to represent individual emcees with unique corpora.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make things that make things: #procjam 2014]]></title>
    <link href="http://zerosalife.github.io/blog/2014/11/01/make-things-that-make-things-number-procjam-2014/"/>
    <updated>2014-11-01T12:48:46-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/11/01/make-things-that-make-things-number-procjam-2014</id>
    <content type="html"><![CDATA[<p>I&rsquo;m thrilled to announce that I&rsquo;m going to participate in the <a href="http://itch.io/jam/procjam">upcoming procedural game jam called #procjam</a>.  #procjam is a global game jam and a live-streamed conference in London focused on making things that make things. You can keep up to date by following the jam tumblr <a href="http://procjam.tumblr.com/">procjam.tumblr.com</a>. There&rsquo;s already a <a href="http://procjam.tumblr.com/post/99689402659/procedural-generation-tutorials-getting-started">handy list of procedural generation tutorials available on the tumblug</a>.</p>

<p>In addition to submitting one or two projects I&rsquo;ve been working on, I&rsquo;d like to cover the content of the talks with perspective and reactions, and to check out the contest entries after it&rsquo;s finished <a href="http://zerosalife.github.io/blog/2014/07/26/space-is-read/">like I did for <em>Space Is Red</em> from #spacecowboyjam</a>.</p>

<p>Needless to say this will be a month-long endeavor, what with my weekly (ish) blogging schedule.  With one or two posts focused on submissions, I think four blog posts may be conservative, so I&rsquo;ll keep writing as long as I&rsquo;m interested.</p>

<p>To make it easier to follow along, I&rsquo;ll tag up all the posts with the procjam category and I&rsquo;ll try to do the same for the tweet announcements, even if it&rsquo;s out of style because the jam was weeks ago.  That&rsquo;s how committed I am to making this happen.</p>

<p>If you get the sense that I&rsquo;m trying to psych myself up for this, I am.</p>

<p>The next couple of months will be very busy in my life.  I&rsquo;ll be traveling and attending conferences, activities that have traditionally consumed my precious blogging time like so many Frito pies.</p>

<p>I may be setting the bar high, but if anything the purpose for aiming high is success.  All too often I hear about jams in the middle when everyone is tweeting out cool prototypes and in the thick of design, or I&rsquo;ll hear about a jam when the contest is long over because someone pointed out that the winning entry was amazing.  Through dumb luck and exquisite taste in following <a href="https://twitter.com/mtrc">@mtrc on twitter</a>, I heard about this gamejam with enough lead time to mark it on my calendar.</p>

<p>Even if I don&rsquo;t produce anything interesting or important, by gum, I&rsquo;m going to participate in and cover this gamejam.  I&rsquo;m not going to let another really cool gamejam slip under the radar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play balance for party vs in-depth fighting games]]></title>
    <link href="http://zerosalife.github.io/blog/2014/10/18/play-balance-for-party-vs-in-depth-fighting-games/"/>
    <updated>2014-10-18T10:33:31-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/10/18/play-balance-for-party-vs-in-depth-fighting-games</id>
    <content type="html"><![CDATA[<p>Here I&rsquo;m drawing a comparison between games that are subjectively perceived as party games and games that are more in-depth.  I&rsquo;m avoiding using loaded terms like casual and hardcore, but I think the distinction is likely the same.  Both types of games can be complex, but subtle balancing issues can affect the subjective sense of fun when playing these games.</p>

<p>For discussion I&rsquo;m going to focus on relatively advanced moves in <em><a href="http://www.smashbros.com">Super Smash Bros.</a></em> and <em><a href="http://www.towerfall-game.com/">TowerFall</a></em>: L-canceling and dodge canceling, respectively.  I was inspired to examine this balance issue by a recent tweet by <em>TowerFall</em> creator, and, in the interest of full disclosure, my close personal 3DS friend, <a href="https://twitter.com/MattThorson">@MattThorson</a>.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p>L-cancelling was actually my model of what to avoid with dodge cancelling in TowerFall</p>&mdash; Matt Thorson (@MattThorson) <a href="https://twitter.com/MattThorson/status/519576823533801472">October 7, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>




<!--more-->


<p>Thorson previously pointed out an interesting <a href="https://twitter.com/DamianSommer/status/519537228582633473">discussion</a> on the mechanic of L-canceling by <a href="https://twitter.com/DamianSommer/status/519537228582633473">@DamianSommer</a> among others. Sommer wants to focus on how the L-canceling mechanic reflects the design intent of the creators of <em>Super Smash Bros.</em></p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p>I&#39;m of the opinion that it creates an unnecessary disparity between low and high-skill players because there&#39;s no reason to not L-cancel.</p>&mdash; Demon Summoner (@DamianSommer) <a href="https://twitter.com/DamianSommer/status/519537749754658816">October 7, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p><a href="https://twitter.com/Sonic9jct">@Sonic9jct</a> highlights the dichotomy that I am exploring here.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/DamianSommer">@DamianSommer</a> I always imagined the first 3 Smashes were designed and balanced as party games, especially Brawl, as opposed to fighting&#8230;</p>&mdash; John-Chocula Holmes (@Sonic9jct) <a href="https://twitter.com/Sonic9jct/status/519538190764343296">October 7, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p><a href="http://supersmashbros.wikia.com/wiki/L-canceling">L-canceling</a> requires extremely precise timing of inputs when the character is in a particular state.  You must press L within 6 frames of landing on the ground while performing an <a href="http://supersmashbros.wikia.com/wiki/Aerial_attack">aerial attack</a>.  Since <em>Super Smash Bros.</em> runs at 60 frames per second, this requires you to press the button within 100 milliseconds of hitting the ground.  To put this in perspective, the average human reaction time is about 250 milliseconds.</p>

<p><a href="https://twitter.com/whatisian">@whatisian</a> brilliantly captures the distinction in design that makes this a more difficult, in-depth, technically demanding mechanic.  If there is no drawback, then the execution of the L-cancel is practically mandatory at high levels of play.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/DamianSommer">@DamianSommer</a> if L-Cancelling is never detrimental, then it&#39;s execution is a measure of dexterity, not cleverness.</p>&mdash; ❧ Demon Cider (@whatisian) <a href="https://twitter.com/whatisian/status/519555442012217344">October 7, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>Let&rsquo;s look at how this differs from <a href="http://steamcommunity.com/sharedfiles/filedetails/?id%3D250779585">dodge canceling</a> in <em>TowerFall</em> a game that Thorson intentionally designed to be welcoming to new players, while still keeping them competitive with skilled players.</p>

<p>Dodge canceling requires similarly herculean inputs to pull off, to perform a dodge cancel you must press the dodge button a second time after initiating a dodge maneuver.  The dodge lasts 367 milliseconds or 22 frames at 60 fps.  This seems like a lot of time to perform the dodge cancel compared to the scant 6 frames for an L-cancel, but there&rsquo;s a catch.  In order to get the most momentum, to carry the most speed through the dodge cancel, you must perform the move on exactly the right frame.</p>

<p>Sounds pretty tough, right?  If you think this would require some impressive technical skills to pull it off, you&rsquo;re right.  But there&rsquo;s a catch, turning or firing from the dodge cancel reduces the character&rsquo;s speed, making the character an easier target.</p>

<p>Thorson&rsquo;s mechanic provides a similar advantage to L-canceling with the addition of the risk of failure.  Dodge cancels could allow the player to zing around the level at will, firing arrows every which way, but Thorson decided to introduce drawbacks for imprecise play that create risks for more advanced players to put them closer to parity with less skilled players.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/then00b">@then00b</a> I wanted it to provide an advantage, but to also have risk associated with it, and I think it does :)</p>&mdash; Matt Thorson (@MattThorson) <a href="https://twitter.com/MattThorson/status/519634020561203200">October 7, 2014</a></blockquote>
<script async src="http://zerosalife.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>These are just my thoughts on this interesting discussion.  I&rsquo;m not a high-level player of either of these games, so I may have missed some of the subtleties to which Thorson or others refer.  If you think I&rsquo;m off the mark, or you just want to weigh in on the merits of designing for &ldquo;party&rdquo; vs. &ldquo;fighting&rdquo; games, drop me a line in the comments or on <a href="https://twitter.com/zerosalife">twitter</a>.</p>
]]></content>
  </entry>
  
</feed>
