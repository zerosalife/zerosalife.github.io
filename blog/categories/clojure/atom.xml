<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2014-12-27T13:42:42-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Patchwerk]]></title>
    <link href="http://zerosalife.github.io/blog/2014/11/15/patchwerk/"/>
    <updated>2014-11-15T08:22:18-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/11/15/patchwerk</id>
    <content type="html"><![CDATA[<h2>Procjam updates</h2>

<p>I&rsquo;ve spent the week at a couple of major international conferences sponsored to some degree by old dead-tree journals.  I was struck, following last weekends' <a href="https://twitter.com/search?q%3Dprocjam">#procjam</a> <a href="http://www.twitch.tv/procjam">talks</a>, by the lack of openness.  None of these talks are going to be made freely available.  Photography and recording is actively discouraged.  The official conference hashtags, when provided, were silent or only used by those in attendance.  While this exclusivity may generate profits for the aforementioned dead-tree journals and give a leg up to those fortunate enough to be able to attend these conferences, I find it ethically reprehensible in the 21st century, given the tools that we have available.</p>

<p>I&rsquo;d like to once again thank <a href="https://twitter.com/mtrc">@mtrc</a> for hosting <em>and streaming</em> #procjam.  Because conference was made freely available, I was able to interact with the attendees in a way that would be impossible if I was trying to divine through twitter what was going on behind closed doors.  I think this kind of openness can only generate more interest and ideas, regardless of the field of study.</p>

<h2>Patchwerk</h2>

<p>A <a href="https://github.com/quil/quil">Quil</a> sketch designed to generate patterns for quilts.  The code is <a href="https://github.com/zerosalife/patchwerk">available on github</a>.</p>

<p><a href="https://github.com/zerosalife/patchwerk/blob/master/patchwerk-example.png"><img class="center" src="https://raw.githubusercontent.com/zerosalife/patchwerk/master/patchwerk-example.png"></a></p>

<!--more-->


<h2>What is Quil?</h2>

<p>Quil is a port of <a href="http://processing.org">Processing</a> to <a href="http://clojure.org/">Clojure</a>.</p>

<h2>Motivation</h2>

<p>When I came across some interesting pictures of quilts, I was struck by the regularity of the shapes used to construct them.  A quilt is simply a grid of squares containing some pattern of simple shapes.  I thought it would be interesting to have an algorithm generate the grid (what I guess quilters probably call a pattern), so I set out to build some functions in Quil to draw a few simple shapes that I identified in the squares of the quilts and then to randomly draw them in a grid.</p>

<h2>How to model a quilt</h2>

<p>Using the fundamental assumption I already stated: a quilt is just a grid of squares.  My algorithm defines a <code>grid-width</code> and <code>grid-height</code> along with a <code>square-size</code> in pixels that determine the overall size of the quilt pattern to generate.  This allows you to generate an arbitrary number of quilt squares of a certain size.</p>

<p>Each square contains a subgrid with a defined <code>sub-grid-width</code> and <code>sub-grid-height</code>.  In retrospect, it would probably be better to define one parameter because if the dimensions are not square, everything will be screwed up.</p>

<p>I then define several basic drawing functions to fill the squares of the grid.  The procedural generation&rsquo;s <code>draw</code> algorithm knows about each of the drawing functions, called <code>pattern-funcs</code>, and picks one of the <code>patterns</code> to draw each square of the grid.</p>

<h2>The drawing functions</h2>

<p>The primary elements of the quilt squares that I wanted to replicate were large squares, smaller checkers, triangles, and a mixed pattern of small triangles with a square that I called &ldquo;fish&rdquo;.</p>

<p>The squares (see the square second left from the top right) and the smaller checkers (see quilt square fourth down from the top left) use the same drawing function.  However, they differ in that they utilize different helper functions return the correctly sized vertices and support multiple calls for the smaller checkers.</p>

<p>The triangles (see square in the top right) use a lookup table, <code>triangle-lookup-table</code>, to store information about the appropriate &ldquo;legs&rdquo; for a triangle with a point in a given corner.  By using a common syntax for the vertices, the <code>draw-triangle</code> algorithm can share the vertex lookup algorithm with the square routines.</p>

<p>Then the culmination of my dastardly plan involves marrying a square from the smaller checker function with flanking triangles, based on the subgrid this time instead of the larger grid.  The result is a pattern that looks like a fish to me (see quilt square in the top left).  Because I built the abstract drawing functions, I simply have to take care of the four directional possibilities and let the drawing functions more fundamental handle the work.</p>

<h2>Future plans: toward Patchwerk 1.0.0</h2>

<p>The project is in need of a major refactoring session, when I can find the time.  I developed it in a single monolithic Clojure file for ease of testing in the REPL.  It will be easier to maintain and understand if I separate out the distinct functionalities into their own namespaces.  The ones that come to mind are <code>patchwerk.grid</code> to handle the generation of the grid, <code>patchwerk.patterns</code> to manage the drawing functions, and <code>patchwerk.util</code> to house the helper functions.  I&rsquo;d also like to make it clear which functions use the <code>quil.core</code> namespace instead of using <code>:refer :all</code>.</p>

<p>There is also <a href="https://github.com/quil/quil/wiki/Functional-mode-(fun-mode">some interesting new functional middleware for Quil</a>).  It provides a framework for you to separate out the mutable state from your Quil functions so that you avoid side effects and can program pure functions, in Processing&rsquo;s typically imperative syntax.  To get this up and running, I imagine that I will have to represent the pixel grid in the <code>state</code> map.</p>

<p>Eventually, and this is beyond the scope of 1.0.0, I&rsquo;m intrigued by the possibility of <a href="https://github.com/quil/quil/wiki/ClojureScript">porting this code over to Clojurescript</a> and creating a web-based version of the application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[INSceptahdeckWU]]></title>
    <link href="http://zerosalife.github.io/blog/2014/11/08/insceptahdeckwu/"/>
    <updated>2014-11-08T09:28:39-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/11/08/insceptahdeckwu</id>
    <content type="html"><![CDATA[<h2>#procjam updates</h2>

<p><a href="https://twitter.com/search?q%3Dprocjam">#procjam</a> is upon us.  The conference is on and popping, streaming at <a href="http://www.twitch.tv/procjam">http://www.twitch.tv/procjam</a>.  I&rsquo;ll try to precede my #procjam posts with a little update on some of the cool things I&rsquo;ve seen that need pointing out during the jam itself.</p>

<p><a href="https://twitter.com/GalaxyKate">@GalaxyKate</a> will be streaming <a href="http://vimeo.com/111272682">some tutorials</a> today, following the conference.</p>

<p><a href="https://twitter.com/SudoRossy">@sudorossy</a> is currently streaming some development and modeling at <a href="http://www.twitch.tv/sudorossy">http://www.twitch.tv/sudorossy</a>.  I imagine that sudorossy will continue this throughout the jam.</p>

<p>The <a href="https://twitter.com/search?q%3D7dfps">#7dfps</a> jam is also going on this week.  So, I&rsquo;ve decided to release my third person procedural tweeter.  Or maybe it&rsquo;s a fourth person tweeter, third person once removed.</p>

<h2>Fourth-person tweets</h2>

<p>I&rsquo;m at it again, <a href="http://zerosalife.github.io/blog/2014/04/19/styx-ebooks/">making a twitter bot</a> like <a href="https://twitter.com/styx_ebooks">@styx_ebooks</a>.  Only this time it&rsquo;s in a completely different language and it&rsquo;s got a completely different corpus.  Corpus is a Latin way of saying text, in case you forgot.</p>

<!--more-->


<h2>Making the tweets</h2>

<p>The basic algorithm works like this.</p>

<p>The bot creates a huge textfile containing lyrics from Wu Tang Clan songs.  I trim away a lot of the information about verses and choruses, but I keep the punctuation because I like the sense of rhythm it creates.</p>

<p>Based on the relationship between the words in this corpus file, the bot builds a <a href="http://en.wikipedia.org/wiki/Markov_chain">markov process</a> to generate the text of the tweets.  To do so, the bot generates a transition matrix using <a href="https://github.com/Janiczek/markov">Janiczek&rsquo;s Clojure markov library</a>.  It then takes random walks through that matrix to produce a string of text with a similar relationship between words to the input lyrics corpus.</p>

<h2>Making it a command line app</h2>

<p>This is the first time I&rsquo;ve tried to make a command line application in Twitter.  Luckily there are some good tools out there.</p>

<p>I wondered how to deal with multiple options and inputs, and the good news is: it&rsquo;s just as easy as you&rsquo;d think.  You simply add conditionals to deal with the possible behaviors of your program.  The magic of <code>parse-opts</code> handles the rest.  Options with long names automatically become keys to the option dictionary, and if you&rsquo;ve marked them as a <code>:flag</code> you can depend on the truth-value to control the flow of your program.</p>

<p>You may think it&rsquo;s odd that I&rsquo;m using options instead of actions as in the <code>cli</code> example, but hey.  It&rsquo;s my program.  Your program can work the way you want it too.  I&rsquo;m going to make sure to document it so you can use the Rebel INS or build a twitter bot based on this code.</p>

<p>To build the app, I use <code>lein bin</code> from the command line.</p>

<p>I&rsquo;m interested in <a href="http://www.rkn.io/2014/02/06/clojure-cookbook-daemons/">daemonizing</a> the application.  That is to say, I&rsquo;m interested in turning it into a persistent process that runs in the background on my computer.  But for now, I&rsquo;ve set up a simple <a href="http://en.wikipedia.org/wiki/Cron">cron</a> script to tweet every few hours.</p>

<h2>Logging</h2>

<p>When I do tweets from the command line there&rsquo;s some dark magic going on that I don&rsquo;t understand.  Anyway it seems to invoke the <code>Log4j</code>, so I <a href="http://www.bahmanm.com/blogs/how-to-add-logging-to-a-clojure-project">set that up according to this blog post</a>.</p>

<h2>Markov chain text generation</h2>

<p>One of the quirks of the markov package I used is that it stops generating &lsquo;random walks&rsquo; when it reaches states that it has not been trained on.  As you can imagine when using imagery-rich, neologism-laden rap music, there are many words that occur once, even in a very large corpus.  Being unique is kind of a goal of the form, a fact reflected in <a href="http://en.wikipedia.org/wiki/Ol%2527_Dirty_Bastard">at least one alias</a>.</p>

<p>In order to make more realistic texts, it&rsquo;s common to increase the order of the transition matrix.  That is to say, to determine the probability for a following word from the prior two or more words.  However, given my idiosyncratic corpus, this leads the &lsquo;random walk&rsquo; algorithm to halt, giving me too few words in my output.</p>

<p>Interestingly, in this case, dialing back the order tends to lead to more rhyming and a few recognizable couplets, which I find kinda nice.</p>

<h2>Setting up the twitter account</h2>

<p>I ran into a problem getting an app set up for the bot&rsquo;s twitter account.  I am merely one person, and thus have need for merely one cell phone.  Since twitter requires a unique mobile number for authenticating apps, I was out of luck.  That is, until I found this <a href="http://dghubble.com/blog/posts/twitter-app-write-access-and-bots/">blog post showing how to use the same app on multiple bot clients</a>.</p>

<p>Faithful readers may remember my wildly popular, and yet still somehow deeply underrated, <a href="http://en.wikipedia.org/wiki/Bangsian_fantasy">Bangsian</a> fantasy bot, <a href="https://twitter.com/styx_ebooks">@styx_ebooks</a>.  Using <code>twurl</code> I was able to grant access to the <a href="https://twitter.com/styx_ebooks">@styx_ebooks</a> app credentials for the new bot.</p>

<h2>Moving on</h2>

<p>You can find the source code over on <a href="http://github.com/zerosalife/insceptahdeckwu">github.</a></p>

<p>Here&rsquo;s one of my favorite tweets so far:</p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p>From here the sky&rsquo;s the limit.  I could try analyzing the generated text to try to build lines or stanzas.  I could try to reorder words to reflect the syntax present from the transcription.  I could try to represent individual emcees with unique corpora.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Rhizome Labeled Edge Tutorial]]></title>
    <link href="http://zerosalife.github.io/blog/2014/04/26/clojure-rhizome-labeled-edge-tutorial/"/>
    <updated>2014-04-26T10:47:18-04:00</updated>
    <id>http://zerosalife.github.io/blog/2014/04/26/clojure-rhizome-labeled-edge-tutorial</id>
    <content type="html"><![CDATA[<p>I&rsquo;m using the <a href="https://github.com/ztellman/rhizome">Rhizome package</a> for Clojure to rapidly prototype the dependency graph for a crafting system.  It&rsquo;s nice to be able to add and remove components while generating visualizations on-the-fly.  Clojure&rsquo;s simple, composable syntax, aided by <a href="https://www.youtube.com/watch?v=D6h5dFyyUX0">paredit</a>, makes shuffling around key-value pairs, and even whole dictionaries, quick and easy.</p>

<p>The existing Rhizome documentation shows simple examples for labeling the nodes of a directed graph.  In order to show the relationship between nodes on the graph, I&rsquo;d like to also label the edges, or the arrows connecting the nodes.</p>

<p>Rhizome provides a keyword argument <code>:edge-&gt;descriptor</code> to most of its functions.  Consulting the source code and the tests for the Rhizome package, I learned that the functions expect <code>:edge-&gt;descriptor</code> to be a function accepting two arguments for each edge: <code>src</code>, the source node, and <code>dst</code>, the destination node.  In order to label the edges, the anonymous function I&rsquo;m binding to <code>:edge-&gt;descriptor</code> will return a dictionary containing the key <code>:label</code> and the value for the edge&rsquo;s label.</p>

<p>Here&rsquo;s an example using the simple graph from the Rhizome documentation:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="o">&amp;</span><span class="nv">lsquo</span><span class="c1">;rhizome.viz)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">def </span><span class="nv">g&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">{</span><span class="ss">:a</span> <span class="p">[</span><span class="ss">:b</span> <span class="ss">:c</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:b</span> <span class="p">[</span><span class="ss">:c</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:c</span> <span class="p">[</span><span class="ss">:a</span><span class="p">]})</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">view-graph</span> <span class="p">(</span><span class="nb">keys </span><span class="nv">g</span><span class="p">)</span> <span class="nv">g&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>        <span class="ss">:node-</span><span class="o">&amp;</span><span class="nv">gt</span><span class="c1">;descriptor (fn [n] {:label n}))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/images/assets/graph-unlabeled-edges.png"></p>

<p>Now, I&rsquo;ll use a dictionary of dictionaries to associate the source and destination nodes with a label for each edge.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">g-edges</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:a</span> <span class="p">{</span><span class="ss">:b</span> <span class="ss">:makes&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>   <span class="ss">:c</span> <span class="ss">:takes</span><span class="p">}</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>   <span class="ss">:b</span> <span class="p">{</span><span class="ss">:c</span> <span class="ss">:takes</span><span class="p">}</span>
</span><span class='line'>   <span class="ss">:c</span> <span class="p">{</span><span class="ss">:a</span> <span class="ss">:makes</span><span class="p">}})</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">view-graph</span> <span class="p">(</span><span class="nb">keys </span><span class="nv">g</span><span class="p">)</span> <span class="nv">g&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>        <span class="ss">:node-</span><span class="o">&amp;</span><span class="nv">gt</span><span class="c1">;descriptor (fn [n] {:label n})</span>
</span><span class='line'>        <span class="ss">:edge-</span><span class="o">&amp;</span><span class="nv">gt</span><span class="c1">;descriptor (fn [src dst] {:label (dst (src g-edges))}))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/images/assets/graph-labeled-edges.png"></p>

<p>I&rsquo;ve submitted a <a href="https://github.com/ztellman/rhizome/pull/8">pull request</a> to Rhizome to add this example to the documentation.</p>
]]></content>
  </entry>
  
</feed>
