<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AI | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/ai/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2015-09-12T09:56:22-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple Mind-reading Machine in Unity JavaScript]]></title>
    <link href="http://zerosalife.github.io/blog/2014/12/13/simple-mind-reading-machine-in-unity-javascript/"/>
    <updated>2014-12-13T14:38:20-06:00</updated>
    <id>http://zerosalife.github.io/blog/2014/12/13/simple-mind-reading-machine-in-unity-javascript</id>
    <content type="html"><![CDATA[<p>I ported a cool toy from <a href="http://alastaira.wordpress.com/2014/03/15/a-simple-mind-reading-machine/">Alastair Aitchison&rsquo;s blog</a> to Unity JavaScript.  The toy implements a simple &lsquo;mind-reading&rsquo; algorithm that attempts to guess whether the player will choose Left (by pressing the left arrow key) or Right (by pressing the right arrow key).</p>

<!--more-->


<h2>How does it work?</h2>

<p>Aitchison&rsquo;s blog post describes how it works:</p>

<blockquote><p>How does it work? Not by mind-reading, obviously, but by exploiting
the fact that humans do not behave as &ldquo;randomly&rdquo; as they think they
do. The computer maintains a very simple memory that records the
pattern of results of the last two rounds â€“ whether the player won or
lost, whether they switched strategy, and then whether they then won
or last the following round. The computer then uses this to choose its
own best strategy based on the way the player behaved last time the
current pattern occurred. If the computer loses twice in a row using
the current strategy, it picks a random response in the next round.</p></blockquote>

<p>The original idea came from some AI work by <a href="http://en.wikipedia.org/wiki/Claude_Shannon">Claude Shannon</a> and D. W. Hagelbarger. <a href="http://cs.stanford.edu/people/eroberts/courses/soco/projects/1999-00/information-theory/ai.html">They describe the internal memory of the toy mind-reader</a> that we will model using a multidimensional array <code>v</code>:</p>

<blockquote><p>There are 8 possible situations and two things the player can do at each one:</p>

<ol>
<li><p>player wins, plays same, wins. Then same or differently.</p></li>
<li><p>player wins, plays same, loses. Then same or differently.</p></li>
<li><p>player wins, plays differently, wins. Then same or differently.</p></li>
<li><p>player wins, plays differently, loses.Then same or differently.</p></li>
<li><p>player loses, plays same, wins.Then same or differently.</p></li>
<li><p>player loses, plays same, loses.Then same or differently.</p></li>
<li><p>player loses, plays differently, wins.Then same or differently.</p></li>
<li><p>player loses, plays differently, loses.Then same or differently.</p></li>
</ol>
</blockquote>

<h2>Why port it?</h2>

<p>Why not just take a straightforward approach, running the code myself? First, I wanted to fully understand the algorithm the hard way, by coding it line for line myself. And second, I wanted to better familiarize myself with Unity JavaScript, including its differences from C#.</p>

<p>The port was relatively simple, except for two small hiccups.  First, as far as I know, Unity JavaScript doesn&rsquo;t allow for initializing a multidimensional array.  So I looped over the cells in the array, filling them that way.  I have a hunch that the cells are initialized to the <code>int</code> <code>0</code> by default, but I wanted to be explicit.  Please let me know in the comments or <a href="https://twitter.com/zerosalife">via twitter</a> if I&rsquo;m way off base.</p>

<pre><code>var v : int[2, 2, 2];
for(var cell in v) {
    cell = 0;
}
</code></pre>

<p>I also encountered some unfamiliar syntax: the sonorously named Elvis operator, <a href="http://en.wikipedia.org/wiki/Conditional_operator">?:</a>.  It&rsquo;s also called the <a href="http://en.wikipedia.org/wiki/Ternary_operation">ternary operator</a>, when it&rsquo;s used with 3 arguments, as I&rsquo;ve used it here.  In C-like languages it allows for succinctly stating these kinds of conditional expressions. The example below illustrates how it&rsquo;s used.</p>

<pre><code>// Is the current player's choice the same as the previous player's
// choice?
//
// if (playerChoice == lastChoice)
//     sameChoice = True;
// else
//     sameChoice = False;
//
// Using ternary operator:
v[lw2, lw1, 1] = (v[lw2, lw1, 0] == playerChoice ? 1 : 0);
</code></pre>

<h2>The code</h2>

<p>The ported code for the mind-reader is reproduced below.</p>

<pre><code>#pragma strict
import System.Collections.Generic;

// Used to record play history
var v: int[,,];
var lw1: int;
var lw2: int;
var losingStreak: int;

// The prediction of the player's next turn
var prediction: int;

// Keep track of scores
var cpuScore: int;
var playerScore: int;

var outText: String;

function Start () {
    // Initialize matrix to track state of play history

    v = new int[2, 2, 2];

    for(var cell in v) {
        cell = 0;
    }

    // No prior knowledge, so set inital prediction based on random chance.
    prediction = flip();

    // Set scores to 0
    cpuScore = 0;
    playerScore = 0;

    // Initialize previous play and play before last win-lost trackers
    lw1 = 0;
    lw2 = 0;

    // Output
    outText = "";
}

function TakeTurn(playerChoice: int) {
    // Display player and computer's choices
    var outTextString: String = "You pressed " + playerChoice + ", " + "I guessed " + prediction + "\n";

    // Computer guessed correctly
    if (playerChoice == prediction) {
        cpuScore++;
        losingStreak = 0;
        outTextString += " I WIN!\n";
    }
    else {
        playerScore++;
        losingStreak++;
        outTextString += " YOU WIN!\n";
    }

    outText = outTextString;

    // Is the current player's choice the same as the previous player's
    // choice?
    //
    // if (playerChoice == lastChoice)
    //     sameChoice = True;
    // else
    //     sameChoice = False;
    //
    // Using ternary operator:
    v[lw2, lw1, 1] = (v[lw2, lw1, 0] == playerChoice ? 1 : 0);
    v[lw2, lw1, 0] = playerChoice;
    lw2 = lw1;
    lw1 = playerChoice;

    // If lost more than twice in present state, choose random
    // strategy.  Otherwise keep the same strategy.
    prediction = v[lw2, lw1, 1] == 1 &amp;&amp; losingStreak &lt; 2 ? v[lw2, lw1, 0] : flip();
}

function flip() : int {
    // Simulate a coin flip to produce 50:50 chance of [0, 1]
    return Random.Range(0, 2);
}


function Update () {
    if (Input.GetKeyDown(KeyCode.LeftArrow)) {
        TakeTurn(0);
    }
    if (Input.GetKeyDown(KeyCode.RightArrow)) {
        TakeTurn(1);
    }
}

function OnGUI() {
    var style : GUIStyle = new GUIStyle();
    style.fontSize = 36;

    GUI.Label(new Rect(0, 0, Screen.width, 100), outText, style);
    GUI.Label(new Rect(0, 100, Screen.width, 200), "Player: " + playerScore + " CPU: " + cpuScore, style);
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An in-depth tour of Tetris]]></title>
    <link href="http://zerosalife.github.io/blog/2014/02/08/an-in-depth-tour-of-tetris/"/>
    <updated>2014-02-08T08:34:35-06:00</updated>
    <id>http://zerosalife.github.io/blog/2014/02/08/an-in-depth-tour-of-tetris</id>
    <content type="html"><![CDATA[<p><img class="center <a" src="href="http://upload.wikimedia.org/wikipedia/en/a/ae/Tetris_NES_play.png">http://upload.wikimedia.org/wikipedia/en/a/ae/Tetris_NES_play.png</a>"></p>

<p style="text-align:center;"> Image from <a href="http://en.wikipedia.org/wiki/Tetris">wikipedia.org</a>.</p>

<p>This week I&rsquo;ve spent quite some time reading
<a href="http://meatfighter.com/nintendotetrisai/">this article</a> on
<a href="http://meatfighter.com/">MeatFighter.com</a>.  The article reverse
engineers the inner-workings of
<a href="http://en.wikipedia.org/wiki/Tetris#NES">NES Tetris</a>.  With superb
visual aids, the author, o__1<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> , surveys the mechanics and data
structures used to implement Tetris on the NES.  Then o__1 designs
and implements an AI script to play Tetris with super-human speed and
precision.  o__1 even describes how to try it at home, providing
instructions and the necessary Lua scripts to run the AI on your own
copy of Tetris.</p>

<p>I hope to see more articles looking back on classic games with this
tremendous attention to detail.  An older
<a href="http://home.comcast.net/~jpittman2/pacman/pacmandossier.html">article looking at Pac-man AI</a>
shows similar obsessive depth.  Articles like these help supplement
our appreciation of these games as works of art by documenting the
essential technical complexities underlying these games.  I think
that&rsquo;s a good thing for everyone from hobby developers to professional
developers, as well as designers and fans.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I&rsquo;m referring to the author by the contact email listed on the website.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
