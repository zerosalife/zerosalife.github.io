<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/design/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2016-10-29T09:55:55-04:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Procjam 2016 Talks]]></title>
    <link href="http://zerosalife.github.io/blog/2016/10/29/procjam-2016-talks/"/>
    <updated>2016-10-29T09:51:02-04:00</updated>
    <id>http://zerosalife.github.io/blog/2016/10/29/procjam-2016-talks</id>
    <content type="html"><![CDATA[<p>Last weekend <a href="https://twitter.com/mtrc">@mtrc</a> put on a <a href="https://www.youtube.com/watch?v%3D3wcpLwvBTYo">series of talks</a> leading up to <a href="https://twitter.com/hashtag/procjam">#procjam</a> 2016 at Falmouth University in Cornwall.  You can <a href="https://itch.io/jam/procjam">read more about the jam at itch.io</a>.</p>

<p>Here are some links to interesting resources that stood out to me:</p>

<!--more-->


<h2>The Video Game Level Corpus</h2>

<p><a href="https://arxiv.org/abs/1606.07487">https://arxiv.org/abs/1606.07487</a></p>

<h2>PCG book</h2>

<p><a href="http://pcgbook.com/">http://pcgbook.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Special Missions' Story Pattern]]></title>
    <link href="http://zerosalife.github.io/blog/2016/10/22/special-missions-story-pattern/"/>
    <updated>2016-10-22T09:22:43-04:00</updated>
    <id>http://zerosalife.github.io/blog/2016/10/22/special-missions-story-pattern</id>
    <content type="html"><![CDATA[<p>I&rsquo;m interested in Larry Hama&rsquo;s <a href="https://en.wikipedia.org/wiki/G.I._Joe_%28comics%29#G.I._Joe:_Special_Missions"><em>GI Joe Special Missions'</em></a> influence on Metal Gear and Metal Gear Solid.  I want to look at the pattern of story telling that seems to emerge consistently in Special Missions' issues.</p>

<!--more-->


<ul>
<li>A</li>
<li>A</li>
<li>B</li>
<li>A</li>
<li>B</li>
<li>A</li>
<li>B</li>
<li>A</li>
<li>A</li>
<li>B</li>
<li>A</li>
<li>A</li>
<li>B</li>
<li>A</li>
<li>A</li>
<li>A</li>
<li>A</li>
<li>A</li>
</ul>


<p>Notice how this follows a three act structure.</p>

<p>In the first three pages we establish a scenario, the first act of the story.  In the following pages we rapidly cross cut between the primary story (A) and the secondary story (B), forming the bulk of the story, the second act.  Finally the secondary story may be resolved or cross over to join the primary story, which takes over for the last five pages, forming the climax and resolution, the third act of the story.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why does Pokemon GO use passive voice?]]></title>
    <link href="http://zerosalife.github.io/blog/2016/08/27/why-does-pokemon-go-use-passive-voice/"/>
    <updated>2016-08-27T10:21:50-04:00</updated>
    <id>http://zerosalife.github.io/blog/2016/08/27/why-does-pokemon-go-use-passive-voice</id>
    <content type="html"><![CDATA[<p>A colleague of mine wondered why <a href="http://www.pokemon.com/us/pokemon-video-games/pokemon-go/">Pokemon GO</a> uses the passive voice when reporting,</p>

<blockquote><p>Pikachu was caught!</p></blockquote>

<p>The simple reason is nostalgia&mdash;that&rsquo;s the phrasing from the original <a href="http://bulbapedia.bulbagarden.net/wiki/Generation_I">Generation 1 Pokemon games</a>.</p>

<p>Was there a limitation inherent in the medium at the time that required using the passive voice?  Below I&rsquo;ll dig into the <a href="https://github.com/pret/pokered">disassembled Pokemon Red source code</a> to answer the question of why Pokemon Go uses passive voice.</p>

<!--more-->


<p><a href="https://github.com/pret/pokered/blob/master/text.asm#L2793-L2798">This code</a> shows the text that is displayed when the player successfully uses a pokeball to capture a pokemon.  I&rsquo;ll break it down for you, using the <a href="https://github.com/pret/pokered/blob/master/macros.asm#L221">text macros</a> for reference.</p>

<p>The <code>text</code> macro starts writing text, printing out the string <code>"All right!"</code>.  Then the <code>line</code> macro prints a special character <code>"@"</code> at the beginning of the bottom line in the text box.  The <code>TX_RAM</code> macro looks up a stored chunk of text based on the address stored in <code>wEnemyMonNick</code>, which points at the current enemy pokemon&rsquo;s name, and prints the name in the text box.  Then another <code>text</code> macro starts writing <code>" was"</code> following the enemy pokemon&rsquo;s name. And finally, the <code>cont</code> macro scrolls text to the next line, printing <code>"caught!@@"</code>.</p>

<p>I couldn&rsquo;t find a good reference, but I&rsquo;m pretty sure that the <code>@</code> character is acting as a <a href="https://en.wikipedia.org/wiki/Newline">newline character</a>, more commonly <code>\n</code> these days.</p>

<p>The final text looks something like:</p>

<pre><code>All right!\n
Pikachu was
caught!!\n
\n
</code></pre>

<p>Now you&rsquo;ve seen the implementation of the text for catching pokemon.  Is there a technical reason for choosing to use passive voice?</p>

<p>Maybe <code>TX_RAM</code> can only be used with a <code>text</code> macro.  Based on a cursory glance over the <a href="https://github.com/pret/pokered/blob/master/text.asm">text</a>, I&rsquo;d say that this is likely to be the case.  But that doesn&rsquo;t prevent the developers from choosing to say</p>

<pre><code>You caught
Pikachu!
</code></pre>

<p>Could the developers have used a more active voice?  Yes!  Refer to this <a href="https://github.com/pret/pokered/blob/master/text.asm#L1130">link battle text</a> for an example of <code>TX_RAM</code> beginning a dialogue.</p>

<p>The word &ldquo;you&rdquo; occurs <a href="https://github.com/pret/pokered/search?utf8%3D%25E2%259C%2593&amp;q%3Dyou">171 times in the Pokemon red codebase</a>, without controlling for contents of text strings vs method and variable names.</p>

<p>There seems to be a general tendency to use &ldquo;you&rdquo; to refer to things that the player does, such as connecting the link cable between two Gameboys to trade pokemon, rather than the player character&rsquo;s actions in the game.  So that could have been a good reason to choose the passive voice.  Also, there could be some reasoning behind matching the original Japanese text that I&rsquo;m missing here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Grammar of Procedural Platformer Levels]]></title>
    <link href="http://zerosalife.github.io/blog/2016/08/13/a-grammar-of-procedural-platformer-levels/"/>
    <updated>2016-08-13T10:43:49-04:00</updated>
    <id>http://zerosalife.github.io/blog/2016/08/13/a-grammar-of-procedural-platformer-levels</id>
    <content type="html"><![CDATA[<p>Brief post this week linking to a couple of great articles about elements of platformer game design.  I think these articles make great resources for a procedural platformer level generator.  Brevity and procedural focus stem at least partially from the release of the captivating <em><a href="http://www.no-mans-sky.com/">No Man&rsquo;s Sky</a></em>.</p>

<h2>Platformer Level Design</h2>

<p><a href="https://twitter.com/gamedevprof">Ken Bowen</a>&rsquo;s 2012 article covering <a href="http://gamedevprofessor.com/sidescroller-level-design/">2D Sidescroller Level Design</a> has some great tips.  I especially like the section called Define your Building Blocks.  I think this will require some revisiting in a future post.</p>

<h2>Fundamental Physics for Platformers</h2>

<p><a href="https://github.com/error454">Zachary Burke</a>&rsquo;s article about <a href="http://error454.com/2013/10/23/platformer-physics-101-and-the-3-fundamental-equations-of-platformers/">Platformer Physics</a> is a nice resource that explains the fundamentals in great mathematical detail.  It also provides inverse solutions for deriving physics based on descriptive parameters for jump height and timing.</p>

<p>Taken together these articles suggest, to me, that we could achieve a fully descriptive grammar of platformer games to generate a variety of levels constructed from basic building blocks, with constraints ensuring fun and responsive gameplay physics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I am Setsuna uses a State Stack: Overworld]]></title>
    <link href="http://zerosalife.github.io/blog/2016/07/30/how-i-am-setsuna-uses-a-state-stack-overworld/"/>
    <updated>2016-07-30T10:47:19-04:00</updated>
    <id>http://zerosalife.github.io/blog/2016/07/30/how-i-am-setsuna-uses-a-state-stack-overworld</id>
    <content type="html"><![CDATA[<p>The <code>Overworld</code> state ties together all of the states I previously discussed based on watching <a href="https://youtu.be/GUwmNnMXd4A">this playthrough</a> of <em>I am Setsuna</em>.</p>

<!--more-->


<h2>Overworld</h2>

<p>I think that the <code>Overworld</code> can serve as the base <code>Map</code> state I used in my previous examples.  This allows the <code>Overworld</code> to serve two purposes.  First, the <code>Overworld</code> state holds all of the map and area entrance data to allow characters to move about the overworld.  And second, the <code>Overworld</code> state can store information about the state of the game for use in the other states.</p>

<h2>Area information</h2>

<pre><code>| Overworld |
</code></pre>

<p>The <code>Overworld</code> contains all of the data necessary to render the overworld map, including the assets for rendering the map and the location and the target map data on triggers for entering towns, caves, and other <code>Maps</code>.</p>

<h2>Gameplay information</h2>

<pre><code>| Menu ←    |
| Overworld |
</code></pre>

<p>The <code>Overworld</code> also contains the sorts of information you see in the main menu, such as the character&rsquo;s state, inventory, money.  Serializing a snapshot of this information and the characters' position saves the game&rsquo;s state and can be used to reload the game later.</p>

<p>The states added to the stack on top of the <code>Overworld</code> state can access this data for consumption and updating.</p>

<pre><code>| Shop menu  |
| Map (Shop) |
| Map (Town) |
| Overworld  |
</code></pre>

<p>For instance, a shop in town may access the inventory and money to allow the player to purchase items.</p>

<pre><code>| Combat   |
| Overwold |
</code></pre>

<p>Similarly, the combat state may access the characters' stats, equipment and inventory to track health, damage output, and item use in battle.</p>

<h2>Summary</h2>

<p>I hope that <a href="http://zerosalife.github.io/blog/2016/07/02/how-i-am-setsuna-uses-a-state-stack-map-and-dialog/">the</a> <a href="//zerosalife.github.io/blog/2016/07/16/how-i-am-setsuna-uses-a-state-stack-combat/">last</a> <a href="http://zerosalife.github.io/blog/2016/07/23/how-i-am-setsuna-uses-a-state-stack-interiors/">few posts</a> have given you an overview of how the state stack could work for supporting an RPG like <em>I am Setsuna</em>.</p>
]]></content>
  </entry>
  
</feed>
