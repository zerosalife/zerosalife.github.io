<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/design/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2015-07-04T10:11:04-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Prototyping Rectangles in Unity 2D for Dummy]]></title>
    <link href="http://zerosalife.github.io/blog/2015/05/30/prototyping-rectangles-in-unity-2d-for-dummy/"/>
    <updated>2015-05-30T09:57:58-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/05/30/prototyping-rectangles-in-unity-2d-for-dummy</id>
    <content type="html"><![CDATA[<p>Who&rsquo;s &ldquo;Dummy&rdquo;? I&rsquo;m the dummy.  Prototyping with 2d boxes in Unity JavaScript has proven surprisingly hard.  I think the difficulty I&rsquo;m having is that I&rsquo;m not exactly sure what I&rsquo;m trying to do.  What follows is an example of <strong>one</strong> way (notice that I didn&rsquo;t say THE <strong>RIGHT</strong> WAY) to prototype with 2d rectangles in Unity.  I&rsquo;m still too much of a noob to have strong opinions on the right way to go about doing this.  Expect more posts on this topic as I develop my expertise.</p>

<p><a href="http://en.wikipedia.org/wiki/Discoverability">Discoverability</a> is something I prize in programming languages and environments, especially when I&rsquo;m learning them.  While Unity&rsquo;s documentation is thorough, the lack of congruence between the GUI environment and coding leads to poor discoverability.  There&rsquo;s not a one-to-one correspondence between the labels for <code>Components</code> in the GUI inspector and their names and attributes in code.</p>

<!--more-->


<p>Most of the time, Google is my method for discovering new functionality in Unity.  The problem with this method, and even the documentation, is that I&rsquo;m never quite sure if the solution I&rsquo;ve found is the best solution, the only way to do something, or the wrong way to do something.</p>

<p>I&rsquo;m trying to get simple rectangular boxes to work in Unity 2d for prototyping movement, hitboxes for attacks, etc.  The information I can find either deals with real-deal-Holyfield sprites or <code>GUIBoxes</code>.</p>

<p>It will be nice to work with <code>Sprites</code> eventually, but I just want to get a box that can walk around and jump, at this point.  <code>GUIBoxes</code> seem like the wrong type of boxes, if I want to prototype something that will eventually be a <code>Sprite</code>.</p>

<p>As near as I can tell, the <code>Sprite</code> is a (relatively) new way of making a flat 2D <code>Plane</code> in Unity.  I couldn&rsquo;t seem to find anything dealing with <code>Sprites</code> without creating them in the Unity GUI interface.</p>

<p>So, I started out following a Unity Answers question <a href="http://answers.unity3d.com/questions/139808/creating-a-plane-mesh-directly-from-code.html">here</a>.</p>

<h2>Getting the Mesh to gel</h2>

<p>First, I created a brand-spankin new Unity 2D project.  I had to create an empty <code>GameObject</code> to host my <code>PlaneTest.js</code> script <code>Component</code>.  I included a variable <code>size</code> to control the size of the box, so you can play around with that in the Editor interface.</p>

<p>Next, I had to create a <code>Mesh</code> that would be the actual geometry of the plane.  Now, the <code>Mesh</code> I&rsquo;m making differs from the stock Unity <code>Plane</code> <code>GameObject</code>.  <a href="http://www.third-helix.com/2012/02/making-2d-games-with-unity/">This blog post</a> shows that Unity&rsquo;s <code>Plane</code> defaults to a 10 x 10 quad mesh with a couple hundred triangles.  A quad is just a square made of two triangle faces, <a href="http://blog.nobel-joergensen.com/2010/12/25/procedural-generated-mesh-in-unity/">this blog post</a> goes into more detail.</p>

<p>Here we <a href="http://i.eho.st/pgtxqdii.gif">do it live</a> by defining a <code>name</code> <code>String</code>, an <code>array</code> of <code>Vector3</code> <code>vertices</code>, an <code>array</code> of <code>uv</code> texture coordinates, and an <code>array</code> of <code>triangles</code> faces.</p>

<p>``` js
var m: Mesh = new Mesh();
m.name = &ldquo;Scripted_Plane_New_Mesh&rdquo;;
m.vertices = [Vector3(-size, -size, 0.01),</p>

<pre><code>          Vector3(size, -size, 0.01),
          Vector3(size, size, 0.01),
          Vector3(-size, size, 0.01)];
</code></pre>

<p>m.uv = [Vector2(0, 0),</p>

<pre><code>    Vector2(0, 1),
    Vector2(1, 1),
    Vector2(1, 0)];
</code></pre>

<p>m.triangles = [0, 1, 2,</p>

<pre><code>           0, 2, 3];
</code></pre>

<p>```</p>

<h2>Who you calling normal?</h2>

<p>At one point I thought I had to <code>RecalculateNormals</code>, according to the Unity Answers example above.  But it doesn&rsquo;t seem to make a difference.  Here&rsquo;s a great example of the Unity discoverability problem.  Since it doesn&rsquo;t <em>seem</em> to make a difference, I don&rsquo;t know whether to trust the Unity Answers that received 5 upvotes or to go with parsimony.</p>

<p>A little more digging <a href="http://forum.unity3d.com/threads/210399-4-3-Sprites-and-Lighting">reveals</a> that normal maps are particularly important for lighting.  Since the <code>Sprite Shader</code> I intend to use doesn&rsquo;t use normal maps, we can leave it out.</p>

<h2>OBJECTION!!</h2>

<p>Time to create the <code>GameObject</code> that will hold a <code>MeshRenderer</code>, <code>MeshFilter</code>, and <code>MeshCollider</code>.  According to the <a href="http://docs.unity3d.com/Documentation/Components/class-MeshFilter.html">docs</a>, a <code>MeshFilter</code> takes a mesh, like the one we created above, and passes it to the <code>MeshRenderer</code> for rendering to the screen.  Not sure what it&rsquo;s <em>filtering</em> or why there&rsquo;s an intermediate <code>Component</code>, but there you go.</p>

<p>The <a href="http://docs.unity3d.com/Documentation/Components/class-MeshRenderer.html">docs</a> say the <code>MeshRenderer</code> then takes the geometry from the <code>MeshFilter</code> and renders it on the screen at the position defined by the <code>GameObject</code>&rsquo;s <code>Transform</code>.</p>

<p>``` js
var obj: GameObject = new GameObject(&ldquo;New_Plane_From_Script&rdquo;,</p>

<pre><code>                                 MeshRenderer,
                                 MeshFilter,
                                 MeshCollider);
</code></pre>

<p>obj.GetComponent(MeshFilter).mesh = m;
```</p>

<h2>Time for texture</h2>

<p>Next we create a <code>Texture2D</code> to hold the color information, to really give the box some panache.  The <code>Texture2D</code> goes into the <code>MeshRenderer</code>&rsquo;s <code>mainTexture</code> slot.</p>

<p><code>js
var texture: Texture2D;
texture = new Texture2D(size, size, TextureFormat.ARGB4444, false);
obj.renderer.material.mainTexture = texture;
</code></p>

<p>I don&rsquo;t know too much about how <code>Texture2D</code> works right now, but there&rsquo;s plenty to read in the <a href="http://docs.unity3d.com/Documentation/ScriptReference/Texture2D.html">docs</a>.</p>

<h2>A splash of color</h2>

<p>Here we generate some random RGB values, normalize them for Unity&rsquo;s <code>0.0-1.0</code> colorspace and make a <code>Color</code> to put into the <code>MeshRenderer</code>&rsquo;s color slot.</p>

<p><code>js
var red: float = Random.Range(63, 255) / 255f;
var green: float = Random.Range(63, 255) / 255f;
var blue: float = Random.Range(63, 255) / 255f;
var color = Color(red, green, blue);
obj.renderer.material.color = color;
</code></p>

<h2>The crucial shader</h2>

<p>At this point, I tested my code and got no errors. However, to my surprise I didn&rsquo;t see anything rendered on the screen.</p>

<p>I learned that I needed to use a <code>Sprite Shader</code> to get the colored mesh to render properly.  Here&rsquo;s how I did it:</p>

<p><code>js
var spriteShader: Shader = Shader.Find("Sprites/Default");
obj.renderer.material.shader = spriteShader;
</code></p>

<h2>Boxes for dummy</h2>

<p>I don&rsquo;t feel so dumb anymore because this was a complex process.  And it wasn&rsquo;t until the very last crucial step that I saw anything remotely box-like.</p>

<p>I&rsquo;ve posted the code to a gist <a href="https://gist.github.com/zerosalife/743cf797112d62978bec">here</a> so you can clone the script for yourself, to give it a whirl.  I found that setting <code>size</code> to 2 is a nice place to start.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Skytorn Raycast Lighting Algorithm Details]]></title>
    <link href="http://zerosalife.github.io/blog/2015/05/16/more-skytorn-raycast-lighting-algorithm-details/"/>
    <updated>2015-05-16T11:10:29-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/05/16/more-skytorn-raycast-lighting-algorithm-details</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/blog/2015/05/09/raycast-lighting-in-skytorn/">Last week</a> I covered the lighting algorithm <a href="https://twitter.com/NoelFB">@NoelFB</a> is implementing for <a href="http://skytorngame.com/">Skytorn</a>.  Noel was nice enough to correct my mistaken assumptions about the inner workings of the lighting algorithm.</p>

<p>Looks like I kind of inverted the polarity of the raycasting with regard to the player and the level geometry.</p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<!--more-->


<h2>The algorithm</h2>

<p>The algorithm doesn&rsquo;t raycast in the full 360Â° circle around player&#x2013;that would be too costly.  Instead, it takes advantage of the fact that the level&rsquo;s ground collision geometry is stored in a grid.</p>

<ol>
<li><p>Given the player&rsquo;s location, there is a small list of collision geometry in the 8 or so grid cells surrounding the player.</p></li>
<li><p>The lighting algorithm raycasts from the corners of the level geometry to the player, instead of from the player out to the geometry.</p></li>
<li><p>Then, to prevent the lighting from looking too triangular, the algorithm adds a few more raycasts out from the player to the geometry in between the other raycasts.</p></li>
</ol>


<h2>That&rsquo;s actually all there is to it</h2>

<p>The algorithm I originally envisioned was naive and costly.  But, it&rsquo;s nice to hear that I wasn&rsquo;t far off&#x2013;I simply inverted the solution.  It was also nice to learn about a benefit of storing level geometry in a grid that I previously failed to appreciate.</p>

<p>Heaping thanks to <a href="https://twitter.com/NoelFB/">@NoelFB</a> for helping explain the algorithm, instead of getting bent out of shape about my lame attempt to reverse engineer the inner workings of <a href="http://skytorn-game.com/">Skytorn</a> from a screenshot.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raycast Lighting in Skytorn]]></title>
    <link href="http://zerosalife.github.io/blog/2015/05/09/raycast-lighting-in-skytorn/"/>
    <updated>2015-05-09T09:21:03-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/05/09/raycast-lighting-in-skytorn</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/NoelFB/">@NoelFB</a> posted a <a href="https://twitter.com/NoelFB/status/543586120731074561/photo/1">screenshot</a> showing how dynamic lighting works in <a href="http://skytorn-game.com/">Skytorn</a>.</p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<!--more-->


<h2>The algorithm</h2>

<p>From what I can tell, the algorithm looks something like this:</p>

<ol>
<li><p>Raycast out for 360Â° around the light source, starting in a clockwise direction.  If the rays encounter a collidable object, add it to the list of pink lines defining the polygonal shape of the lit area.  If the ray exceeds the distance of the light gradient, clamp the triangle edge defining the pink line at that distance.</p></li>
<li><p>For each of the collidable objects encountered, extend a ray past their vertices until it hits another collidable to create the obscured lighting effect visible to down and to the right of the light source.</p></li>
<li><p>Finally construct a set of triangles by starting from the closest edge in the list defining the pink lines to form the polygon.</p></li>
</ol>


<h2>That&rsquo;s all</h2>

<p>That&rsquo;s it for this week.  Let me know if you have any insight into this or other lighting algorithms in the comments or on the tweets.</p>

<h2>Update</h2>

<p>After some feedback from @NoelFB, I&rsquo;ve updated the algorithm in the <a href="http://zerosalife.github.io/blog/2015/05/16/more-skytorn-raycast-lighting-algorithm-details/">following post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Math Team Hearts]]></title>
    <link href="http://zerosalife.github.io/blog/2015/03/14/math-team-hearts/"/>
    <updated>2015-03-14T14:14:29-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/03/14/math-team-hearts</id>
    <content type="html"><![CDATA[<p>Math Team Hearts is a speedy modification to Hearts that ironically involves less math than the vanilla game.</p>

<!--more-->


<p>From <a href="http://www.crcpress.com/product/isbn/9781482217162">Game Design Workshop</a> by <a href="https://twitter.com/kinojabber">Tracy Fullerton</a>:</p>

<blockquote><p>One good way to train yourself in the design of game mechanics is to challenge yourself with controlled design exercises in which you take an existing game system, set a new player experience goal, and make changes to the system to meet that goal.</p></blockquote>

<h2>The Goal</h2>

<p>We needed a game that played quickly, without a defined endpoint (e.g. when one player reaches 100 points in normal <em>Hearts</em>) because this game was played in free time waiting for school to start or waiting for the bus.  There was no time to spend tallying up scores, counting hearts and doing awkward math.</p>

<p>The rules also modify the risk-reward value of shooting the moon to make it more attractive.  We found the game to be more interesting when multiple parties were invested in shooting the moon with less drawback from accumulating hearts.</p>

<h2>The Rules</h2>

<p>The game plays like normal <em><a href="http://en.wikipedia.org/wiki/Hearts">Hearts</a></em>, except taking <strong>hearts</strong> no longer gives you points.</p>

<ul>
<li>Taking any number of <strong>hearts</strong> without <strong>shooting the moon</strong> gives you 0 points.</li>
<li>Taking no <strong>hearts</strong> in a round gives you 1 point.</li>
<li><strong>Shooting the moon</strong> gives you 2 points.</li>
<li>Taking the <strong>queen of spades</strong> without <strong>shooting the moon</strong> gives you -1 point.</li>
</ul>


<p>The <strong>player</strong> with the most points at the end of play wins.</p>

<p>For more variety, use <strong>dealer</strong>&rsquo;s choice drafting rules.  Each round, the <strong>dealer</strong> decides on how players will pass cards prior to play.
<strong>Players</strong> take turns dealing.</p>

<h2>Tweaks</h2>

<p>I&rsquo;m working from memory, so I&rsquo;m not sure I&rsquo;ve got the point values exactly right.  Perhaps there should be more of a penalty for taking the Queen without shooting the moon.  That would create a more exciting risk-reward trade-off.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VGBC Game Design Review: Gunstar Heroes]]></title>
    <link href="http://zerosalife.github.io/blog/2015/02/14/vgbc-game-design-review-gunstar-heroes/"/>
    <updated>2015-02-14T10:25:33-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/02/14/vgbc-game-design-review-gunstar-heroes</id>
    <content type="html"><![CDATA[<p>Inspired by <a href="http://twitter.com/danctheduck">Daniel Cook&rsquo;s</a> game design review format over at <a href="http://www.lostgarden.com/2005/09/game-design-review-advance-wars-dual.html">Lost Garden</a>.  I&rsquo;m going to take a similar approach to my write up covering
<em>Gunstar Heroes</em>, the first book we&rsquo;ve chosen for the VGBC.</p>

<h2>The Format</h2>

<ul>
<li><strong>A brief history</strong>: What is the historical context of the design of <em>Gunstar Heroes</em>?</li>
<li><strong>Game anthropology</strong>: What market niche does <em>Gunstar Heroes</em> fill?</li>
<li><strong>Layered game design</strong>: What major design lesson(s) does <em>Gunstar Heroes</em> teach us?</li>
<li><strong>What worked and what didn&rsquo;t?</strong>: What design decisions worked and what fell flat?</li>
</ul>


<!--more-->


<h2>Brief history</h2>

<p><em>Gunstar Heroes</em> was the first release by nascent studio Treasure.
But the developers at Treasure were old hats at run-and-gun game design.  Like a group of seasoned musicians coming together to form a supergroup, the studio was created by former Konami employees, to create great games.  Treasure was much smaller than Konami, lending the studio a dynamic, independent vibe that we would label AA or indie today.</p>

<p>Treasure&rsquo;s developers, designers, and artists cut their teeth making some of Konami&rsquo;s biggest hits.  While the list is long, ranging from classics like Castlevania and Metal Gear to relatively unknown games like Snatcher and Rocket Knight Adventures, for the purpose of this article I&rsquo;d like to compare arguably the greatest of its forebears: <em><a href="http://en.wikipedia.org/wiki/Contra_III:_The_Alien_Wars">Contra III: The Alien Wars</a></em>.</p>

<p>Games in the run-and-gun genre are straightforward, you run (and jump) and shoot at enemies (with guns).  <em>Contra III</em> was the pinnacle of the genre in 1993, when <em>Gunstar Heroes</em> was released, by way of the game&rsquo;s attractive graphics, challenging gameplay, excellent music, and varied level design.  <em>Gunstar Heroes</em> represented the developers at Treasure taking the lessons from <em>Contra III</em> and seeking to improve and expand on the previous success.</p>

<h2>Game anthropology</h2>

<p><em>Gunstar Heroes</em> entered a market during the heyday of the run-and-gun
action platformer genre.  The hardware of the 16-bit consoles allowed for better graphics and supported larger numbers of sprites, leading to more engaging and challenging gameplay.  But the hardware and arguably the developer mindsets had not yet evolved to support many other approaches to gameplay.</p>

<p>There are too many copy-cats and also-rans to list.  <em>Contra</em> was a hit and every publisher wanted their own version.  Treasure sought set
<em>Gunstar Heroes</em> off from the crowd by designing expressive sprites
and dynamic gameplay.</p>

<p>To my mind this approach worked, although I&rsquo;m not aware of the sales figures from the time.  The graphics of <em>Gunstar Heroes</em> have helped it occupy mindshare over the long run.  In fact, in my opinion,
<em>Gunstar Heroes</em> looks more like a predecessor to the popular <em>Metal
Slug</em> series than a sequel or offshoot from <em>Contra</em>.  For a game to have this longevity, there must be something the designers have done right.</p>

<h2>First Layer: Core Mechanics</h2>

<h3>Bosses</h3>

<p>An entire article could be devoted to the boss design in <em>Gunstar Heroes</em> by &ldquo;cool character creator&rdquo; HAN aka Tetsuhiko Kikuchi.  But the scope of this article is less concerned with the design of specific encounters and more focused on the overall experience.  A thorough exploration of the boss design would also require more skill in this game than your humble author possesses.</p>

<h2>Second Layer: Creating new variation</h2>

<h3>Controls</h3>

<ul>
<li><p>Right off the bat, players get a choice between two control styles Fixed Shot and Free Shot.  These differ in terms of freedom of movement while allowing for more precise targeting.</p></li>
<li><p>In addition to <em>Contra</em>&rsquo;s ducking and climbing mechanics, <em>Gunstar Heroes</em> adds slides, throws and jump attacks.</p></li>
<li><p>A lot of the additional moves grant invincibility frames.  Sometimes the only way to get through difficult sections of the game without taking damage is to slide or jump attack at the correct time, using the invincibility frames to avoid damage.</p></li>
<li><p>The throws also allow for a new interaction between player characters: throwing the other player.  It can be annoying but that is half of the fun of playing these cooperative games.  The players can also throw some of the bombs that are thrown by enemies.</p></li>
</ul>


<h3>Weapons</h3>

<p>Meaningful choices between the various weapon types allow players to experiment to find combinations that work best for each situation and style of play.  Players can adjust the difficulty of the game by restricting the available weapon combinations, and since weapons persist between levels players can attempt full game restriction-based challenge runs.  The fact that the designers alllowed for interactions between the different weapon types simply adds to the depth of available choices.</p>

<h3>Life is no longer a binary</h3>

<p>Players and bosses have numeric vitality indicators.  Vitality is tracked as an integer value rather than a binary alive/dead state. You start at a vitality of 100 and, notably, there is no maximum.  You can gain more than 100 vitality, adding even more a buffer between playing and the icy clutches of the grim reaper.</p>

<p>Boss vitality is indicated on the screen, communicating directly to the player when the boss will be defeated.  This removes some of the ambiguity of earlier titles, where often the indications that the boss was being damaged could be lost in the sea of explosions and screenshake that characterize the run-and-gun genre.</p>

<p>This approach gives you free range, as a designer, to throw more and more challenges at the player.</p>

<h2>Additional Layers</h2>

<h3>Destructible environment</h3>

<h3>Enemy interactions</h3>

<p>When thrown, enemies can hit other enemies.  Another notable type of enemy interaction is that bombs thrown by enemies can damage other enemies and the thrower.</p>

<p>The result of these additional layers of player choice and interactivity serve to situate the player characters, and thus the players, in the world.  <em>Gunstar Heroes</em> feels less like a series of obstacles to overcome and more like a madcap adventure in which you are desperately trying to survive.  Contrast this with the original <em><a href="http://en.wikipedia.org/wiki/Ninja_Gaiden">Ninja Gaiden</a></em>, in which player agency is reduced to memorizing and executing a series of well-timed button presses.</p>

<h3>The boardgame level</h3>

<p><em>Gunstar Heroes</em> combines the throwing mechanic with a giant die to create the most unique level in the game: The Dice Palace.  The player characters must move through a board populated with boss encounters, item rooms and spaces that can send the players back to the start of the board or require the players to fight a boss without weapons.</p>

<p>The addition of this level creates a dynamic experience that changes with each play through.  The result is a truly unique than the simple test of skill that most boss rushes represent, although there is a more typical boss rush present in one of the later levels.</p>

<h3>Anti-gravity mine carts</h3>

<p>While games like <em><a href="http://en.wikipedia.org/wiki/Battletoads">Battletoads</a></em> have previously done speedy vehicular mine-cart-style levels, <em>Gunstar Heroes</em> takes it to another level (forgive me).  The modified mine carts in <em>Gunstar Heroes</em> allow the players to flip gravity <em>a la</em> under-appreciated late-generation NES action platformer <em><a href="http://en.wikipedia.org/wiki/Metal_Storm_%28video_game%29">Metal Storm</a></em>.</p>

<h3>The genre switch</h3>

<p>Although this is not unique to <em>Gunstar Heroes</em> this may be one of the first times that developers have tried this.  In the last level, the gameplay changes from run-and-gun action to a side view bullet-hell shoot-em-up.  While interesting, to me, this is not where the bulk of the <em>Gunstar Heroes</em> experience lies.</p>

<h2>What worked?</h2>

<ul>
<li><p>Each player can decide on a unique approach, using the various weapon combinations and shot types.</p></li>
<li><p>Some of the combinations were overpowered but that was half of the fun.  Less skilled players could equip the over powered lighting/chaser combination, while experienced players could try to become proficient in the other combinations.</p></li>
<li><p>Anti-gravity is communicated through overlap with previous commands like jump attack.  When the minecart level starts, the player likely doesn&rsquo;t know about the anti-gravity mechanic, that is, until an enemy comes into jump attack range.</p></li>
<li><p>Switching between combined and individual weapon powerups allows the player to exercise choice, a fundamental goal of game design and play in general.</p></li>
</ul>


<h2>What didn&rsquo;t work?</h2>

<ul>
<li><p>The length.  This is hardly a damning complaint, but the game could be longer.  There are seven stages, a couple of which are totally innovative, but most of them have been done before.  Perhaps it was simply a problem of time and cartridge size constraints.</p></li>
<li><p>The poor, poor framerate couldn&rsquo;t always keep up with the destruction on the screen, but again, this is likely due to constraints of the technology during the early 90s.</p></li>
<li><p>The airship level sets up rules and breaks them. You need to keep climbing and climbing and climbing until, well, you don&rsquo;t need to any more.  You need to get on top of that airship and if you don&rsquo;t, it&rsquo;ll take off leaving you marooned with nary a Wilson to keep you company.</p></li>
</ul>


<h2>Conclusion</h2>

<p><em>Gunstar Heroes</em> illustrates the maxim (allegedly) espoused by Sid
Meier: &ldquo;A game is a series of interesting choices.&rdquo;  It takes ideas formed in the great <em>Contra III</em> and expands the number of interesting choices and interactions for the player, leading to an undeniable classic.</p>

<p>I hope you&rsquo;ve enjoyed this Design Review.  It requires a lot of effort to put these together, so I&rsquo;d like to take my hat off to Daniel Cook at Lost Garden, who inspired me to use this format.  I&rsquo;d also like to thank Rick Wolf for contributing to and helping to crystallize the ideas in this article.  I also could not have done this without the research cited in my Resources, so shoutout to <a href="http://wikipedia.org">Wikipedia</a> and <a href="http://www.hardcoregaming101.net">Hardcore Gaming 101</a>.</p>

<p>Expect more Design Reviews as our book club mulls over more games in the coming months.</p>

<h2>Resources</h2>

<p>I got my information from:</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Gunstar_Heroes">http://en.wikipedia.org/wiki/Gunstar_Heroes</a></li>
<li><a href="http://www.hardcoregaming101.net/gunstarheroes/gunstarheroes.htm">http://www.hardcoregaming101.net/gunstarheroes/gunstarheroes.htm</a></li>
</ul>


<p>Many thanks to the original authors of these articles.</p>
]]></content>
  </entry>
  
</feed>
