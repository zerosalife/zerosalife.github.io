<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/design/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2016-07-30T09:51:27-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I am Setsuna uses a State Stack: Overworld]]></title>
    <link href="http://zerosalife.github.io/blog/2016/07/30/how-i-am-setsuna-uses-a-state-stack-overworld/"/>
    <updated>2016-07-30T09:47:19-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/07/30/how-i-am-setsuna-uses-a-state-stack-overworld</id>
    <content type="html"><![CDATA[<p>The <code>Overworld</code> state ties together all of the states I previously discussed based on watching <a href="https://youtu.be/GUwmNnMXd4A">this playthrough</a> of <em>I am Setsuna</em>.</p>

<!--more-->


<h2>Overworld</h2>

<p>I think that the <code>Overworld</code> can serve as the base <code>Map</code> state I used in my previous examples.  This allows the <code>Overworld</code> to serve two purposes.  First, the <code>Overworld</code> state holds all of the map and area entrance data to allow characters to move about the overworld.  And second, the <code>Overworld</code> state can store information about the state of the game for use in the other states.</p>

<h2>Area information</h2>

<pre><code>| Overworld |
</code></pre>

<p>The <code>Overworld</code> contains all of the data necessary to render the overworld map, including the assets for rendering the map and the location and the target map data on triggers for entering towns, caves, and other <code>Maps</code>.</p>

<h2>Gameplay information</h2>

<pre><code>| Menu ←    |
| Overworld |
</code></pre>

<p>The <code>Overworld</code> also contains the sorts of information you see in the main menu, such as the character&rsquo;s state, inventory, money.  Serializing a snapshot of this information and the characters' position saves the game&rsquo;s state and can be used to reload the game later.</p>

<p>The states added to the stack on top of the <code>Overworld</code> state can access this data for consumption and updating.</p>

<pre><code>| Shop menu  |
| Map (Shop) |
| Map (Town) |
| Overworld  |
</code></pre>

<p>For instance, a shop in town may access the inventory and money to allow the player to purchase items.</p>

<pre><code>| Combat   |
| Overwold |
</code></pre>

<p>Similarly, the combat state may access the characters' stats, equipment and inventory to track health, damage output, and item use in battle.</p>

<h2>Summary</h2>

<p>I hope that <a href="http://zerosalife.github.io/blog/2016/07/02/how-i-am-setsuna-uses-a-state-stack-map-and-dialog/">the</a> <a href="//zerosalife.github.io/blog/2016/07/16/how-i-am-setsuna-uses-a-state-stack-combat/">last</a> <a href="http://zerosalife.github.io/blog/2016/07/23/how-i-am-setsuna-uses-a-state-stack-interiors/">few posts</a> have given you an overview of how the state stack could work for supporting an RPG like <em>I am Setsuna</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I am Setsuna uses a State Stack: Interiors]]></title>
    <link href="http://zerosalife.github.io/blog/2016/07/23/how-i-am-setsuna-uses-a-state-stack-interiors/"/>
    <updated>2016-07-23T10:01:13-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/07/23/how-i-am-setsuna-uses-a-state-stack-interiors</id>
    <content type="html"><![CDATA[<p>About <a href="https://youtu.be/GUwmNnMXd4A?t%3D5m36s">a quarter of the way through this playthrough</a> of <em>I am Setsuna</em> at E3, the player enters a house.</p>

<!--more-->


<h2>Interiors</h2>

<p>The player enters a house, which triggers a special case of the Map state, the Interior state to be pushed onto the stack.</p>

<pre><code>| Interior ←push |
| Map            |
</code></pre>

<p>It&rsquo;s hard to tell how the interior state differs from the town map and the forest map from the beginning of the video.  In fact, I think that you could cover similar features with a simple <code>Map</code> state that knows where triggers (for, for example, Dialog or Treasure) and exits are placed.</p>

<p>So, it&rsquo;s likely that the <em>I am Setsuna</em> developers are using a generalized <code>Map</code> state to cover these cases.</p>

<p>This leads us to the final state I want to explore, a state to capture the Overworld.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I am Setsuna uses a State Stack: Combat]]></title>
    <link href="http://zerosalife.github.io/blog/2016/07/16/how-i-am-setsuna-uses-a-state-stack-combat/"/>
    <updated>2016-07-16T10:14:59-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/07/16/how-i-am-setsuna-uses-a-state-stack-combat</id>
    <content type="html"><![CDATA[<p>The previous post looked at how <em>I am Setsuna</em> uses a state stack to allow players to move around on a map and interact with NPCs via dialog.  This time around, I&rsquo;ll show you how combat can be handled by adding another state to the stack.</p>

<!--more-->


<p>This approach decreases the need to pass information between the various parts of your code handling the various states of your game.  So it&rsquo;s preferable compared to costly serialization and deserialization to pass information to wholly separate code every time the game state changes.  Instead you simply change the way that the game&rsquo;s code runs.</p>

<h2>Combat</h2>

<p>After the player converses with an NPC, combat with a gnarly looking bear begins.  Here&rsquo;s what likely happens.</p>

<pre><code>| Combat ←push |
| Map          |
</code></pre>

<p>The player fights the enemy.  Then the combat state pops off the stack, returning the player to the snowy forest map.</p>

<pre><code>| Combat →pop |

| Map |
</code></pre>

<p>Note that the combat state may have substates that handle in-combat messages, player turns, and experience and item rewards at the end of combat.  Designing these substates depends on the specific requirements of your combat system.  That makes it hard to tell what the developers are using from <a href="https://www.youtube.com/watch?v%3DGUwmNnMXd4A">this brief clip of <em>I am Setsuna</em></a>.</p>

<p>That&rsquo;s all there is to it.  The modularity of this state stack approach allows developers to customize the flow of gameplay as desired.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I am Setsuna uses a State Stack: Map and Dialog]]></title>
    <link href="http://zerosalife.github.io/blog/2016/07/02/how-i-am-setsuna-uses-a-state-stack-map-and-dialog/"/>
    <updated>2016-07-02T09:48:42-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/07/02/how-i-am-setsuna-uses-a-state-stack-map-and-dialog</id>
    <content type="html"><![CDATA[<p>I recently watched <a href="https://www.youtube.com/watch?v%3DGUwmNnMXd4A">some footage of <em>I Am Setsuna</em> from E3</a>.</p>

<p>Here&rsquo;s my analysis of the evolving <a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)">state stack</a>, as you play this spritual successor to the classic RPG <a href="https://en.wikipedia.org/wiki/Chrono_Trigger"><em>Chrono Trigger</em></a>.</p>

<!--more-->


<h2>Map and Dialog</h2>

<p>There&rsquo;s likely a catch-all map state in which characters can run around, interacting with the world by opening chests, entering doors and new areas, and talking to NPCs.</p>

<p>The gameplay starts in a snowy forest.  So, there&rsquo;s a <code>Map</code> state pushed onto the state stack that has a reference to the map for this snowy forest.</p>

<pre><code>| Map |
</code></pre>

<p>As the player wanders around the forest, the player encounters talking NPCs.  These NPCs likely have triggers that push a <code>Dialog</code> state with a reference to the NPC&rsquo;s dialog onto the stack.</p>

<pre><code>| Dialog ←PUSH |
| Map          |
</code></pre>

<p>As the player advances and completes the dialog, the player is returned to the previous state, the snowy forest <code>Map</code>.</p>

<pre><code>| Dialog →POP |

| Map |
</code></pre>

<p>The gameplay is controlled by the current state at the top of the state stack.  This provides a more convenient way to track the appropriate controls and UI elements than to sprinkle a bunch of complicated conditionals throughout some monolithic game code.</p>

<p>Next time I&rsquo;ll talk about combat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[/r/proceduralgeneration's spaceship challenge]]></title>
    <link href="http://zerosalife.github.io/blog/2016/06/25/slash-r-slash-proceduralgenerations-spaceship-challenge/"/>
    <updated>2016-06-25T09:53:41-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/06/25/slash-r-slash-proceduralgenerations-spaceship-challenge</id>
    <content type="html"><![CDATA[<p>The June contest on <a href="https://www.reddit.com/r/proceduralgeneration/">/r/proceduralgeneration</a> is to create a <a href="https://www.reddit.com/r/proceduralgeneration/comments/4mn9gj/monthly_challenge_7_june_2016_procedural/">ProceduralSpaceship/Fleet generator</a>.</p>

<p>Here&rsquo;s a look at some of the entries, so far.</p>

<!--more-->


<h2>a1studmuffin</h2>

<p><a href="https://github.com/a1studmuffin/SpaceshipGenerator">a1studmuffin&rsquo;s</a> entry is a Python script that interfaces with Blender to create 3d spaceships.  I&rsquo;m digging the choices with textures.  I also appreciate that a1studmuffin has commented to describe the phenotype of some of the parameters.  I feel like this code would be good for a future deep dive explaining it.</p>

<h2>Ladus</h2>

<p><a href="http://i.imgur.com/rgs0b5y.png">Ladus'</a> entry is only shown in a screenshot and a WIP video available on the reddit thread.  The 3d ships rendered in Unreal engine look good.  More of a stylized look in contrast to a1studmuffin&rsquo;s gritty ships.</p>

<h2>NoDownvotesPlease</h2>

<p><a href="http://i.imgur.com/MrjkVU3.gif">NoDownvotesPlease&rsquo;s</a> entry gets bonus points for creating a galaxy for 2d spaceships to explore.</p>

<h2>Hans_Meiser_Koeln</h2>

<p><a href="http://i.imgur.com/XcCBnoh.png">Hans_Meiser_Koeln&rsquo;s</a> entry has some good looking 2d ships.</p>

<h2>green_meklar</h2>

<p><a href="http://imgur.com/a/OZqSv">green_meklar&rsquo;s</a> entry has some nicely <a href="https://en.wikipedia.org/wiki/Greeble">greebled</a> 2d ships made in JavaScript/HTML5.  I&rsquo;d be interested in seeing the code.</p>

<h2>Conclusion</h2>

<p>I&rsquo;m excited to revisit a1studmuffin&rsquo;s code after the contest ends.</p>
]]></content>
  </entry>
  
</feed>
