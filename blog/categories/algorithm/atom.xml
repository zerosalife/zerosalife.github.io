<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithm | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2016-06-25T09:56:52-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mocking GameObjects in Unity Unit Tests]]></title>
    <link href="http://zerosalife.github.io/blog/2016/01/09/mocking-gameobjects-in-unity-unit-tests/"/>
    <updated>2016-01-09T10:52:49-06:00</updated>
    <id>http://zerosalife.github.io/blog/2016/01/09/mocking-gameobjects-in-unity-unit-tests</id>
    <content type="html"><![CDATA[<p>A while back, I wrote a post about <a href="https://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/">unit testing in Unity</a>.  In this post, I&rsquo;ll go through a useful pattern to <a href="https://en.wikipedia.org/wiki/Mock_object">mock</a> <code>GameObject</code>s in unit tests.</p>

<!--more-->


<h2>Make a GameObject</h2>

<p>We can create a <code>GameObject</code> inside a test just like we would normally inside a Unity script.</p>

<p><code>csharp
GameObject testGo = new GameObject("test");
</code></p>

<p>Passing a string to <a href="https://docs.unity3d.com/ScriptReference/GameObject-ctor.html">the <code>GameObject</code> constructor</a> gives the <code>GameObject</code> that name.</p>

<h2>We can even Instantiate prefabs</h2>

<p>Since our test is not inheriting <code>MonoBehaviour</code>, we&rsquo;ll have to call the Instantiate function directly, using the fully qualified namespace.</p>

<p>Remember that prefabs are just stored <code>GameObject</code>s, so we can use the <code>testGo</code> created above as our prefab.</p>

<p>```csharp
GameObject go = UnityEngine.Object.Instantiate(testGo,</p>

<pre><code>                                           Vector3.zero,
                                           Quaternion.identity) as GameObject;
</code></pre>

<p>```</p>

<h2>Clean up</h2>

<p>We can create <code>GameObjects</code>, but repeatedly running the test leaves our project cluttered up with old objects.  We want our tests to clean up all mocked objects after running.  We&rsquo;ll do that using by using the fully qualified <a href="https://docs.unity3d.com/ScriptReference/Object.DestroyImmediate.html"><code>DestroyImmediate</code> function</a>.</p>

<p>We need to call <code>DestroyImmediate</code> instead of <code>Destroy</code> because the unit tests are running in the editor and delayed destruction won&rsquo;t be invoked.</p>

<p><code>csharp
UnityEngine.Object.DestroyImmediate(go);
UnityEngine.Object.DestroyImmediate(testGo);
</code></p>

<h2>Mocking is easy</h2>

<p>Following this pattern will give you the ability to mock objects to your hearts' delight as you unit test your Unity code.  As, always let me know if you have questions, comments, or concerns below or on <a href="https://twitter.com/zerosalife">twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking GameObjects in Unity Unit Tests]]></title>
    <link href="http://zerosalife.github.io/blog/2015/10/31/mocking-gameobjects-in-unity-unit-tests/"/>
    <updated>2015-10-31T09:03:57-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/10/31/mocking-gameobjects-in-unity-unit-tests</id>
    <content type="html"><![CDATA[<p>A while back, I wrote a post about <a href="http://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/">unit testing in Unity</a>.  In this post, I&rsquo;ll go through a useful pattern to <a href="https://en.wikipedia.org/wiki/Mock_object">mock</a> <code>GameObject</code>s in unit tests.</p>

<!--more-->


<h2>Make a GameObject</h2>

<p>We can create a <code>GameObject</code> inside a test just like we would normally inside a Unity script.</p>

<p><code>csharp
GameObject testGo = new GameObject("test");
</code></p>

<p>Passing a string to <a href="http://docs.unity3d.com/ScriptReference/GameObject-ctor.html">the <code>GameObject</code> constructor</a> gives the <code>GameObject</code> that name.</p>

<h2>We can even Instantiate prefabs</h2>

<p>Since our test is not inheriting <code>MonoBehaviour</code>, we&rsquo;ll have to call the Instantiate function directly, using the fully qualified namespace.</p>

<p>Remember that prefabs are just stored <code>GameObject</code>s, so we can use the <code>testGo</code> created above as our prefab.</p>

<p>``` csharp
GameObject go = UnityEngine.Object.Instantiate(testGo,</p>

<pre><code>                                           Vector3.zero,
                                           Quaternion.identity) as GameObject;
</code></pre>

<p>```</p>

<h2>Clean up</h2>

<p>We can create <code>GameObject</code>s, but repeatedly running the test leaves our project cluttered up with old objects.  We want our tests to clean up all mocked objects after running.  We&rsquo;ll do that using by using the fully qualified <a href="http://docs.unity3d.com/ScriptReference/Object.DestroyImmediate.html"><code>DestroyImmediate</code> function</a>.</p>

<p>We need to call <code>DestroyImmediate</code> instead of <code>Destroy</code> because the unit tests are running in the editor and delayed destruction won&rsquo;t be invoked.</p>

<p><code>csharp
UnityEngine.Object.DestroyImmediate(go);
UnityEngine.Object.DestroyImmediate(testGo);
</code></p>

<h2>Mocking is easy</h2>

<p>Following this pattern will give you the ability to mock objects to your hearts' delight as you unit test your Unity code.  As, always let me know if you have questions, comments, or concerns below or on twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cheeky Tinted Blobs: a procedurally generated Unity 2D background]]></title>
    <link href="http://zerosalife.github.io/blog/2015/09/12/cheeky-tinted-blobs/"/>
    <updated>2015-09-12T09:47:50-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/09/12/cheeky-tinted-blobs</id>
    <content type="html"><![CDATA[<p>I&rsquo;m following along with <a href="https://twitter.com/pentadact">@pentadact</a>&rsquo;s tutorial video <a href="https://youtu.be/I5qxIhdEx28?t%3D1m33s">here</a> (You can see the finished result around 6 minutes into the video).</p>

<p><img class="center" src="/images/assets/tinted-blobs-screenshot.png" width="1434" height="1434"></p>

<!--more-->


<h2>The goal</h2>

<p>What we want to do here is to generate a splotchy blurred out nebular (-lous?)  background.  Without going into to too much detail, I&rsquo;m interested in something that would go well underneath a procedurally generated space station map.</p>

<h2>The algorithm</h2>

<p>The algorithm <a href="https://twitter.com/pentadact">@pentadact</a> describes works like this:</p>

<ol>
<li>Draw a faint white <strong>blob</strong></li>
<li>Tint the <strong>blob</strong> one of two randomly generated <strong>colors</strong></li>
<li>Randomly place the tinted <strong>blobs</strong></li>
</ol>


<h2>How it works</h2>

<p>The blobs are white, which is represented in RGB color as 100% in all three values (black is 0%).  This corresponds to 255 in 8-bit colorspace and <code>1.0</code> in Unity&rsquo;s colorspace.  Since the blobs are faint, the actual RGB values will approach, but not reach 100%.</p>

<p>When we apply a tint to the blobs' sprites we are essentially multiplying each of the RGB values by our desired color&rsquo;s value.  The resulting value will approach the full <em>intensity</em> of the color as our raw blob approaches 100% white, if that makes sense.  So the result is a faint blob of any desired color we want.</p>

<p>The colored blobs overlap each other, generating interesting patterns of lighter and darker mixtures of the two colors.</p>

<h2>Blobonia</h2>

<p>I fired up my favorite image editing program and made a 256 x 256 <code>png</code> blob sprite.  Using the airbrush tool, I plopped a blob in the middle of the canvas.</p>

<p>The settings I used were:</p>

<ul>
<li>128 pixel diameter

<ul>
<li>To avoid any artifacts around the edges of the canvas</li>
</ul>
</li>
<li>Very soft hardness

<ul>
<li>To avoid sharp edges</li>
</ul>
</li>
<li>20% opacity

<ul>
<li>To help with blending later on</li>
</ul>
</li>
</ul>


<h2>Setting the scene, blob prefab</h2>

<p>Back in Unity, create a fresh 2D project and imported the blob sprite.  We drag the sprite into the scene to create a <code>GameObject</code> with the blob sprite.</p>

<p>We then add a <code>Sorting Layer</code> named <code>Blobs</code> and set the sprite&rsquo;s sorting layer to <code>Blobs</code>.  While we&rsquo;re at it, we also create a sorting layer named <code>BG</code> behind the <code>Blobs</code> layer for the background.</p>

<p>We name the <code>GameObject</code> <code>Blob</code> and drag it to the <code>Prefabs</code> directory, creating a prefab from it.</p>

<p>Blob prefab in hand, we still needed a couple more pieces to prepare the scene.</p>

<h2>Backdrop</h2>

<p>We create a black <code>Background</code> UI object and set the <code>X scale</code> and <code>Y scale</code> to <code>1000</code>, to be sure Background covered the whole screen.  We then set the sorting layer of the sprite to <code>BG</code>.  Remember how we set that layer up earlier?  How prescient!</p>

<h2>One GameObject To Hold Them All</h2>

<p>We&rsquo;re planning to create a whole metric ton of blobs, so we create a <code>Blobs</code> <code>GameObject</code> to hold all of the blobs.  By setting the instantiated blob&rsquo;s <code>transform.parent</code> to the <code>Blobs.transform</code> all of the instantiated blobs fall under the parent <code>Blobs</code> <code>GameObject</code> and it keeps the Hierarchy in our Scene nice and tidy.</p>

<h2>BlobGen</h2>

<p>We have a background, a Blob prefab and even a <code>GameObject</code> that will hold all of the blobs we plan to create. Now we just need to make a <code>BlobGenerator</code> script to randomly place the blobs.</p>

<p>The <code>BlobGenerator</code> takes a reference to the Blob <code>Prefab</code>, a reference to the parent Blobs <code>GameObject</code>, an integer number of blobs to create, and maximum and minimum coordinates to control the spread of the created blobs.</p>

<p>The <code>BlobGenerator</code> generates two random colors using a function called <code>RandomColor</code>,</p>

<p>```csharp
Color RandomColor() {</p>

<pre><code>return new Color(Random.value, Random.value, Random.value);
</code></pre>

<p>}
```</p>

<p>Which it then zips up into an array called <code>colors</code>.  <code>Random.value</code> returns a random <code>float</code> between <code>0.0</code> and <code>1.0</code>, which we use to generate a new <code>Color</code>.</p>

<p>Then the <code>BlobGenerator</code> gets into the main routine, <code>PlaceBlobs</code>.</p>

<p>Briefly, <code>PlaceBlobs</code> instantiates clones of the blob prefab at random positions within the maximum and minimum boundaries we specify, makes the cloned blob a child of the parent Blobs <code>GameObject</code>, and sets the color tint of the cloned blob to one of the two colors generated above.</p>

<p>```csharp
void PlaceBlobs() {</p>

<pre><code>for (int i = 0; i &lt; numberOfBlobs; i++) {
    GameObject blockClone = Instantiate(blobPrefab,
                                        new Vector3(Random.Range(xMin, xMax),
                                                    Random.Range(yMin, yMax),
                                                    0f),
                                        Quaternion.identity) as GameObject;
    SpriteRenderer sprite = blockClone.GetComponent&lt;SpriteRenderer&gt;();
    blockClone.transform.parent = blobs.transform;
    sprite.color = colors[Random.Range(0, colors.Length)];
}
</code></pre>

<p>}
```
That&rsquo;s all there is to it.  You can check out the full example project on <a href="https://github.com/zerosalife/tint-background">github</a>.</p>

<h2>Moving forward</h2>

<p>It would be nice to have more fine-grained control over the local density of the blobs in certain regions, so the map would become a little less uniform, creating pockets of character in an otherwise featureless space.  But I think the effect here works nice as a background.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Syntax highlighting for Octopress]]></title>
    <link href="http://zerosalife.github.io/blog/2015/01/17/syntax-highlighting-for-octopress/"/>
    <updated>2015-01-17T11:12:37-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/01/17/syntax-highlighting-for-octopress</id>
    <content type="html"><![CDATA[<p>It&rsquo;s relatively simple, but I always forget how it&rsquo;s done.  In the
interest of documenting useful information for myself, here is how to
use <a href="http://octopress.org/docs/blogging/code/">syntax highlighting with code blocks in Octopress</a>.</p>

<!--more-->


<p>Here are some examples of languages I typically use:</p>

<p>``` csharp
private IEnumerator GUIMoveToPosition(Vector3 newPosition, float duration, RectTransform rect) {
  float elapsedTime = 0;
  Vector3 startingPos = rect.position;
  while(elapsedTime &lt; duration) {</p>

<pre><code>rect.position = Vector3.Lerp(startingPos,
                             newPosition,
                             elapsedTime / duration);
elapsedTime += Time.deltaTime;
yield return null;
</code></pre>

<p>  }
}</p>

<p>```</p>

<p>``` python
def update(self, time_elapsed):</p>

<pre><code>self.tick += 1
self.total_time += time_elapsed

if self.mode:
    self.mode.update(time_elapsed)
</code></pre>

<p>```</p>

<p>``` clojure
(defn valid-string? [s]
  &ldquo;Valid strings are non-empty strings that do not contain
  [ (commonly used to denote parts of the song and which rappers are
  rapping) and : (commonly used in the album info and transcriber
  info).&rdquo;
  (and (not (contains-char? s [))</p>

<pre><code>   (not (contains-char? s \:))
   (not (contains-char? s \"))
   (not (contains-char? s \())
   (seq s)))
</code></pre>

<p>;;; <a href="http://clojuredocs.org/clojure_core/clojure.core/empty_q">http://clojuredocs.org/clojure_core/clojure.core/empty_q</a>
;;; Please use the idiom (seq x) rather than (not (empty? x))
```</p>

<h2>Bonus: Help me refactor this code</h2>

<p>I think there&rsquo;s some way to refactor these two similar functions so
they don&rsquo;t share code, but I don&rsquo;t see it.  If you have a clever way
to offload the common functionality, let me know in the comments
(<a href="http://gist.github.com">gists</a> preferred).</p>

<p>``` csharp
// NOTE: there are some differences between the two functions
// because I&rsquo;m still adding funcitonality.  I think there should be
// a way to pull out some of the common functionality so I don&rsquo;t
// have two functions that share code.  Maybe by separating the
// boundary checks from the actual &ldquo;counting&rdquo; steps?</p>

<p>void Countdown () {
  int iTargetHp = iHp + 1;</p>

<p>  // If the rolling hp reaches the hit point above iHp then we can
  // stop the rolling because each RollEvent effectively moves past
  // the current iRolHp.
  if(iRolHp == iTargetHp) {</p>

<pre><code>// Start Coroutine to return reels to original positions
StartCoroutine(WaitAndResetReels(RollDir.Down));

CancelInvoke("Countdown");
</code></pre>

<p>  }
  if(iRolHp &lt;= 0) {</p>

<pre><code>StartCoroutine(WaitAndResetReels(RollDir.Down));

// TRUE DEATH!
CancelInvoke("Countdown");
</code></pre>

<p>  }
  // If the rolling HP is larger than the target HP and positive,
  // then roll down.
  if(iRolHp > iTargetHp || iRolHp > 0) {</p>

<pre><code>RollEvent(RollDir.Down);
</code></pre>

<p>  }</p>

<p>  iRolHp = iRolHp + (int)RollDir.Down;</p>

<p>}</p>

<p>void Countup() {
  int iTargetHp = iHp &ndash; 1;</p>

<p>  // If the rolling hp reaches the hit point below iHp then we can
  // stop rolling because each RollEvent effectively moves past the
  // current iRolHp.
  //
  // Also take care of some nasty edge cases resulting in two calls
  // to WaitAndResetReels.
  if(iRolHp == iTargetHp &amp; iRolHp &lt; iMaxHp &amp; iRolHp != iMaxHp) {</p>

<pre><code>StartCoroutine(WaitAndResetReels(RollDir.Up));

CancelInvoke("Countup");
</code></pre>

<p>  } else if(iRolHp >= iMaxHp) {</p>

<pre><code>iHp = iMaxHp;
StartCoroutine(WaitAndResetReels(RollDir.Up));

// Maxed out HP.
CancelInvoke("Countup");
</code></pre>

<p>  }</p>

<p>  // If the rolling HP is smaller than the target HP and less than
  // Max HP, then roll up.
  if(iRolHp &lt; iTargetHp || iRolHp &lt; iMaxHp) {</p>

<pre><code>RollEvent(RollDir.Up);
</code></pre>

<p>  }</p>

<p>  iRolHp = iRolHp + (int)RollDir.Up;</p>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Mind-reading Machine in Unity JavaScript]]></title>
    <link href="http://zerosalife.github.io/blog/2014/12/13/simple-mind-reading-machine-in-unity-javascript/"/>
    <updated>2014-12-13T14:38:20-06:00</updated>
    <id>http://zerosalife.github.io/blog/2014/12/13/simple-mind-reading-machine-in-unity-javascript</id>
    <content type="html"><![CDATA[<p>I ported a cool toy from <a href="http://alastaira.wordpress.com/2014/03/15/a-simple-mind-reading-machine/">Alastair Aitchison&rsquo;s blog</a> to Unity JavaScript.  The toy implements a simple &lsquo;mind-reading&rsquo; algorithm that attempts to guess whether the player will choose Left (by pressing the left arrow key) or Right (by pressing the right arrow key).</p>

<!--more-->


<h2>How does it work?</h2>

<p>Aitchison&rsquo;s blog post describes how it works:</p>

<blockquote><p>How does it work? Not by mind-reading, obviously, but by exploiting
the fact that humans do not behave as &ldquo;randomly&rdquo; as they think they
do. The computer maintains a very simple memory that records the
pattern of results of the last two rounds – whether the player won or
lost, whether they switched strategy, and then whether they then won
or last the following round. The computer then uses this to choose its
own best strategy based on the way the player behaved last time the
current pattern occurred. If the computer loses twice in a row using
the current strategy, it picks a random response in the next round.</p></blockquote>

<p>The original idea came from some AI work by <a href="http://en.wikipedia.org/wiki/Claude_Shannon">Claude Shannon</a> and D. W. Hagelbarger. <a href="http://cs.stanford.edu/people/eroberts/courses/soco/projects/1999-00/information-theory/ai.html">They describe the internal memory of the toy mind-reader</a> that we will model using a multidimensional array <code>v</code>:</p>

<blockquote><p>There are 8 possible situations and two things the player can do at each one:</p>

<ol>
<li><p>player wins, plays same, wins. Then same or differently.</p></li>
<li><p>player wins, plays same, loses. Then same or differently.</p></li>
<li><p>player wins, plays differently, wins. Then same or differently.</p></li>
<li><p>player wins, plays differently, loses.Then same or differently.</p></li>
<li><p>player loses, plays same, wins.Then same or differently.</p></li>
<li><p>player loses, plays same, loses.Then same or differently.</p></li>
<li><p>player loses, plays differently, wins.Then same or differently.</p></li>
<li><p>player loses, plays differently, loses.Then same or differently.</p></li>
</ol>
</blockquote>

<h2>Why port it?</h2>

<p>Why not just take a straightforward approach, running the code myself? First, I wanted to fully understand the algorithm the hard way, by coding it line for line myself. And second, I wanted to better familiarize myself with Unity JavaScript, including its differences from C#.</p>

<p>The port was relatively simple, except for two small hiccups.  First, as far as I know, Unity JavaScript doesn&rsquo;t allow for initializing a multidimensional array.  So I looped over the cells in the array, filling them that way.  I have a hunch that the cells are initialized to the <code>int</code> <code>0</code> by default, but I wanted to be explicit.  Please let me know in the comments or <a href="https://twitter.com/zerosalife">via twitter</a> if I&rsquo;m way off base.</p>

<pre><code>var v : int[2, 2, 2];
for(var cell in v) {
    cell = 0;
}
</code></pre>

<p>I also encountered some unfamiliar syntax: the sonorously named Elvis operator, <a href="http://en.wikipedia.org/wiki/Conditional_operator">?:</a>.  It&rsquo;s also called the <a href="http://en.wikipedia.org/wiki/Ternary_operation">ternary operator</a>, when it&rsquo;s used with 3 arguments, as I&rsquo;ve used it here.  In C-like languages it allows for succinctly stating these kinds of conditional expressions. The example below illustrates how it&rsquo;s used.</p>

<pre><code>// Is the current player's choice the same as the previous player's
// choice?
//
// if (playerChoice == lastChoice)
//     sameChoice = True;
// else
//     sameChoice = False;
//
// Using ternary operator:
v[lw2, lw1, 1] = (v[lw2, lw1, 0] == playerChoice ? 1 : 0);
</code></pre>

<h2>The code</h2>

<p>The ported code for the mind-reader is reproduced below.</p>

<pre><code>#pragma strict
import System.Collections.Generic;

// Used to record play history
var v: int[,,];
var lw1: int;
var lw2: int;
var losingStreak: int;

// The prediction of the player's next turn
var prediction: int;

// Keep track of scores
var cpuScore: int;
var playerScore: int;

var outText: String;

function Start () {
    // Initialize matrix to track state of play history

    v = new int[2, 2, 2];

    for(var cell in v) {
        cell = 0;
    }

    // No prior knowledge, so set inital prediction based on random chance.
    prediction = flip();

    // Set scores to 0
    cpuScore = 0;
    playerScore = 0;

    // Initialize previous play and play before last win-lost trackers
    lw1 = 0;
    lw2 = 0;

    // Output
    outText = "";
}

function TakeTurn(playerChoice: int) {
    // Display player and computer's choices
    var outTextString: String = "You pressed " + playerChoice + ", " + "I guessed " + prediction + "\n";

    // Computer guessed correctly
    if (playerChoice == prediction) {
        cpuScore++;
        losingStreak = 0;
        outTextString += " I WIN!\n";
    }
    else {
        playerScore++;
        losingStreak++;
        outTextString += " YOU WIN!\n";
    }

    outText = outTextString;

    // Is the current player's choice the same as the previous player's
    // choice?
    //
    // if (playerChoice == lastChoice)
    //     sameChoice = True;
    // else
    //     sameChoice = False;
    //
    // Using ternary operator:
    v[lw2, lw1, 1] = (v[lw2, lw1, 0] == playerChoice ? 1 : 0);
    v[lw2, lw1, 0] = playerChoice;
    lw2 = lw1;
    lw1 = playerChoice;

    // If lost more than twice in present state, choose random
    // strategy.  Otherwise keep the same strategy.
    prediction = v[lw2, lw1, 1] == 1 &amp;&amp; losingStreak &lt; 2 ? v[lw2, lw1, 0] : flip();
}

function flip() : int {
    // Simulate a coin flip to produce 50:50 chance of [0, 1]
    return Random.Range(0, 2);
}


function Update () {
    if (Input.GetKeyDown(KeyCode.LeftArrow)) {
        TakeTurn(0);
    }
    if (Input.GetKeyDown(KeyCode.RightArrow)) {
        TakeTurn(1);
    }
}

function OnGUI() {
    var style : GUIStyle = new GUIStyle();
    style.fontSize = 36;

    GUI.Label(new Rect(0, 0, Screen.width, 100), outText, style);
    GUI.Label(new Rect(0, 100, Screen.width, 200), "Player: " + playerScore + " CPU: " + cpuScore, style);
}
</code></pre>
]]></content>
  </entry>
  
</feed>
