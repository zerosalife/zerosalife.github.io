<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Unity2d | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/unity2d/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2015-10-31T09:16:03-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cheeky Tinted Blobs: a procedurally generated Unity 2D background]]></title>
    <link href="http://zerosalife.github.io/blog/2015/09/12/cheeky-tinted-blobs/"/>
    <updated>2015-09-12T09:47:50-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/09/12/cheeky-tinted-blobs</id>
    <content type="html"><![CDATA[<p>I&rsquo;m following along with <a href="https://twitter.com/pentadact">@pentadact</a>&rsquo;s tutorial video <a href="https://youtu.be/I5qxIhdEx28?t%3D1m33s">here</a> (You can see the finished result around 6 minutes into the video).</p>

<p><img class="center" src="/images/assets/tinted-blobs-screenshot.png" width="1434" height="1434"></p>

<!--more-->


<h2>The goal</h2>

<p>What we want to do here is to generate a splotchy blurred out nebular (-lous?)  background.  Without going into to too much detail, I&rsquo;m interested in something that would go well underneath a procedurally generated space station map.</p>

<h2>The algorithm</h2>

<p>The algorithm <a href="https://twitter.com/pentadact">@pentadact</a> describes works like this:</p>

<ol>
<li>Draw a faint white <strong>blob</strong></li>
<li>Tint the <strong>blob</strong> one of two randomly generated <strong>colors</strong></li>
<li>Randomly place the tinted <strong>blobs</strong></li>
</ol>


<h2>How it works</h2>

<p>The blobs are white, which is represented in RGB color as 100% in all three values (black is 0%).  This corresponds to 255 in 8-bit colorspace and <code>1.0</code> in Unity&rsquo;s colorspace.  Since the blobs are faint, the actual RGB values will approach, but not reach 100%.</p>

<p>When we apply a tint to the blobs' sprites we are essentially multiplying each of the RGB values by our desired color&rsquo;s value.  The resulting value will approach the full <em>intensity</em> of the color as our raw blob approaches 100% white, if that makes sense.  So the result is a faint blob of any desired color we want.</p>

<p>The colored blobs overlap each other, generating interesting patterns of lighter and darker mixtures of the two colors.</p>

<h2>Blobonia</h2>

<p>I fired up my favorite image editing program and made a 256 x 256 <code>png</code> blob sprite.  Using the airbrush tool, I plopped a blob in the middle of the canvas.</p>

<p>The settings I used were:</p>

<ul>
<li>128 pixel diameter

<ul>
<li>To avoid any artifacts around the edges of the canvas</li>
</ul>
</li>
<li>Very soft hardness

<ul>
<li>To avoid sharp edges</li>
</ul>
</li>
<li>20% opacity

<ul>
<li>To help with blending later on</li>
</ul>
</li>
</ul>


<h2>Setting the scene, blob prefab</h2>

<p>Back in Unity, create a fresh 2D project and imported the blob sprite.  We drag the sprite into the scene to create a <code>GameObject</code> with the blob sprite.</p>

<p>We then add a <code>Sorting Layer</code> named <code>Blobs</code> and set the sprite&rsquo;s sorting layer to <code>Blobs</code>.  While we&rsquo;re at it, we also create a sorting layer named <code>BG</code> behind the <code>Blobs</code> layer for the background.</p>

<p>We name the <code>GameObject</code> <code>Blob</code> and drag it to the <code>Prefabs</code> directory, creating a prefab from it.</p>

<p>Blob prefab in hand, we still needed a couple more pieces to prepare the scene.</p>

<h2>Backdrop</h2>

<p>We create a black <code>Background</code> UI object and set the <code>X scale</code> and <code>Y scale</code> to <code>1000</code>, to be sure Background covered the whole screen.  We then set the sorting layer of the sprite to <code>BG</code>.  Remember how we set that layer up earlier?  How prescient!</p>

<h2>One GameObject To Hold Them All</h2>

<p>We&rsquo;re planning to create a whole metric ton of blobs, so we create a <code>Blobs</code> <code>GameObject</code> to hold all of the blobs.  By setting the instantiated blob&rsquo;s <code>transform.parent</code> to the <code>Blobs.transform</code> all of the instantiated blobs fall under the parent <code>Blobs</code> <code>GameObject</code> and it keeps the Hierarchy in our Scene nice and tidy.</p>

<h2>BlobGen</h2>

<p>We have a background, a Blob prefab and even a <code>GameObject</code> that will hold all of the blobs we plan to create. Now we just need to make a <code>BlobGenerator</code> script to randomly place the blobs.</p>

<p>The <code>BlobGenerator</code> takes a reference to the Blob <code>Prefab</code>, a reference to the parent Blobs <code>GameObject</code>, an integer number of blobs to create, and maximum and minimum coordinates to control the spread of the created blobs.</p>

<p>The <code>BlobGenerator</code> generates two random colors using a function called <code>RandomColor</code>,</p>

<p>```csharp
Color RandomColor() {</p>

<pre><code>return new Color(Random.value, Random.value, Random.value);
</code></pre>

<p>}
```</p>

<p>Which it then zips up into an array called <code>colors</code>.  <code>Random.value</code> returns a random <code>float</code> between <code>0.0</code> and <code>1.0</code>, which we use to generate a new <code>Color</code>.</p>

<p>Then the <code>BlobGenerator</code> gets into the main routine, <code>PlaceBlobs</code>.</p>

<p>Briefly, <code>PlaceBlobs</code> instantiates clones of the blob prefab at random positions within the maximum and minimum boundaries we specify, makes the cloned blob a child of the parent Blobs <code>GameObject</code>, and sets the color tint of the cloned blob to one of the two colors generated above.</p>

<p>```csharp
void PlaceBlobs() {</p>

<pre><code>for (int i = 0; i &lt; numberOfBlobs; i++) {
    GameObject blockClone = Instantiate(blobPrefab,
                                        new Vector3(Random.Range(xMin, xMax),
                                                    Random.Range(yMin, yMax),
                                                    0f),
                                        Quaternion.identity) as GameObject;
    SpriteRenderer sprite = blockClone.GetComponent&lt;SpriteRenderer&gt;();
    blockClone.transform.parent = blobs.transform;
    sprite.color = colors[Random.Range(0, colors.Length)];
}
</code></pre>

<p>}
```
That&rsquo;s all there is to it.  You can check out the full example project on <a href="https://github.com/zerosalife/tint-background">github</a>.</p>

<h2>Moving forward</h2>

<p>It would be nice to have more fine-grained control over the local density of the blobs in certain regions, so the map would become a little less uniform, creating pockets of character in an otherwise featureless space.  But I think the effect here works nice as a background.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prototyping Rectangles in Unity 2D for Dummy]]></title>
    <link href="http://zerosalife.github.io/blog/2015/05/30/prototyping-rectangles-in-unity-2d-for-dummy/"/>
    <updated>2015-05-30T09:57:58-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/05/30/prototyping-rectangles-in-unity-2d-for-dummy</id>
    <content type="html"><![CDATA[<p>Who&rsquo;s &ldquo;Dummy&rdquo;? I&rsquo;m the dummy.  Prototyping with 2d boxes in Unity JavaScript has proven surprisingly hard.  I think the difficulty I&rsquo;m having is that I&rsquo;m not exactly sure what I&rsquo;m trying to do.  What follows is an example of <strong>one</strong> way (notice that I didn&rsquo;t say THE <strong>RIGHT</strong> WAY) to prototype with 2d rectangles in Unity.  I&rsquo;m still too much of a noob to have strong opinions on the right way to go about doing this.  Expect more posts on this topic as I develop my expertise.</p>

<p><a href="http://en.wikipedia.org/wiki/Discoverability">Discoverability</a> is something I prize in programming languages and environments, especially when I&rsquo;m learning them.  While Unity&rsquo;s documentation is thorough, the lack of congruence between the GUI environment and coding leads to poor discoverability.  There&rsquo;s not a one-to-one correspondence between the labels for <code>Components</code> in the GUI inspector and their names and attributes in code.</p>

<!--more-->


<p>Most of the time, Google is my method for discovering new functionality in Unity.  The problem with this method, and even the documentation, is that I&rsquo;m never quite sure if the solution I&rsquo;ve found is the best solution, the only way to do something, or the wrong way to do something.</p>

<p>I&rsquo;m trying to get simple rectangular boxes to work in Unity 2d for prototyping movement, hitboxes for attacks, etc.  The information I can find either deals with real-deal-Holyfield sprites or <code>GUIBoxes</code>.</p>

<p>It will be nice to work with <code>Sprites</code> eventually, but I just want to get a box that can walk around and jump, at this point.  <code>GUIBoxes</code> seem like the wrong type of boxes, if I want to prototype something that will eventually be a <code>Sprite</code>.</p>

<p>As near as I can tell, the <code>Sprite</code> is a (relatively) new way of making a flat 2D <code>Plane</code> in Unity.  I couldn&rsquo;t seem to find anything dealing with <code>Sprites</code> without creating them in the Unity GUI interface.</p>

<p>So, I started out following a Unity Answers question <a href="http://answers.unity3d.com/questions/139808/creating-a-plane-mesh-directly-from-code.html">here</a>.</p>

<h2>Getting the Mesh to gel</h2>

<p>First, I created a brand-spankin new Unity 2D project.  I had to create an empty <code>GameObject</code> to host my <code>PlaneTest.js</code> script <code>Component</code>.  I included a variable <code>size</code> to control the size of the box, so you can play around with that in the Editor interface.</p>

<p>Next, I had to create a <code>Mesh</code> that would be the actual geometry of the plane.  Now, the <code>Mesh</code> I&rsquo;m making differs from the stock Unity <code>Plane</code> <code>GameObject</code>.  <a href="http://www.third-helix.com/2012/02/making-2d-games-with-unity/">This blog post</a> shows that Unity&rsquo;s <code>Plane</code> defaults to a 10 x 10 quad mesh with a couple hundred triangles.  A quad is just a square made of two triangle faces, <a href="http://blog.nobel-joergensen.com/2010/12/25/procedural-generated-mesh-in-unity/">this blog post</a> goes into more detail.</p>

<p>Here we <a href="http://i.eho.st/pgtxqdii.gif">do it live</a> by defining a <code>name</code> <code>String</code>, an <code>array</code> of <code>Vector3</code> <code>vertices</code>, an <code>array</code> of <code>uv</code> texture coordinates, and an <code>array</code> of <code>triangles</code> faces.</p>

<p>``` js
var m: Mesh = new Mesh();
m.name = &ldquo;Scripted_Plane_New_Mesh&rdquo;;
m.vertices = [Vector3(-size, -size, 0.01),</p>

<pre><code>          Vector3(size, -size, 0.01),
          Vector3(size, size, 0.01),
          Vector3(-size, size, 0.01)];
</code></pre>

<p>m.uv = [Vector2(0, 0),</p>

<pre><code>    Vector2(0, 1),
    Vector2(1, 1),
    Vector2(1, 0)];
</code></pre>

<p>m.triangles = [0, 1, 2,</p>

<pre><code>           0, 2, 3];
</code></pre>

<p>```</p>

<h2>Who you calling normal?</h2>

<p>At one point I thought I had to <code>RecalculateNormals</code>, according to the Unity Answers example above.  But it doesn&rsquo;t seem to make a difference.  Here&rsquo;s a great example of the Unity discoverability problem.  Since it doesn&rsquo;t <em>seem</em> to make a difference, I don&rsquo;t know whether to trust the Unity Answers that received 5 upvotes or to go with parsimony.</p>

<p>A little more digging <a href="http://forum.unity3d.com/threads/210399-4-3-Sprites-and-Lighting">reveals</a> that normal maps are particularly important for lighting.  Since the <code>Sprite Shader</code> I intend to use doesn&rsquo;t use normal maps, we can leave it out.</p>

<h2>OBJECTION!!</h2>

<p>Time to create the <code>GameObject</code> that will hold a <code>MeshRenderer</code>, <code>MeshFilter</code>, and <code>MeshCollider</code>.  According to the <a href="http://docs.unity3d.com/Documentation/Components/class-MeshFilter.html">docs</a>, a <code>MeshFilter</code> takes a mesh, like the one we created above, and passes it to the <code>MeshRenderer</code> for rendering to the screen.  Not sure what it&rsquo;s <em>filtering</em> or why there&rsquo;s an intermediate <code>Component</code>, but there you go.</p>

<p>The <a href="http://docs.unity3d.com/Documentation/Components/class-MeshRenderer.html">docs</a> say the <code>MeshRenderer</code> then takes the geometry from the <code>MeshFilter</code> and renders it on the screen at the position defined by the <code>GameObject</code>&rsquo;s <code>Transform</code>.</p>

<p>``` js
var obj: GameObject = new GameObject(&ldquo;New_Plane_From_Script&rdquo;,</p>

<pre><code>                                 MeshRenderer,
                                 MeshFilter,
                                 MeshCollider);
</code></pre>

<p>obj.GetComponent(MeshFilter).mesh = m;
```</p>

<h2>Time for texture</h2>

<p>Next we create a <code>Texture2D</code> to hold the color information, to really give the box some panache.  The <code>Texture2D</code> goes into the <code>MeshRenderer</code>&rsquo;s <code>mainTexture</code> slot.</p>

<p><code>js
var texture: Texture2D;
texture = new Texture2D(size, size, TextureFormat.ARGB4444, false);
obj.renderer.material.mainTexture = texture;
</code></p>

<p>I don&rsquo;t know too much about how <code>Texture2D</code> works right now, but there&rsquo;s plenty to read in the <a href="http://docs.unity3d.com/Documentation/ScriptReference/Texture2D.html">docs</a>.</p>

<h2>A splash of color</h2>

<p>Here we generate some random RGB values, normalize them for Unity&rsquo;s <code>0.0-1.0</code> colorspace and make a <code>Color</code> to put into the <code>MeshRenderer</code>&rsquo;s color slot.</p>

<p><code>js
var red: float = Random.Range(63, 255) / 255f;
var green: float = Random.Range(63, 255) / 255f;
var blue: float = Random.Range(63, 255) / 255f;
var color = Color(red, green, blue);
obj.renderer.material.color = color;
</code></p>

<h2>The crucial shader</h2>

<p>At this point, I tested my code and got no errors. However, to my surprise I didn&rsquo;t see anything rendered on the screen.</p>

<p>I learned that I needed to use a <code>Sprite Shader</code> to get the colored mesh to render properly.  Here&rsquo;s how I did it:</p>

<p><code>js
var spriteShader: Shader = Shader.Find("Sprites/Default");
obj.renderer.material.shader = spriteShader;
</code></p>

<h2>Boxes for dummy</h2>

<p>I don&rsquo;t feel so dumb anymore because this was a complex process.  And it wasn&rsquo;t until the very last crucial step that I saw anything remotely box-like.</p>

<p>I&rsquo;ve posted the code to a gist <a href="https://gist.github.com/zerosalife/743cf797112d62978bec">here</a> so you can clone the script for yourself, to give it a whirl.  I found that setting <code>size</code> to 2 is a nice place to start.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Dictionary with multiple keys in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/01/31/create-a-dictionary-with-multiple-keys-in-unity-c-number/"/>
    <updated>2015-01-31T11:03:42-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/01/31/create-a-dictionary-with-multiple-keys-in-unity-c-number</id>
    <content type="html"><![CDATA[<p>I want to create a lookup table for comparing a player choice and an enemy choice.  Each pair of choices can lead to a variety of outcomes.  So, in order to map the relationship between choice pair and outcome, I&rsquo;ve decided to use a Dictionary with choice pairs as keys and outcomes as values.</p>

<p>To me, the obvious way to do this is by using <a href="http://en.wikipedia.org/wiki/Tuple">tuples</a> to encode the choice pairs.  I&rsquo;ve already enumerated the choices so it&rsquo;s simple enough to pair them off in tuples for use as keys for the Dictionary.  This approach worked, however, I ran into a couple of problems along the way.</p>

<!--more-->


<h2>Unity&rsquo;s C# doesn&rsquo;t have Tuples</h2>

<p>Unity&rsquo;s <a href="http://en.wikipedia.org/wiki/Mono_%2528software%2529">Mono framework</a> includes a C# compiler, runtime, and lots of libraries.  The version of Mono included with version <code>4.6.1f1</code> of Unity is <code>2.6.5 (tarball)</code>.  Mono recreates some of the features of .NET, but apparently not a <code>Tuple</code> type.  The <code>Tuple</code> type got added to .NET in version <code>4.0</code>.  Looks like Mono version <code>2.8</code> may support it, but I&rsquo;ll have to wait for the folks at Unity to update Mono.</p>

<p>I checked the version of Mono using the following code:</p>

<p>``` csharp Check Unity&rsquo;s version of Mono
using System;
using System.Reflection;</p>

<p>Type type = Type.GetType(&ldquo;Mono.Runtime&rdquo;);
if (type != null) {</p>

<pre><code>MethodInfo displayName = type.GetMethod("GetDisplayName",
                                        BindingFlags.NonPublic | BindingFlags.Static);
if (displayName != null)
  Debug.Log(displayName.Invoke(null, null));
</code></pre>

<p> }
```</p>

<p>Since Mono <code>2.8</code> was released 5 years ago, it seems like Unity is in no rush to update their Mono version.  So it looks like I&rsquo;ll have to roll my own tuple class.</p>

<h2>Implementing a Pairs class</h2>

<p>Since I&rsquo;m only concerned with pairs of choices, I decided to implement the simplest possible solution.  I followed the implementation of a <code>Pair</code> class from <a href="http://stackoverflow.com/questions/569903/multi-value-dictionary">this Stack Overflow question regarding encoding multiple values in Dictionaries</a>.  The trick is that the tuple implemented here can be used to encode keys as well.</p>

<p>The critically important part of the <code>Pair</code> class is that it inherits from <code>IEquatable</code> and implements methods for determining equality and hashing.  The fundamental thing a Dictionary needs is to test whether keys are equal in order to store or retrieve the correct values and it typically does so by hashing the key.</p>

<p>I won&rsquo;t bother reproducing the code for the <code>Pair</code> class here.  You can <a href="http://stackoverflow.com/a/569920">check it out for yourself</a>.</p>

<h2>How I wish I could use it</h2>

<p>Once I implemented the <code>Pair</code> class in its own file <code>Pair.cs</code>, I had to import it in the file where I wanted to create the Dictionary.  Also note that I&rsquo;m <a href="http://msdn.microsoft.com/en-us/library/bb531208.aspx">using literal syntax to construct the Dictionary when I define it</a>.  And yes, unlike most uses of curly braces in C#, that <code>;</code> is necessary to end the line after the literal.</p>

<p>``` csharp
using Pair;</p>

<p>// Not shown: lots of enums&hellip;</p>

<p>Dictionary&lt;Pair&lt;Choice, Choice>, Outcome> lookup = new Dictionary&lt;Pair&lt;Choice, Choice>, Outcome> {
  {Pair(Choice.ChoiceOne, Choice.ChoiceOne), Outcome.Win},
  {Pair(Choice.ChoiceOne, Choice.ChoiceTwo), Outcome.Lose},
};</p>

<p>Outcome outcome = lookup[Pair(ChoiceOne, ChoiceOne)];</p>

<p>// Compiler throws an error
```</p>

<p>But alas, I run into this error: <code>Using the generic type `Pair&lt;TFirst,TSecond&gt;' requires `2' type argument(s)</code>.  I can&rsquo;t seem to find any documentation detailing what I&rsquo;m doing wrong.  Maybe it&rsquo;s just a problem with Unity&rsquo;s version of Mono .NET runtime.</p>

<h2>The workaround: A Dictionary of Dictionaries</h2>

<p>I&rsquo;ve found a workaround.  It is, in my humble opinion, way less elegant, but it gets the job done.</p>

<p>``` csharp
// Not shown: lots of enums&hellip;</p>

<p>Dictionary&lt;Choice, Dictionary&lt;Choice, Outcome>> lookup = new Dictionary&lt;Choice, Outcome> {
  {Choice.ChoiceOne, new Dictionary&lt;Choice, Outcome> {</p>

<pre><code>  {Choice.ChoiceOne, Outcome.Win},
  {Choice.ChoiceTwo, Outcome.Lose}
}},
</code></pre>

<p>  {Choice.ChoiceTwo, new Dictionary&lt;Choice, Outcome> {</p>

<pre><code>  {Choice.ChoiceOne, Outcome.Lose},
  {Choice.ChoiceTwo, Outcome.Win}
}}};
</code></pre>

<p>Outcome outcome = lookup[Choice.ChoiceOne][Choice.ChoiceOne];</p>

<p>// Will return Outcome.Win
```</p>

<h2>Conclusion</h2>

<p>I find the tuple key code way more readable than the Dictionary of Dictionaries code.  You can imagine how the legibility of the Dictionary of Dictionaries approach decreases with additional keys but the tuple key code legibility remains the same no matter how many keys you add.  This is probably a moot point for using two keys, as I have in this example, but I hope you can appreciate why I think the tuple approach is more elegant.</p>

<p>If you have any insight into how to solve the <code>Using the generic type `Pair&lt;TFirst,TSecond&gt;' requires `2' type argument(s)</code> error I encountered using the <code>Pair</code> class, please let me know in the comments below or on <a href="http://twitter.com/zerosalife">twitter</a>.</p>
]]></content>
  </entry>
  
</feed>
