<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2015-01-17T11:21:04-06:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Syntax highlighting for Octopress]]></title>
    <link href="http://zerosalife.github.io/blog/2015/01/17/syntax-highlighting-for-octopress/"/>
    <updated>2015-01-17T11:12:37-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/01/17/syntax-highlighting-for-octopress</id>
    <content type="html"><![CDATA[<p>It&rsquo;s relatively simple, but I always forget how it&rsquo;s done.  In the
interest of documenting useful information for myself, here is how to
use <a href="http://octopress.org/docs/blogging/code/">syntax highlighting with code blocks in Octopress</a>.</p>

<!--more-->


<p>Here are some examples of languages I typically use:</p>

<p>``` csharp
private IEnumerator GUIMoveToPosition(Vector3 newPosition, float duration, RectTransform rect) {
  float elapsedTime = 0;
  Vector3 startingPos = rect.position;
  while(elapsedTime &lt; duration) {</p>

<pre><code>rect.position = Vector3.Lerp(startingPos,
                             newPosition,
                             elapsedTime / duration);
elapsedTime += Time.deltaTime;
yield return null;
</code></pre>

<p>  }
}</p>

<p>```</p>

<p>``` python
def update(self, time_elapsed):</p>

<pre><code>self.tick += 1
self.total_time += time_elapsed

if self.mode:
    self.mode.update(time_elapsed)
</code></pre>

<p>```</p>

<p>``` clojure
(defn valid-string? [s]
  &ldquo;Valid strings are non-empty strings that do not contain
  [ (commonly used to denote parts of the song and which rappers are
  rapping) and : (commonly used in the album info and transcriber
  info).&rdquo;
  (and (not (contains-char? s [))</p>

<pre><code>   (not (contains-char? s \:))
   (not (contains-char? s \"))
   (not (contains-char? s \())
   (seq s)))
</code></pre>

<p>;;; <a href="http://clojuredocs.org/clojure_core/clojure.core/empty_q">http://clojuredocs.org/clojure_core/clojure.core/empty_q</a>
;;; Please use the idiom (seq x) rather than (not (empty? x))
```</p>

<h2>Bonus: Help me refactor this code</h2>

<p>I think there&rsquo;s some way to refactor these two similar functions so
they don&rsquo;t share code, but I don&rsquo;t see it.  If you have a clever way
to offload the common functionality, let me know in the comments
(<a href="http://gist.github.com">gists</a> preferred).</p>

<p>``` csharp
// NOTE: there are some differences between the two functions
// because I&rsquo;m still adding funcitonality.  I think there should be
// a way to pull out some of the common functionality so I don&rsquo;t
// have two functions that share code.  Maybe by separating the
// boundary checks from the actual &ldquo;counting&rdquo; steps?</p>

<p>void Countdown () {
  int iTargetHp = iHp + 1;</p>

<p>  // If the rolling hp reaches the hit point above iHp then we can
  // stop the rolling because each RollEvent effectively moves past
  // the current iRolHp.
  if(iRolHp == iTargetHp) {</p>

<pre><code>// Start Coroutine to return reels to original positions
StartCoroutine(WaitAndResetReels(RollDir.Down));

CancelInvoke("Countdown");
</code></pre>

<p>  }
  if(iRolHp &lt;= 0) {</p>

<pre><code>StartCoroutine(WaitAndResetReels(RollDir.Down));

// TRUE DEATH!
CancelInvoke("Countdown");
</code></pre>

<p>  }
  // If the rolling HP is larger than the target HP and positive,
  // then roll down.
  if(iRolHp > iTargetHp || iRolHp > 0) {</p>

<pre><code>RollEvent(RollDir.Down);
</code></pre>

<p>  }</p>

<p>  iRolHp = iRolHp + (int)RollDir.Down;</p>

<p>}</p>

<p>void Countup() {
  int iTargetHp = iHp &ndash; 1;</p>

<p>  // If the rolling hp reaches the hit point below iHp then we can
  // stop rolling because each RollEvent effectively moves past the
  // current iRolHp.
  //
  // Also take care of some nasty edge cases resulting in two calls
  // to WaitAndResetReels.
  if(iRolHp == iTargetHp &amp; iRolHp &lt; iMaxHp &amp; iRolHp != iMaxHp) {</p>

<pre><code>StartCoroutine(WaitAndResetReels(RollDir.Up));

CancelInvoke("Countup");
</code></pre>

<p>  } else if(iRolHp >= iMaxHp) {</p>

<pre><code>iHp = iMaxHp;
StartCoroutine(WaitAndResetReels(RollDir.Up));

// Maxed out HP.
CancelInvoke("Countup");
</code></pre>

<p>  }</p>

<p>  // If the rolling HP is smaller than the target HP and less than
  // Max HP, then roll up.
  if(iRolHp &lt; iTargetHp || iRolHp &lt; iMaxHp) {</p>

<pre><code>RollEvent(RollDir.Up);
</code></pre>

<p>  }</p>

<p>  iRolHp = iRolHp + (int)RollDir.Up;</p>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Previewing a post using Octopress]]></title>
    <link href="http://zerosalife.github.io/blog/2015/01/10/previewing-a-post-using-octopress/"/>
    <updated>2015-01-10T10:01:44-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/01/10/previewing-a-post-using-octopress</id>
    <content type="html"><![CDATA[<p>It&rsquo;s nice to preview some of my more complicated posts before I ship them out to the Internets.  Here&rsquo;s how I do it.</p>

<h2>make preview</h2>

<p>I <a href="http://zerosalife.github.io/blog/2014/09/06/automating-blog-deployment-with-octopress/">previously posted</a> a <code>makefile</code> I use to automate deployment of my blog.  Here are the germane lines for previewing:</p>

<p>``` make
preview:</p>

<pre><code>bundle exec rake generate &amp;&amp; bundle exec rake preview
</code></pre>

<p>```</p>

<p>So typing <code>make preview</code> at the command prompt will run start up <a href="https://github.com/ruby/rake">rake</a>&rsquo;s webserver at <code>http://localhost:4000</code>.  Then all I have to do is launch a browser, connect to that port, and voila: a preview of the blog that regenerates to match the changes I make live, as I make them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Year, New Footer]]></title>
    <link href="http://zerosalife.github.io/blog/2015/01/03/new-year-new-footer/"/>
    <updated>2015-01-03T09:17:24-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/01/03/new-year-new-footer</id>
    <content type="html"><![CDATA[<p>It&rsquo;s 2015.  Time to update my footer.  I came across a link to a
website called, <a href="http://updateyourfooter.com/">updateyourfooter.com</a>.  It describes ways to
dynamically update footer info in a variety of languages.</p>

<p>I set out to intrepidly implement one of the JavaScript snippets from the website in the <code>source/_includes/custom/footer.html</code> file in my <a href="http://octopress.org/">Octopress</a> install.  But, to my surprise, there was a bit of code in the footer that already dynamically generated the date timestamp for the footer.</p>

<p>The code looks like this:</p>

<p>
<code>{{ site.time | date: "%Y" }}</code>
</p>

<p>Ready for this?  Octopress is a framework built on top of <a href="https://github.com/jekyll/jekyll">Jekyll</a>.  Jekyll uses <a href="http://docs.shopify.com/themes/liquid-documentation/basics">Shopify&rsquo;s Liquid Template Engine</a>.  All of that is a fancy way of saying that this code is compiled into useful stuff for my site.</p>

<p>All I had to do was preface that with the year my blog was established, and badabing, no-mess dynamic footer.  Now the relevant section of the footer looks like this:</p>

<p>
<code>Copyright &amp;copy; 2014 &amp;ndash; {{ site.time | date: "%Y" }}</code>
</p>

<p>You can see the results at the bottom of this page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharing Philosophy]]></title>
    <link href="http://zerosalife.github.io/blog/2014/12/27/sharing-philosophy/"/>
    <updated>2014-12-27T08:01:01-06:00</updated>
    <id>http://zerosalife.github.io/blog/2014/12/27/sharing-philosophy</id>
    <content type="html"><![CDATA[<p>From <a href="http://www.imperica.com/en/in-conversation-with/meta-ex-the-music-of-code">this interview</a> with <a href="https://twitter.com/samaaron">Sam Aaron</a>.  Aaron talks about sharing software to create music, but it applies just as well to games.</p>

<blockquote><p>We believe that most value in the world comes through sharing, and that music is no exception. One of the benefits of sharing is that it makes learning much easier. For example, we often hear amazing sounds on albums and wonder how they were made. However, musicians rarely share their production methods. We release all the software we write, which includes our synthesiser designs, interaction abstractions, and compositional structures, under an open source license, and we distribute it to everyone through GitHub. This makes it free and easy for anybody to copy and recreate any aspect of our work. For example, when one of our fans is interested in the sound of one of the synths we&rsquo;re using, they can go to GitHub and download the synth design as text. They can email it to their friends, read it, study it, copy it, modify it and run it to recreate the exact sound.</p></blockquote>

<p>&#x2013;Sam Aaron</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Text encoding: further improvements to using git for Unity projects]]></title>
    <link href="http://zerosalife.github.io/blog/2014/09/27/text-encoding-further-improvements-to-using-git-for-unity-projects/"/>
    <updated>2014-09-27T09:51:41-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/09/27/text-encoding-further-improvements-to-using-git-for-unity-projects</id>
    <content type="html"><![CDATA[<p>Brief note here.  Following a Summer of travel and visitors, posts should be returning to a more regular schedule soon.  It&rsquo;s great when I can post here regularly, but I&rsquo;m not going to get bent out of shape when I have other commitments.  So, if there are unannounced, prolonged absences, you can assume that it has something to do with spending my weekends traveling or socializing, which is undoubtedly a good thing.</p>

<p>I recently came across <a href="http://stackoverflow.com/questions/18225126/how-to-use-git-for-unity3d-source-control">this stackoverflow answer</a> introducing git for version control in Unity projects.  Note, the question specifically refers to Unity3D, but this will work for Unity2D as well.</p>

<p>I&rsquo;ve <a href="http://zerosalife.github.io/blog/2014/05/17/dot-gitignore-for-unity-projects/">already written</a> about setting up a <code>.gitignore</code> file.  Here are some steps you can take to optimize the way Unity stores information, so git can track it.</p>

<p>Git was built to work by <code>diffing</code> large files containing text, specifically code.  Git works just fine with binary files, but it defaults to a less efficient method to <code>diff</code> those files, which can result in bloated git repositories.  Nobody wants a bloated git repository.</p>

<p>Here I&rsquo;ll summarize two of the steps from the answer that I found helpful, using Unity v4.5+.  It&rsquo;s worth noting that these steps will increase the size of your project&mdash;although I&rsquo;m unsure whether they affect the size of any deployed binaries.</p>

<p>So if the size of the project on your development machine is a critical issue, you may want to think about keeping the default settings.  The project I tried the steps on went from 86.7 MB on disk (including its bloated git repository) to 86.9 MB, so it&rsquo;s probably not going to create an appreciable change in most projects.</p>

<h2>Switch to Visible Meta Files</h2>

<p>Switch to <code>Visible Meta Files</code> in the Edit → Project Settings → Editor → Version Control Mode Menu.</p>

<p>If the <code>Visible Meta Files</code> option is turned on, the <code>.meta</code> files associated with parts of your project will have textual information rather than binary.</p>

<h2>Switch to Force Text</h2>

<p>Switch to <code>Force Text</code> in the Edit → Project Settings → Editor → Version Control Menu.</p>

<p>If you choose <code>Force Text</code> this will cause Unity to use text to serialize assets that it would normally store as binary files.</p>

<h2>Save</h2>

<p>Save the Scene and project for these changes to take effect.</p>
]]></content>
  </entry>
  
</feed>
