<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2016-10-29T09:55:55-04:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Procjam 2016 Talks]]></title>
    <link href="http://zerosalife.github.io/blog/2016/10/29/procjam-2016-talks/"/>
    <updated>2016-10-29T09:51:02-04:00</updated>
    <id>http://zerosalife.github.io/blog/2016/10/29/procjam-2016-talks</id>
    <content type="html"><![CDATA[<p>Last weekend <a href="https://twitter.com/mtrc">@mtrc</a> put on a <a href="https://www.youtube.com/watch?v%3D3wcpLwvBTYo">series of talks</a> leading up to <a href="https://twitter.com/hashtag/procjam">#procjam</a> 2016 at Falmouth University in Cornwall.  You can <a href="https://itch.io/jam/procjam">read more about the jam at itch.io</a>.</p>

<p>Here are some links to interesting resources that stood out to me:</p>

<!--more-->


<h2>The Video Game Level Corpus</h2>

<p><a href="https://arxiv.org/abs/1606.07487">https://arxiv.org/abs/1606.07487</a></p>

<h2>PCG book</h2>

<p><a href="http://pcgbook.com/">http://pcgbook.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Grammar of Procedural Platformer Levels]]></title>
    <link href="http://zerosalife.github.io/blog/2016/08/13/a-grammar-of-procedural-platformer-levels/"/>
    <updated>2016-08-13T10:43:49-04:00</updated>
    <id>http://zerosalife.github.io/blog/2016/08/13/a-grammar-of-procedural-platformer-levels</id>
    <content type="html"><![CDATA[<p>Brief post this week linking to a couple of great articles about elements of platformer game design.  I think these articles make great resources for a procedural platformer level generator.  Brevity and procedural focus stem at least partially from the release of the captivating <em><a href="http://www.no-mans-sky.com/">No Man&rsquo;s Sky</a></em>.</p>

<h2>Platformer Level Design</h2>

<p><a href="https://twitter.com/gamedevprof">Ken Bowen</a>&rsquo;s 2012 article covering <a href="http://gamedevprofessor.com/sidescroller-level-design/">2D Sidescroller Level Design</a> has some great tips.  I especially like the section called Define your Building Blocks.  I think this will require some revisiting in a future post.</p>

<h2>Fundamental Physics for Platformers</h2>

<p><a href="https://github.com/error454">Zachary Burke</a>&rsquo;s article about <a href="http://error454.com/2013/10/23/platformer-physics-101-and-the-3-fundamental-equations-of-platformers/">Platformer Physics</a> is a nice resource that explains the fundamentals in great mathematical detail.  It also provides inverse solutions for deriving physics based on descriptive parameters for jump height and timing.</p>

<p>Taken together these articles suggest, to me, that we could achieve a fully descriptive grammar of platformer games to generate a variety of levels constructed from basic building blocks, with constraints ensuring fun and responsive gameplay physics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I am Setsuna uses a State Stack: Overworld]]></title>
    <link href="http://zerosalife.github.io/blog/2016/07/30/how-i-am-setsuna-uses-a-state-stack-overworld/"/>
    <updated>2016-07-30T10:47:19-04:00</updated>
    <id>http://zerosalife.github.io/blog/2016/07/30/how-i-am-setsuna-uses-a-state-stack-overworld</id>
    <content type="html"><![CDATA[<p>The <code>Overworld</code> state ties together all of the states I previously discussed based on watching <a href="https://youtu.be/GUwmNnMXd4A">this playthrough</a> of <em>I am Setsuna</em>.</p>

<!--more-->


<h2>Overworld</h2>

<p>I think that the <code>Overworld</code> can serve as the base <code>Map</code> state I used in my previous examples.  This allows the <code>Overworld</code> to serve two purposes.  First, the <code>Overworld</code> state holds all of the map and area entrance data to allow characters to move about the overworld.  And second, the <code>Overworld</code> state can store information about the state of the game for use in the other states.</p>

<h2>Area information</h2>

<pre><code>| Overworld |
</code></pre>

<p>The <code>Overworld</code> contains all of the data necessary to render the overworld map, including the assets for rendering the map and the location and the target map data on triggers for entering towns, caves, and other <code>Maps</code>.</p>

<h2>Gameplay information</h2>

<pre><code>| Menu ←    |
| Overworld |
</code></pre>

<p>The <code>Overworld</code> also contains the sorts of information you see in the main menu, such as the character&rsquo;s state, inventory, money.  Serializing a snapshot of this information and the characters' position saves the game&rsquo;s state and can be used to reload the game later.</p>

<p>The states added to the stack on top of the <code>Overworld</code> state can access this data for consumption and updating.</p>

<pre><code>| Shop menu  |
| Map (Shop) |
| Map (Town) |
| Overworld  |
</code></pre>

<p>For instance, a shop in town may access the inventory and money to allow the player to purchase items.</p>

<pre><code>| Combat   |
| Overwold |
</code></pre>

<p>Similarly, the combat state may access the characters' stats, equipment and inventory to track health, damage output, and item use in battle.</p>

<h2>Summary</h2>

<p>I hope that <a href="http://zerosalife.github.io/blog/2016/07/02/how-i-am-setsuna-uses-a-state-stack-map-and-dialog/">the</a> <a href="//zerosalife.github.io/blog/2016/07/16/how-i-am-setsuna-uses-a-state-stack-combat/">last</a> <a href="http://zerosalife.github.io/blog/2016/07/23/how-i-am-setsuna-uses-a-state-stack-interiors/">few posts</a> have given you an overview of how the state stack could work for supporting an RPG like <em>I am Setsuna</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I am Setsuna uses a State Stack: Interiors]]></title>
    <link href="http://zerosalife.github.io/blog/2016/07/23/how-i-am-setsuna-uses-a-state-stack-interiors/"/>
    <updated>2016-07-23T11:01:13-04:00</updated>
    <id>http://zerosalife.github.io/blog/2016/07/23/how-i-am-setsuna-uses-a-state-stack-interiors</id>
    <content type="html"><![CDATA[<p>About <a href="https://youtu.be/GUwmNnMXd4A?t%3D5m36s">a quarter of the way through this playthrough</a> of <em>I am Setsuna</em> at E3, the player enters a house.</p>

<!--more-->


<h2>Interiors</h2>

<p>The player enters a house, which triggers a special case of the Map state, the Interior state to be pushed onto the stack.</p>

<pre><code>| Interior ←push |
| Map            |
</code></pre>

<p>It&rsquo;s hard to tell how the interior state differs from the town map and the forest map from the beginning of the video.  In fact, I think that you could cover similar features with a simple <code>Map</code> state that knows where triggers (for, for example, Dialog or Treasure) and exits are placed.</p>

<p>So, it&rsquo;s likely that the <em>I am Setsuna</em> developers are using a generalized <code>Map</code> state to cover these cases.</p>

<p>This leads us to the final state I want to explore, a state to capture the Overworld.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I am Setsuna uses a State Stack: Combat]]></title>
    <link href="http://zerosalife.github.io/blog/2016/07/16/how-i-am-setsuna-uses-a-state-stack-combat/"/>
    <updated>2016-07-16T11:14:59-04:00</updated>
    <id>http://zerosalife.github.io/blog/2016/07/16/how-i-am-setsuna-uses-a-state-stack-combat</id>
    <content type="html"><![CDATA[<p>The previous post looked at how <em>I am Setsuna</em> uses a state stack to allow players to move around on a map and interact with NPCs via dialog.  This time around, I&rsquo;ll show you how combat can be handled by adding another state to the stack.</p>

<!--more-->


<p>This approach decreases the need to pass information between the various parts of your code handling the various states of your game.  So it&rsquo;s preferable compared to costly serialization and deserialization to pass information to wholly separate code every time the game state changes.  Instead you simply change the way that the game&rsquo;s code runs.</p>

<h2>Combat</h2>

<p>After the player converses with an NPC, combat with a gnarly looking bear begins.  Here&rsquo;s what likely happens.</p>

<pre><code>| Combat ←push |
| Map          |
</code></pre>

<p>The player fights the enemy.  Then the combat state pops off the stack, returning the player to the snowy forest map.</p>

<pre><code>| Combat →pop |

| Map |
</code></pre>

<p>Note that the combat state may have substates that handle in-combat messages, player turns, and experience and item rewards at the end of combat.  Designing these substates depends on the specific requirements of your combat system.  That makes it hard to tell what the developers are using from <a href="https://www.youtube.com/watch?v%3DGUwmNnMXd4A">this brief clip of <em>I am Setsuna</em></a>.</p>

<p>That&rsquo;s all there is to it.  The modularity of this state stack approach allows developers to customize the flow of gameplay as desired.</p>
]]></content>
  </entry>
  
</feed>
