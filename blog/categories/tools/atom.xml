<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2015-07-18T16:12:27-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Probabilistic entity spawning in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/07/11/probabilistic-entity-spawning-in-unity-c-sharp/"/>
    <updated>2015-07-11T17:03:55-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/07/11/probabilistic-entity-spawning-in-unity-c-sharp</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript/">Last week</a> I showed how to do probabilistic entity spawning in Unity JS.  This week I&rsquo;ll port that code over to C#.  You can find examples of both the C# and JavaScript versions of the code in a <a href="https://github.com/zerosalife/ProbEntitySpawnExample">repository on github</a>.  Since I&rsquo;ve already explained the Algorithm I will focus mainly on the differences in the code.</p>

<p>There isn&rsquo;t syntactic sugar for Dictionary assignment in C# :( This required moving the assignment for the <code>areas</code> Dictionary into the <code>Start</code> function.  It&rsquo;s a move that enforces best practices, strictly speaking, but risks confusion about the content of the <code>areas</code> Dictionary at runtime.  If you&rsquo;d like to read up on Dictionaries in C#, I found <a href="https://msdn.microsoft.com/en-us/library/fkbw11z0.aspx">this resource</a> helpful.</p>

<p>The <code>foreach</code> command requires a type. This is a case where a stricter language will save confusion in the long run.</p>

<p>Lists can be created from specific arrays of the List&rsquo;s type, but not from some arbitrary array, as in JavaScript.  Again, this is a feature of a stricter language that causes some extra work up-front, but will make things more clear in the long run.</p>

<p>For an in-depth tour of the algorithm for spawning entities, check out <a href="http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript/">last week&rsquo;s post</a> and the <a href="https://github.com/zerosalife/ProbEntitySpawnExample">example repository on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Probabilistic Entity Spawning in Unity JavaScript]]></title>
    <link href="http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript/"/>
    <updated>2015-07-04T09:56:33-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript</id>
    <content type="html"><![CDATA[<p>The Unity documentation has an example showing how to generate random indexes satisfying a distribution of probabilities (see: <a href="http://docs.unity3d.com/Manual/RandomNumbers.html">Choosing Items with Different Probabilities</a>).  In this post I&rsquo;ll show how to use a similar approach to generate random items with specific probabilities dictated by the environment.</p>

<!--more-->


<p>I want to be able to generate an item code, say <code>Red</code>, <code>Green</code>, or <code>Black</code>, given a list of floating point probabilities dictated by the current environmental area in my game, say for example <code>desert</code> or <code>grassland</code>.</p>

<p>Varying the probability of encountering items will give each area a unique flavor.  If the player needs a <code>Red</code> item, the player will need to seek out areas in which the probability for encountering <code>Red</code> items is high.  I hope this will drive player exploration and investigation.</p>

<p>I&rsquo;ll start by defining an array of possible item types.  (According to <a href="http://wiki.unity3d.com/index.php/Head_First_into_Unity_with_UnityScript#Use_enum">this introduction to Unity JavaScript</a>, I should prefer <code>enum</code>.)</p>

<p><code>javascript
var ents : String[] = ["Red", "Green", "Black", "Orange"];
</code></p>

<p>Since this is a small example, I&rsquo;ll forego the efficiency and security that <code>enum</code>s provide for the convenience of using a simple <code>String</code> array.  I&rsquo;ll note that this is a good spot to do some refactoring in a real project where a variety of systems may have to interact with the item types.</p>

<p>I then define a Dictionary <code>areas</code> of Lists of floating point probabilities.  These areas correspond to terrains that contain unique distributions of items. The <code>areas</code> Dictionary accepts <code>String</code>s specifying the desired terrain.</p>

<p>It&rsquo;s important to note that the order of the probabilities correspond to the order of the item types in <code>ent</code>s.</p>

<p><code>javascript
var areas = new Dictionary.&lt;String, List.&lt;float&gt; &gt;();
areas["desert"] = new List.&lt;float&gt;([0.1, 0.05, 0.425, 0.425]);
areas["grassland"] = new List.&lt;float&gt;([0.3, 0.35, 0.1, 0.25]);
</code></p>

<p>So, in the <code>grassland</code> area, there will be a 30% chance of choosing a <code>Red</code> item.</p>

<p>Now that I&rsquo;ve defined the data, I need a function to choose the appropriate index given a List of probabilities.  This function is lifted with minor modifications from the <a href="http://docs.unity3d.com/Documentation/Manual/RandomNumbers.html">Unity Documentation</a>.  Take a look at that documentation for a better visualization of the algorithm than I could do with words.  Really, do it!</p>

<p>``` javascript
function Choose(probs : List.<float>) : int {</p>

<pre><code>// Returns the index of a probabilistically determined random
// entity, given by the probability distributions in probs.
// e.g.:
// probs : List.&lt;float&gt;([0.5, 0.2, 0.1, 0.2]);
// entity = entities[Choose(probs)];
//
// See http://docs.unity3d.com/Documentation/Manual/RandomNumbers.html

// Watch out!  If you fail to specify total's type as float, it
// will add the probs using integer addition.  This will floor
// each of the probs to 0.
var total : float = 0;

for (x in probs) {
    total += x;
}

var randomPoint = Random.value * total;

for(var i = 0; i &lt; probs.Count; i++) {
    if (randomPoint &lt; probs[i])
        return i;
    else
        // Shift the strip down, adjusting the random point's
        // value to see whether it falls within the next prob.
        randomPoint -= probs[i];
}
// Take care of possibility that randomPoint is 1.0 or 100% by
// returning the last element of probs.  Avoids allowing Choose to
// return a 0 probability event (which would be possible using the
// &lt;= test).
return probs.Count - 1;
</code></pre>

<p>}
```</p>

<p>Now to choose an item:</p>

<p><code>javascript
var item = ents[Choose(areas["grassland"])];
Debug.Log(item);
</code></p>

<p>That&rsquo;s all there is to it. I&rsquo;ve put an <a href="https://github.com/zerosalife/ProbEntitySpawnExample">example Unity project with this code on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Dictionary of Lists in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/06/20/create-a-dictionary-of-lists-in-unity-c-sharp/"/>
    <updated>2015-06-20T11:16:28-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/06/20/create-a-dictionary-of-lists-in-unity-c-sharp</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/blog/2015/06/13/creating-a-dictionary-of-lists-in-unity-javascript/">Last week</a>, I published an article about creating a Dictionary of Lists in Unity using Unity&rsquo;s JavaScript.  Some of the syntax is changed in C#, but the overall algorithm is exactly the same.  I&rsquo;ve already mentioned the underlying motive, so I&rsquo;ll dive right in.</p>

<!--more-->


<p>Here&rsquo;s how to create a Dictionary of Lists in C# for Unity.</p>

<p>```csharp
Dictionary&lt;string, List<int>> table = new Dictionary&lt;string, List<int>>();</p>

<p>void Start() {</p>

<pre><code>// Fill our table with Lists containing ints using Arrays to intialize
// the Lists.
table["a"] = new List&lt;int&gt;(){1};
table["b"] = new List&lt;int&gt;(){2};
table["c"] = new List&lt;int&gt;(){3};

foreach(string str in table.Keys) {
    // Get the value for our Key.
    List&lt;int&gt; value = table[str];

    // If the Key is the desired Key, append to its list.
    if(str == "c") {
        value.Add(4);
    }

    // print the first item in each of the Lists.
    Debug.Log(value[0]);
}

// Print the appended item to see that it worked.
Debug.Log(table["c"][1]);
</code></pre>

<p>}
```</p>

<p>These are the main differences between the Unity JavaScript and C# code.  Take a look at the full file in a <a href="https://gist.github.com/zerosalife/e3882aa5ffd5dd614c9a">gist on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Dictionary of Lists in Unity JavaScript]]></title>
    <link href="http://zerosalife.github.io/blog/2015/06/13/creating-a-dictionary-of-lists-in-unity-javascript/"/>
    <updated>2015-06-13T11:14:25-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/06/13/creating-a-dictionary-of-lists-in-unity-javascript</id>
    <content type="html"><![CDATA[<p>I ran into a few problems trying to create a <a href="http://wiki.unity3d.com/index.php?title%3DWhich_Kind_Of_Array_Or_Collection_Should_I_Use%253F#Generic_Dictionary">Dictionary</a> of <a href="http://wiki.unity3d.com/index.php?title%3DWhich_Kind_Of_Array_Or_Collection_Should_I_Use%253F#Generic_List">Lists</a> in Unity JavaScript.  So I thought I&rsquo;d share some of the tips I learned here.</p>

<!--more-->


<p>I&rsquo;m interested in creating a Dictionary to hold <a href="http://en.wikipedia.org/wiki/Markov_chain#Markov_text_generators">Markov Chain information</a> in order to generate text.  So I&rsquo;d like to be able to create a Dictionary holding a variable length of items for each of its Keys.  I&rsquo;d also like to be able to update the mapping at runtime.</p>

<p>It would look something like this:</p>

<ul>
<li><strong>Key1:</strong> Item1, Item2, Item3</li>
<li><strong>Key2:</strong> Item4</li>
</ul>


<p>At runtime, I&rsquo;d like to be able to say: &ldquo;Append <code>Item5</code> to <code>Key2</code>.&rdquo;</p>

<p>Here&rsquo;s what I came up with in Unity JavaScript.  I started out by initializing a <code>table</code> in my script prior to the <code>Start</code> function. The var <code>table</code> holds our mapping of Keys of type <code>String</code> to Values of type <code>List.&lt;int&gt;</code>, or Lists of integers.</p>

<p><code>javascript
import System.Collections.Generic;
// White space matters.
var table:Dictionary.&lt;String,List.&lt;int&gt; &gt; = new Dictionary.&lt;String,List.&lt;int&gt; &gt;();
</code></p>

<p>The first hiccup I ran into is that <a href="http://forum.unity3d.com/threads/80227-Creating-a-Dictionary-of-Lists-in-Javascript?p%3D513471&amp;viewfull%3D1#post513471">white space matters</a> when creating Generics in Unity JavaScript.  The compiler will throw an error if it sees two <code>&gt;&gt;</code> in a row.</p>

<p>Then I fill the table with our test mappings.</p>

<p><code>javascript
// Fill our table with Lists containing ints using Arrays to intialize
// the Lists.
table["a"] = new List.&lt;int&gt;([1]);
table["b"] = new List.&lt;int&gt;([2]);
table["c"] = new List.&lt;int&gt;([3]);
</code></p>

<p>As you can see, you can <a href="http://answers.unity3d.com/questions/221476/javascript-array-to-generic-list.html">construct a List from an Array</a>.  Cool.</p>

<p>In the <code>Start</code> function, I iterate over the Keys in the Dictionary, Add the item <code>4</code> to the Value of Key <code>c</code>, and print out the first item of each of the <code>values</code>.  Finally, we check to see whether <code>4</code> was appended to the desired entry.</p>

<p>```javascript
function Start () {</p>

<pre><code>// Iterate over the Keys in our Dictionary.
for(var str:String in table.Keys) {
    // Get the value for our Key.
    var value:List.&lt;int&gt; = table[str];

    // If the Key is our desired Key, append to its list.
    if (str == "c") {
        value.Add(4);
    }

    // Print the first item in each of the Lists.
    print(value[0]);
}

// Print the appended item to see that it worked.
print(table["c"][1]);
</code></pre>

<p>}
```</p>

<p>Then I attach this script to the Main Camera of a fresh Scene for testing purposes.  Bada bing, bada boom.</p>

<p>Attaching the script to any old object in the scene would work.  I just chose the Main Camera because the camera object is there by default.</p>

<p>This was all relatively straightforward, after I understood some of the quirks of Unity&rsquo;s JavaScript syntax.  You can find an example script using this code <a href="https://gist.github.com/zerosalife/f13eb62bf7bd57799db6">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Twine games from the command line]]></title>
    <link href="http://zerosalife.github.io/blog/2015/03/28/building-twine-games-from-the-command-line/"/>
    <updated>2015-03-28T10:20:35-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/03/28/building-twine-games-from-the-command-line</id>
    <content type="html"><![CDATA[<p>I got it in my craw to write a short <a href="http://twinery.org/">Twine</a> game a while back.  I wanted to familiarize myself with the language.  And writing a short game in Twine seemed to be lower hanging fruit than trying to implement my own text adventure framework for Unity or some other game engine.</p>

<!--more-->


<h2>Why not Unity?</h2>

<p>That being said, there are other text adventure frameworks available in the Unity App Store and there&rsquo;s a very intriguing Twine parser for Unity called <a href="http://www.platoevolved.com/blog/unity-plugins/#!/~/product/category%3D2743024&amp;id%3D35627540">Yarn</a>.</p>

<p>Yarn seems well suited to writing Bioware- and Black Isle-style dialogues, where individual characters' dialogues are stored in separate Twine files with scripts to load them at runtime.  It doesn&rsquo;t seem like it does anything to solve the woes of writing a larger (than one dialog tree) game in the usual Twine GUI.</p>

<p>There&rsquo;s too much to be learned by implementing things available on the Unity App Store for me to pass that up in favor of saving time.  It&rsquo;s true that my time is the most valuable asset I have, but it&rsquo;s also very likely that I&rsquo;ll spend just as much time trying to figure out or modify a Unity plugin from the App Store as I would trying to implement something similar on my own.  That being said, in this case for what I wanted to do, Twine was the path of least resistance.</p>

<h2>Why the command line?</h2>

<p>I live in my text editor.  So, having to write in the Twine GUI tool&rsquo;s rudimentary text editor isn&rsquo;t really my bag.  I&rsquo;ve trained my muscle memory to use these short cuts without thinking.  In fact, I don&rsquo;t even bother to backspace to correct typos, I use the keyboard shortcut in my editor to automatically step through the suggested spelling corrections for the last word.  I&rsquo;m entrenched.</p>

<p>Also, dealing with the visual clutter of the Twine GUI drives me nuts.  If I want 30 links from a single Twine Passage, I don&rsquo;t want to have to do that manually, and I certainly don&rsquo;t want to try to organize it so it&rsquo;s visually appealing.  There&rsquo;re algorithms for that visualizing stuff, and algorithms are better at it (than I am).</p>

<h2>Getting started</h2>

<p>The first step is to <a href="https://github.com/tweecode/twee">install <code>twee</code></a> the command line tool used to compile Twine files.</p>

<p>Then <em>all</em> you have to do is write your story in the proper <a href="https://github.com/tweecode/TwineQuest/wiki/Twee-file-format">Twine file format</a>.  This is the hardest part, not because the syntax is complicated, but because you&rsquo;ve actually got to come up with an interesting and interactive story!</p>

<h2>Compiling your twine files</h2>

<p><code>Twee</code> will output files to HTML formatted in the usual Twine style.  It gets tedious to type commands over and over again, so I automate building the HTML with a Makefile.</p>

<p>```make Makefile
story.html : <em>.tw tweefiles/</em>.tw</p>

<pre><code>    ~/twee/twee -t sugarcane $^ &gt; $@
    open story.html
</code></pre>

<p>json: <em>.tw tweefiles/</em>.tw</p>

<pre><code>    ~/twee/twee -t json $^ &gt; story.json
</code></pre>

<p>clean:</p>

<pre><code>    rm -f story.html
</code></pre>

<p>.PHONY: json
```</p>

<p>Placing this Makefile in the root of your twine directory allows you to compile the HTML file by the commands <code>make clean; make</code>.  You can read more about the Makefile syntax in the <a href="http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">GNU make manual</a>.  The Makefile looks for Twine file format ending in <code>.tw</code>, either in the root directory or a directory for <code>tweefiles/</code>.</p>

<p>You can also compile to the JSON format by using <code>make json</code>.</p>

<h2>Getting some of the newer Twine features to work</h2>

<p>I <a href="https://github.com/tweecode/twee/issues/12">couldn&rsquo;t get some of the newer Twine features to work</a> when I compiled the twee code from the command line.  I think this stems from the twee command line tool failing to parse some of the newer features implemented in the Twine GUI.</p>

<p>In order to get some of the newer features to work, use the <code>Makefile</code> to compile the twee code, then import the resulting <code>.html</code> file in the Twine GUI.  Finally export HTML from the Twine GUI.</p>

<p>That being said, it was still nice to rapidly iterate through versions of a story without having to get bogged down in the Twine GUI.  I could write Twine code organized in files in a logical arrangement, then compile them into a single HTML file for testing and release.  Let me know if you have suggestions that would improve this Twine workflow or if you take a different approach.</p>
]]></content>
  </entry>
  
</feed>
