<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2016-04-23T10:18:41-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Original Diablo Pitch]]></title>
    <link href="http://zerosalife.github.io/blog/2016/04/02/the-original-diablo-pitch/"/>
    <updated>2016-04-02T09:48:33-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/04/02/the-original-diablo-pitch</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/davidbrevik/status/711420722225106945">David Brevik</a>, one of the original developers of Diablo has released the <a href="http://graybeardgames.blogspot.com/2016/03/original-diablo-pitch-document.html">original pitch document</a>.  Check it out!</p>

<!--more-->


<h2>Anatomy of Diablo&rsquo;s pitch document</h2>

<ul>
<li>Summary</li>
<li>Game Design

<ul>
<li>Overview</li>
<li>Plot and Setting</li>
<li>Gameplay</li>
</ul>
</li>
<li>Marketing</li>
<li>Development</li>
</ul>


<p>In addition to illuminating how to write these documents in general, I find interesting to see how the Diablo devs were planning on leveraging the success of <em>Magic: The Gathering</em>&rsquo;s business model to sell DLC.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Dungeonmans teaches diagonal movement]]></title>
    <link href="http://zerosalife.github.io/blog/2016/03/19/how-dungeonmans-teaches-diagonal-movement/"/>
    <updated>2016-03-19T09:25:44-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/03/19/how-dungeonmans-teaches-diagonal-movement</id>
    <content type="html"><![CDATA[<p>Listening to <a href="http://www.roguelikeradio.com/2016/01/episode-114-gameplay-orientated.html">Roguelike Radio</a>, I heard the creator of <a href="https://twitter.com/dungeonmans">Dungeonmans</a> talk about designing levels to teach gameplay concepts.</p>

<!--more-->


<p><a href="http://www.dungeonmans.com/">Dungeonmans</a> has an interesting strategy to teach players to move diagonally early in the game, without requiring a wordy tutorial.</p>

<p>The first level has caves with loot inside.  Some caves are straightforward, allowing players to reach loot without needing to perform a diagonal step.</p>

<pre><code>###
#o#
#.#
</code></pre>

<p>But other caves are different, requiring diagonal movement to get the loot.</p>

<pre><code>###
#o#
##.
</code></pre>

<p>Presenting the diagonal movement mechanic this way is easy and low risk.  If you don&rsquo;t pick it up, it&rsquo;s ok.  You won&rsquo;t die, you just miss out on some loot.</p>

<p>It&rsquo;s also low disturbance.  There&rsquo;s no dialog popping up saying, &ldquo;Hey!  Listen!&rdquo;  The players will either get a kick out of figuring out how to get that pesky loot or simply move on and play more of the game.</p>

<p>It&rsquo;s a win-win situation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brainstorming a Hexcrawl application]]></title>
    <link href="http://zerosalife.github.io/blog/2016/02/06/brainstorming-a-hexcrawl-application/"/>
    <updated>2016-02-06T08:00:40-06:00</updated>
    <id>http://zerosalife.github.io/blog/2016/02/06/brainstorming-a-hexcrawl-application</id>
    <content type="html"><![CDATA[<p>Here are some notes brainstorming an application to support hexcrawl
campaigns in the spirit of the <a href="http://arsludi.lamemage.com/index.php/78/grand-experiments-west-marches/">West Marches</a>.</p>

<p>This is a snapshot of a living document.  I will continue working on
it in a <a href="https://gist.github.com/zerosalife/22ac247a275a9835c2fa">gist</a>.</p>

<!--more-->


<h2>Views</h2>

<h3>Map</h3>

<p><a href="http://4.bp.blogspot.com/-5X3gz-42PrE/TsCPATXPONI/AAAAAAAACQA/s0XggyFIGXY/s1600/HCC06+-+Troll+Hills.png">Example image</a></p>

<ol>
<li><p>Notification of Map Code and URL to share</p></li>
<li><p>Collection of tiles</p></li>
<li><p>Background image?</p></li>
<li><p>Regions?</p></li>
</ol>


<h3>Tile</h3>

<ol>
<li><p>Revealed / Generated</p>

<ol>
<li><p>Biome</p></li>
<li><p>Region</p></li>
<li><p>Data</p></li>
<li><p>Tile icon</p></li>
<li><p>Notes</p></li>
</ol>
</li>
<li><p>Hidden</p></li>
</ol>


<h3>Hierarchy</h3>

<ol>
<li><p>Map</p>

<ol>
<li>Tile</li>
</ol>
</li>
</ol>


<h2>Actions</h2>

<h3>Choose map from PIN</h3>

<h3>Drill down to tile (map)</h3>

<h3>Drill up to map (tile)</h3>

<h3>Reveal tile</h3>

<h3>Regenerate tile</h3>

<h3>Regenerate data entry</h3>

<h3>Save tile notes</h3>

<h2>Persistence</h2>

<h3>Monolithic</h3>

<h3>Per User</h3>

<h3>Per Map</h3>

<h3>Bloom Filters to prevent code collisions</h3>

<ol>
<li><p>Cache on startup</p></li>
<li><p>Append on world create</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[game-icons.net]]></title>
    <link href="http://zerosalife.github.io/blog/2016/01/30/game-icons-dot-net/"/>
    <updated>2016-01-30T12:09:34-06:00</updated>
    <id>http://zerosalife.github.io/blog/2016/01/30/game-icons-dot-net</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a handy resource that I will be sure to use in the future: <a href="//game-icons.net/">game-icons.net</a>.</p>

<p>The site has thousands of icons available under a <a href="//creativecommons.org/licenses/by/3.0/">CC by 3.0 license</a>.  I am not a lawyer, but by my read this means you can reuse, redistribute, and remix the icons provided you give appropriate credit, indicate if changes were made, and provide a link to the license.</p>

<p>Check the site out and <a href="//twitter.com/zerosalife">tweet me</a> if you use or have used the icons in your game.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking GameObjects in Unity Unit Tests]]></title>
    <link href="http://zerosalife.github.io/blog/2016/01/09/mocking-gameobjects-in-unity-unit-tests/"/>
    <updated>2016-01-09T10:52:49-06:00</updated>
    <id>http://zerosalife.github.io/blog/2016/01/09/mocking-gameobjects-in-unity-unit-tests</id>
    <content type="html"><![CDATA[<p>A while back, I wrote a post about <a href="https://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/">unit testing in Unity</a>.  In this post, I&rsquo;ll go through a useful pattern to <a href="https://en.wikipedia.org/wiki/Mock_object">mock</a> <code>GameObject</code>s in unit tests.</p>

<!--more-->


<h2>Make a GameObject</h2>

<p>We can create a <code>GameObject</code> inside a test just like we would normally inside a Unity script.</p>

<p><code>csharp
GameObject testGo = new GameObject("test");
</code></p>

<p>Passing a string to <a href="https://docs.unity3d.com/ScriptReference/GameObject-ctor.html">the <code>GameObject</code> constructor</a> gives the <code>GameObject</code> that name.</p>

<h2>We can even Instantiate prefabs</h2>

<p>Since our test is not inheriting <code>MonoBehaviour</code>, we&rsquo;ll have to call the Instantiate function directly, using the fully qualified namespace.</p>

<p>Remember that prefabs are just stored <code>GameObject</code>s, so we can use the <code>testGo</code> created above as our prefab.</p>

<p>```csharp
GameObject go = UnityEngine.Object.Instantiate(testGo,</p>

<pre><code>                                           Vector3.zero,
                                           Quaternion.identity) as GameObject;
</code></pre>

<p>```</p>

<h2>Clean up</h2>

<p>We can create <code>GameObjects</code>, but repeatedly running the test leaves our project cluttered up with old objects.  We want our tests to clean up all mocked objects after running.  We&rsquo;ll do that using by using the fully qualified <a href="https://docs.unity3d.com/ScriptReference/Object.DestroyImmediate.html"><code>DestroyImmediate</code> function</a>.</p>

<p>We need to call <code>DestroyImmediate</code> instead of <code>Destroy</code> because the unit tests are running in the editor and delayed destruction won&rsquo;t be invoked.</p>

<p><code>csharp
UnityEngine.Object.DestroyImmediate(go);
UnityEngine.Object.DestroyImmediate(testGo);
</code></p>

<h2>Mocking is easy</h2>

<p>Following this pattern will give you the ability to mock objects to your hearts' delight as you unit test your Unity code.  As, always let me know if you have questions, comments, or concerns below or on <a href="https://twitter.com/zerosalife">twitter</a>.</p>
]]></content>
  </entry>
  
</feed>
