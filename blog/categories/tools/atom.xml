<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2015-09-12T09:59:14-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using images in Octopress posts]]></title>
    <link href="http://zerosalife.github.io/blog/2015/08/29/using-images-in-octopress-posts/"/>
    <updated>2015-08-29T17:20:05-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/08/29/using-images-in-octopress-posts</id>
    <content type="html"><![CDATA[<h2>Storing the images</h2>

<p>I store images in <code>./images/assets/</code> in my Octopress install directory.  They get bundled up with all the other parts of my blog when I deploy.</p>

<h2>The Octopress image tag</h2>

<p>I use the <a href="http://octopress.org/docs/plugins/image-tag/">Octopress image tag</a></p>

<p>The syntax is:</p>

<pre><code>{[%] img [class names] /path/to/image [width] [height] [title text [alt text]] [%]}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# code blocks in Octopress]]></title>
    <link href="http://zerosalife.github.io/blog/2015/08/15/c-sharp-code-blocks-in-octopress/"/>
    <updated>2015-08-15T08:59:19-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/08/15/c-sharp-code-blocks-in-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">Octopress</a> supports <a href="http://octopress.org/docs/plugins/backtick-codeblock/">backtick code blocks</a> with <a href="http://pygments.org/docs/lexers/">Pygment lexers</a> handling syntax highlighting.  I always forget the syntax for using with bactick codeblocks with C#, leading to irritating failures when I build my Octopress blog.  Here&rsquo;s how you use them.</p>

<pre><code>``` csharp
[csharp code here]
```
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trace function for debugging in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/07/25/trace-function-for-debugging-in-unity-c-sharp/"/>
    <updated>2015-07-25T09:00:31-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/07/25/trace-function-for-debugging-in-unity-c-sharp</id>
    <content type="html"><![CDATA[<p>Inspired by <a href="https://www.youtube.com/watch?v=btN095elmh4&amp;feature=youtu.be&amp;t=1985">a video from the excellent Double Fine Documentary interviews with Massive Chalice artists and developers</a>, I wanted to come up with a way of conditionally including debug statements in development code, but not in production.  Luckily I wasn&rsquo;t the first person to think of this.</p>

<p><a href="https://twitter.com/danpuzey">Dan Puzey</a> <a href="http://blog.puzey.net/simple-better-unity-logging/">wrote an abstraction layer</a> over Unity&rsquo;s built-in <code>Debug</code> library.  The library contains several functions for various types of logging.  The most important piece for me is <code>VerboseFormat</code>, which combines string formatting with conditional attributes.  I&rsquo;ll explain a bit more about how these pieces work below.</p>

<!--more-->


<h2>String Formatting</h2>

<p>To my surprise, Unity&rsquo;s C# implementation, Mono, doesn&rsquo;t use standard <code>printf</code>-like string formatting syntax.  Instead of <code>%s</code> or other commonly used formatting variables, C# uses curly braces around numbers to interpolate variables passed in to the <code>String.Format</code> call as arguments.</p>

<p>Dan&rsquo;s <code>VerboseFormat</code> function wraps <code>String.Format</code>, so you can call <code>VerboseFormat</code> with C# formatting strings.</p>

<p>``` csharp
using Assets.Phunk.Core</p>

<p>&hellip;</p>

<p>Log.VerboseFormat(&ldquo;var1: {0}, var2: {1}&rdquo;, var1, var2);
// => [VERBOSE] var1: [var1], var2: [var2]
```</p>

<h2>Conditional Attributes</h2>

<p>Above some of the functions in Dan&rsquo;s code you&rsquo;ll see the following <a href="https://msdn.microsoft.com/en-us/library/system.diagnostics.conditionalattribute%28v=vs.110%29.aspx">conditional attributes</a>:</p>

<p>``` csharp</p>

<pre><code>[System.Diagnostics.Conditional("DEBUG"), System.Diagnostics.Conditional("UNITY_EDITOR")]
</code></pre>

<p>```</p>

<p>These two settings tell the C# compiler to only compile the code, in this case the <code>Verbose</code> logging functions, when compiling during development, i.e. <code>DEBUG</code> or <code>UNITY_EDITOR</code>.  That means all of the <code>Verbose</code> logging statements in your code will not be compiled in the production builds of your code.</p>

<p>Cool, huh?  Good thinking, Dan.</p>

<h2>That&rsquo;s it!</h2>

<p>It&rsquo;s always great when you think that a tool would be useful and someone else has already implemented it for you.  Go on over and give <a href="http://puzey.net/">Dan&rsquo;s blog</a> a gander.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Probabilistic entity spawning in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/07/11/probabilistic-entity-spawning-in-unity-c-sharp/"/>
    <updated>2015-07-11T17:03:55-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/07/11/probabilistic-entity-spawning-in-unity-c-sharp</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript/">Last week</a> I showed how to do probabilistic entity spawning in Unity JS.  This week I&rsquo;ll port that code over to C#.  You can find examples of both the C# and JavaScript versions of the code in a <a href="https://github.com/zerosalife/ProbEntitySpawnExample">repository on github</a>.  Since I&rsquo;ve already explained the Algorithm I will focus mainly on the differences in the code.</p>

<p>There isn&rsquo;t syntactic sugar for Dictionary assignment in C# :( This required moving the assignment for the <code>areas</code> Dictionary into the <code>Start</code> function.  It&rsquo;s a move that enforces best practices, strictly speaking, but risks confusion about the content of the <code>areas</code> Dictionary at runtime.  If you&rsquo;d like to read up on Dictionaries in C#, I found <a href="https://msdn.microsoft.com/en-us/library/fkbw11z0.aspx">this resource</a> helpful.</p>

<p>The <code>foreach</code> command requires a type. This is a case where a stricter language will save confusion in the long run.</p>

<p>Lists can be created from specific arrays of the List&rsquo;s type, but not from some arbitrary array, as in JavaScript.  Again, this is a feature of a stricter language that causes some extra work up-front, but will make things more clear in the long run.</p>

<p>For an in-depth tour of the algorithm for spawning entities, check out <a href="http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript/">last week&rsquo;s post</a> and the <a href="https://github.com/zerosalife/ProbEntitySpawnExample">example repository on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Probabilistic Entity Spawning in Unity JavaScript]]></title>
    <link href="http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript/"/>
    <updated>2015-07-04T09:56:33-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript</id>
    <content type="html"><![CDATA[<p>The Unity documentation has an example showing how to generate random indexes satisfying a distribution of probabilities (see: <a href="http://docs.unity3d.com/Manual/RandomNumbers.html">Choosing Items with Different Probabilities</a>).  In this post I&rsquo;ll show how to use a similar approach to generate random items with specific probabilities dictated by the environment.</p>

<!--more-->


<p>I want to be able to generate an item code, say <code>Red</code>, <code>Green</code>, or <code>Black</code>, given a list of floating point probabilities dictated by the current environmental area in my game, say for example <code>desert</code> or <code>grassland</code>.</p>

<p>Varying the probability of encountering items will give each area a unique flavor.  If the player needs a <code>Red</code> item, the player will need to seek out areas in which the probability for encountering <code>Red</code> items is high.  I hope this will drive player exploration and investigation.</p>

<p>I&rsquo;ll start by defining an array of possible item types.  (According to <a href="http://wiki.unity3d.com/index.php/Head_First_into_Unity_with_UnityScript#Use_enum">this introduction to Unity JavaScript</a>, I should prefer <code>enum</code>.)</p>

<p><code>javascript
var ents : String[] = ["Red", "Green", "Black", "Orange"];
</code></p>

<p>Since this is a small example, I&rsquo;ll forego the efficiency and security that <code>enum</code>s provide for the convenience of using a simple <code>String</code> array.  I&rsquo;ll note that this is a good spot to do some refactoring in a real project where a variety of systems may have to interact with the item types.</p>

<p>I then define a Dictionary <code>areas</code> of Lists of floating point probabilities.  These areas correspond to terrains that contain unique distributions of items. The <code>areas</code> Dictionary accepts <code>String</code>s specifying the desired terrain.</p>

<p>It&rsquo;s important to note that the order of the probabilities correspond to the order of the item types in <code>ent</code>s.</p>

<p><code>javascript
var areas = new Dictionary.&lt;String, List.&lt;float&gt; &gt;();
areas["desert"] = new List.&lt;float&gt;([0.1, 0.05, 0.425, 0.425]);
areas["grassland"] = new List.&lt;float&gt;([0.3, 0.35, 0.1, 0.25]);
</code></p>

<p>So, in the <code>grassland</code> area, there will be a 30% chance of choosing a <code>Red</code> item.</p>

<p>Now that I&rsquo;ve defined the data, I need a function to choose the appropriate index given a List of probabilities.  This function is lifted with minor modifications from the <a href="http://docs.unity3d.com/Documentation/Manual/RandomNumbers.html">Unity Documentation</a>.  Take a look at that documentation for a better visualization of the algorithm than I could do with words.  Really, do it!</p>

<p>``` javascript
function Choose(probs : List.<float>) : int {</p>

<pre><code>// Returns the index of a probabilistically determined random
// entity, given by the probability distributions in probs.
// e.g.:
// probs : List.&lt;float&gt;([0.5, 0.2, 0.1, 0.2]);
// entity = entities[Choose(probs)];
//
// See http://docs.unity3d.com/Documentation/Manual/RandomNumbers.html

// Watch out!  If you fail to specify total's type as float, it
// will add the probs using integer addition.  This will floor
// each of the probs to 0.
var total : float = 0;

for (x in probs) {
    total += x;
}

var randomPoint = Random.value * total;

for(var i = 0; i &lt; probs.Count; i++) {
    if (randomPoint &lt; probs[i])
        return i;
    else
        // Shift the strip down, adjusting the random point's
        // value to see whether it falls within the next prob.
        randomPoint -= probs[i];
}
// Take care of possibility that randomPoint is 1.0 or 100% by
// returning the last element of probs.  Avoids allowing Choose to
// return a 0 probability event (which would be possible using the
// &lt;= test).
return probs.Count - 1;
</code></pre>

<p>}
```</p>

<p>Now to choose an item:</p>

<p><code>javascript
var item = ents[Choose(areas["grassland"])];
Debug.Log(item);
</code></p>

<p>That&rsquo;s all there is to it. I&rsquo;ve put an <a href="https://github.com/zerosalife/ProbEntitySpawnExample">example Unity project with this code on github</a>.</p>
]]></content>
  </entry>
  
</feed>
