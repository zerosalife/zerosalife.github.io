<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2015-02-21T11:31:53-06:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hosting a game on itch.io: account set up and transaction fees]]></title>
    <link href="http://zerosalife.github.io/blog/2015/02/21/hosting-a-game-on-itch-dot-io-account-set-up-and-transaction-fees/"/>
    <updated>2015-02-21T11:25:39-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/02/21/hosting-a-game-on-itch-dot-io-account-set-up-and-transaction-fees</id>
    <content type="html"><![CDATA[<h2>What is itch.io?</h2>

<p>According to the <a href="http://itch.io/about/faq">faq</a>, itch.io is a service for handling hosting and selling individual and bundled games, soundtracks, art, etc.  It has some handy features to <a href="http://itch.io/jams">manage and track gamejams</a> as well.  It was <a href="http://leafo.net/posts/introducing_itchio.html">created</a> by <a href="https://twitter.com/moonscript">@moonscript</a>.</p>

<p>In this post I&rsquo;ll look at the fees charged itch.io and the supported payment platforms and how to set up an account.  The <a href="http://itch.io/about/faq">faq</a> covers these and other topics in more detail so make sure you peruse it.</p>

<!--more-->


<h2>Fees</h2>

<p>There are a few payment options available on itch.io.  Here&rsquo;s how the fees break down.  I&rsquo;ll use the example of selling $5.00 and $2.00 games to show the revenue you could expect to receive after taking out the various fees.</p>

<p>It&rsquo;s worth noting that, at of the time of this post, <strong>itch.io is not collecting fees</strong>.  I&rsquo;ll still present the revenue calculations with the itch.io slice factored in, but itch.io won&rsquo;t start collecting a percentage of the game price until a later, unspecified date.</p>

<p>Itch.io currently provides three options for handling payments: <a href="http://payments.amazon.com/">Amazon Payments</a>, <a href="http://www.paypal.com/">PayPal</a> and <a href="http://stripe.com/">Stripe</a>.</p>

<h3>Supported currencies</h3>

<p>PayPal appears to be the least restrictive in terms of the countries and currencies it handles.  Stripe handles U.S., Canada, U.K., Australia, and Ireland.  Stripe has an <a href="https://support.stripe.com/questions/what-countries-does-stripe-support">open beta for some European countries</a>. Amazon Payments only handles U.S. currencies.  Non-U.S. purchases through Amazon Payments are <a href="https://payments.amazon.com/sdui/sdui/about?nodeId%3D77175#aspd_cost">only allowed via credit card transactions, and there&rsquo;s an additional charge</a>.</p>

<h3>Fee structure</h3>

<p>The fees for <a href="https://stripe.com/us/pricing">Stripe</a> and <a href="https://www.paypal.com/webapps/mpp/merchant-fees">PayPal</a> work similarly, assuming you&rsquo;re processing less than $3,000 monthly.  There&rsquo;s a base fee of $0.30 + 2.9% for each transaction.  Amazon Payments works similarly if the price is above $10.00, but below $9.99, there&rsquo;s a $0.05 surcharge + 5%.</p>

<p>Itch.io will charge a 10% fee for each transaction, but currently this charge is waived.</p>

<h3>Down and dirty</h3>

<p>So let&rsquo;s do the math for the two example prices I mentioned above:</p>

<p>For Stripe and PayPal the numbers look like this:</p>

<pre><code>$5 - ($5 * 0.1) - $0.30 - ($5 * 0.029) = $4.055

$2 - ($2 * 0.1) - $0.30 - ($2 * 0.029) = $1.442
</code></pre>

<p>I&rsquo;m not sure how the rounding works.  I will have to reach out to itch.io and the payment handling services to see how they handle tenths of a cent.</p>

<p>For Amazon Payments the numbers look like:</p>

<pre><code>$5 - ($5 * 0.1) - $0.05 - ($5 * 0.05) = $4.20

$2 - ($2 * 0.1) - $0.05 - ($2 * 0.05) = $1.65
</code></pre>

<p>Keep in mind, for each of these calculations you&rsquo;ll get an extra $0.50 and $0.20, respectively, since the itch.io surcharge is not in effect.</p>

<p>That&rsquo;s how the numbers breakdown for these price points.  I&rsquo;m not planning on charging money right now, but it&rsquo;s nice to see the real amounts you can expect to see.  I am really bad at reasoning about these sorts of percentages in the abstract.</p>

<h2>Signing up</h2>

<p><a href="http://itch.io/register">Registering for itch.io</a> was easy.  I created an account and checked <code>I'm interested in distributing games on itch.io</code>.  That&rsquo;s it.  It&rsquo;s very straightforward.</p>

<p>Now I have a relatively spartan page at <a href="http://zerosalife.itch.io/">zerosalife.itch.io</a>.</p>

<h2>The next step</h2>

<p>I&rsquo;d like to brand and personalize my itch.io page, but I don&rsquo;t think that the time for that is now.  Somewhere down the road, I&rsquo;ll look into itch.io&rsquo;s powerful customization tools.</p>

<p>The obvious clear thing to do with my new itch.io account is to release a game.  Tune in next week for exactly that!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Syntax highlighting for Octopress]]></title>
    <link href="http://zerosalife.github.io/blog/2015/01/17/syntax-highlighting-for-octopress/"/>
    <updated>2015-01-17T11:12:37-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/01/17/syntax-highlighting-for-octopress</id>
    <content type="html"><![CDATA[<p>It&rsquo;s relatively simple, but I always forget how it&rsquo;s done.  In the
interest of documenting useful information for myself, here is how to
use <a href="http://octopress.org/docs/blogging/code/">syntax highlighting with code blocks in Octopress</a>.</p>

<!--more-->


<p>Here are some examples of languages I typically use:</p>

<p>``` csharp
private IEnumerator GUIMoveToPosition(Vector3 newPosition, float duration, RectTransform rect) {
  float elapsedTime = 0;
  Vector3 startingPos = rect.position;
  while(elapsedTime &lt; duration) {</p>

<pre><code>rect.position = Vector3.Lerp(startingPos,
                             newPosition,
                             elapsedTime / duration);
elapsedTime += Time.deltaTime;
yield return null;
</code></pre>

<p>  }
}</p>

<p>```</p>

<p>``` python
def update(self, time_elapsed):</p>

<pre><code>self.tick += 1
self.total_time += time_elapsed

if self.mode:
    self.mode.update(time_elapsed)
</code></pre>

<p>```</p>

<p>``` clojure
(defn valid-string? [s]
  &ldquo;Valid strings are non-empty strings that do not contain
  [ (commonly used to denote parts of the song and which rappers are
  rapping) and : (commonly used in the album info and transcriber
  info).&rdquo;
  (and (not (contains-char? s [))</p>

<pre><code>   (not (contains-char? s \:))
   (not (contains-char? s \"))
   (not (contains-char? s \())
   (seq s)))
</code></pre>

<p>;;; <a href="http://clojuredocs.org/clojure_core/clojure.core/empty_q">http://clojuredocs.org/clojure_core/clojure.core/empty_q</a>
;;; Please use the idiom (seq x) rather than (not (empty? x))
```</p>

<h2>Bonus: Help me refactor this code</h2>

<p>I think there&rsquo;s some way to refactor these two similar functions so
they don&rsquo;t share code, but I don&rsquo;t see it.  If you have a clever way
to offload the common functionality, let me know in the comments
(<a href="http://gist.github.com">gists</a> preferred).</p>

<p>``` csharp
// NOTE: there are some differences between the two functions
// because I&rsquo;m still adding funcitonality.  I think there should be
// a way to pull out some of the common functionality so I don&rsquo;t
// have two functions that share code.  Maybe by separating the
// boundary checks from the actual &ldquo;counting&rdquo; steps?</p>

<p>void Countdown () {
  int iTargetHp = iHp + 1;</p>

<p>  // If the rolling hp reaches the hit point above iHp then we can
  // stop the rolling because each RollEvent effectively moves past
  // the current iRolHp.
  if(iRolHp == iTargetHp) {</p>

<pre><code>// Start Coroutine to return reels to original positions
StartCoroutine(WaitAndResetReels(RollDir.Down));

CancelInvoke("Countdown");
</code></pre>

<p>  }
  if(iRolHp &lt;= 0) {</p>

<pre><code>StartCoroutine(WaitAndResetReels(RollDir.Down));

// TRUE DEATH!
CancelInvoke("Countdown");
</code></pre>

<p>  }
  // If the rolling HP is larger than the target HP and positive,
  // then roll down.
  if(iRolHp > iTargetHp || iRolHp > 0) {</p>

<pre><code>RollEvent(RollDir.Down);
</code></pre>

<p>  }</p>

<p>  iRolHp = iRolHp + (int)RollDir.Down;</p>

<p>}</p>

<p>void Countup() {
  int iTargetHp = iHp &ndash; 1;</p>

<p>  // If the rolling hp reaches the hit point below iHp then we can
  // stop rolling because each RollEvent effectively moves past the
  // current iRolHp.
  //
  // Also take care of some nasty edge cases resulting in two calls
  // to WaitAndResetReels.
  if(iRolHp == iTargetHp &amp; iRolHp &lt; iMaxHp &amp; iRolHp != iMaxHp) {</p>

<pre><code>StartCoroutine(WaitAndResetReels(RollDir.Up));

CancelInvoke("Countup");
</code></pre>

<p>  } else if(iRolHp >= iMaxHp) {</p>

<pre><code>iHp = iMaxHp;
StartCoroutine(WaitAndResetReels(RollDir.Up));

// Maxed out HP.
CancelInvoke("Countup");
</code></pre>

<p>  }</p>

<p>  // If the rolling HP is smaller than the target HP and less than
  // Max HP, then roll up.
  if(iRolHp &lt; iTargetHp || iRolHp &lt; iMaxHp) {</p>

<pre><code>RollEvent(RollDir.Up);
</code></pre>

<p>  }</p>

<p>  iRolHp = iRolHp + (int)RollDir.Up;</p>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Previewing a post using Octopress]]></title>
    <link href="http://zerosalife.github.io/blog/2015/01/10/previewing-a-post-using-octopress/"/>
    <updated>2015-01-10T10:01:44-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/01/10/previewing-a-post-using-octopress</id>
    <content type="html"><![CDATA[<p>It&rsquo;s nice to preview some of my more complicated posts before I ship them out to the Internets.  Here&rsquo;s how I do it.</p>

<h2>make preview</h2>

<p>I <a href="http://zerosalife.github.io/blog/2014/09/06/automating-blog-deployment-with-octopress/">previously posted</a> a <code>makefile</code> I use to automate deployment of my blog.  Here are the germane lines for previewing:</p>

<p>``` make
preview:</p>

<pre><code>bundle exec rake generate &amp;&amp; bundle exec rake preview
</code></pre>

<p>```</p>

<p>So typing <code>make preview</code> at the command prompt will run start up <a href="https://github.com/ruby/rake">rake</a>&rsquo;s webserver at <code>http://localhost:4000</code>.  Then all I have to do is launch a browser, connect to that port, and voila: a preview of the blog that regenerates to match the changes I make live, as I make them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Year, New Footer]]></title>
    <link href="http://zerosalife.github.io/blog/2015/01/03/new-year-new-footer/"/>
    <updated>2015-01-03T09:17:24-06:00</updated>
    <id>http://zerosalife.github.io/blog/2015/01/03/new-year-new-footer</id>
    <content type="html"><![CDATA[<p>It&rsquo;s 2015.  Time to update my footer.  I came across a link to a
website called, <a href="http://updateyourfooter.com/">updateyourfooter.com</a>.  It describes ways to
dynamically update footer info in a variety of languages.</p>

<p>I set out to intrepidly implement one of the JavaScript snippets from the website in the <code>source/_includes/custom/footer.html</code> file in my <a href="http://octopress.org/">Octopress</a> install.  But, to my surprise, there was a bit of code in the footer that already dynamically generated the date timestamp for the footer.</p>

<p>The code looks like this:</p>

<p>
<code>{{ site.time | date: "%Y" }}</code>
</p>

<p>Ready for this?  Octopress is a framework built on top of <a href="https://github.com/jekyll/jekyll">Jekyll</a>.  Jekyll uses <a href="http://docs.shopify.com/themes/liquid-documentation/basics">Shopify&rsquo;s Liquid Template Engine</a>.  All of that is a fancy way of saying that this code is compiled into useful stuff for my site.</p>

<p>All I had to do was preface that with the year my blog was established, and badabing, no-mess dynamic footer.  Now the relevant section of the footer looks like this:</p>

<p>
<code>Copyright &amp;copy; 2014 &amp;ndash; {{ site.time | date: "%Y" }}</code>
</p>

<p>You can see the results at the bottom of this page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharing Philosophy]]></title>
    <link href="http://zerosalife.github.io/blog/2014/12/27/sharing-philosophy/"/>
    <updated>2014-12-27T08:01:01-06:00</updated>
    <id>http://zerosalife.github.io/blog/2014/12/27/sharing-philosophy</id>
    <content type="html"><![CDATA[<p>From <a href="http://www.imperica.com/en/in-conversation-with/meta-ex-the-music-of-code">this interview</a> with <a href="https://twitter.com/samaaron">Sam Aaron</a>.  Aaron talks about sharing software to create music, but it applies just as well to games.</p>

<blockquote><p>We believe that most value in the world comes through sharing, and that music is no exception. One of the benefits of sharing is that it makes learning much easier. For example, we often hear amazing sounds on albums and wonder how they were made. However, musicians rarely share their production methods. We release all the software we write, which includes our synthesiser designs, interaction abstractions, and compositional structures, under an open source license, and we distribute it to everyone through GitHub. This makes it free and easy for anybody to copy and recreate any aspect of our work. For example, when one of our fans is interested in the sound of one of the synths we&rsquo;re using, they can go to GitHub and download the synth design as text. They can email it to their friends, read it, study it, copy it, modify it and run it to recreate the exact sound.</p></blockquote>

<p>&#x2013;Sam Aaron</p>
]]></content>
  </entry>
  
</feed>
