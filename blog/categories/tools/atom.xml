<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2016-07-23T10:06:02-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I am Setsuna uses a State Stack: Interiors]]></title>
    <link href="http://zerosalife.github.io/blog/2016/07/23/how-i-am-setsuna-uses-a-state-stack-interiors/"/>
    <updated>2016-07-23T10:01:13-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/07/23/how-i-am-setsuna-uses-a-state-stack-interiors</id>
    <content type="html"><![CDATA[<p>About <a href="https://youtu.be/GUwmNnMXd4A?t%3D5m36s">a quarter of the way through this playthrough</a> of <em>I am Setsuna</em> at E3, the player enters a house.</p>

<!--more-->


<h2>Interiors</h2>

<p>The player enters a house, which triggers a special case of the Map state, the Interior state to be pushed onto the stack.</p>

<pre><code>| Interior ←push |
| Map            |
</code></pre>

<p>It&rsquo;s hard to tell how the interior state differs from the town map and the forest map from the beginning of the video.  In fact, I think that you could cover similar features with a simple Map state that knows where triggers (for, for example, Dialog or Treasure) and exits are placed.</p>

<p>So, it&rsquo;s likely ethat the I am Setsuna devs are using a gneeralized Map state to cover tehse cases</p>

<p>This leads us to the final state I want to explore, a state to capture the Overworld.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I am Setsuna uses a State Stack: Combat]]></title>
    <link href="http://zerosalife.github.io/blog/2016/07/16/how-i-am-setsuna-uses-a-state-stack-combat/"/>
    <updated>2016-07-16T10:14:59-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/07/16/how-i-am-setsuna-uses-a-state-stack-combat</id>
    <content type="html"><![CDATA[<p>The previous post looked at how <em>I am Setsuna</em> uses a state stack to allow players to move around on a map and interact with NPCs via dialog.  This time around, I&rsquo;ll show you how combat can be handled by adding another state to the stack.</p>

<!--more-->


<p>This approach decreases the need to pass information between the various parts of your code handling the various states of your game.  So it&rsquo;s preferable compared to costly serialization and deserialization to pass information to wholly separate code every time the game state changes.  Instead you simply change the way that the game&rsquo;s code runs.</p>

<h2>Combat</h2>

<p>After the player converses with an NPC, combat with a gnarly looking bear begins.  Here&rsquo;s what likely happens.</p>

<pre><code>| Combat ←push |
| Map          |
</code></pre>

<p>The player fights the enemy.  Then the combat state pops off the stack, returning the player to the snowy forest map.</p>

<pre><code>| Combat →pop |

| Map |
</code></pre>

<p>Note that the combat state may have substates that handle in-combat messages, player turns, and experience and item rewards at the end of combat.  Designing these substates depends on the specific requirements of your combat system.  That makes it hard to tell what the developers are using from <a href="https://www.youtube.com/watch?v%3DGUwmNnMXd4A">this brief clip of <em>I am Setsuna</em></a>.</p>

<p>That&rsquo;s all there is to it.  The modularity of this state stack approach allows developers to customize the flow of gameplay as desired.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I am Setsuna uses a State Stack: Map and Dialog]]></title>
    <link href="http://zerosalife.github.io/blog/2016/07/02/how-i-am-setsuna-uses-a-state-stack-map-and-dialog/"/>
    <updated>2016-07-02T09:48:42-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/07/02/how-i-am-setsuna-uses-a-state-stack-map-and-dialog</id>
    <content type="html"><![CDATA[<p>I recently watched <a href="https://www.youtube.com/watch?v%3DGUwmNnMXd4A">some footage of <em>I Am Setsuna</em> from E3</a>.</p>

<p>Here&rsquo;s my analysis of the evolving <a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)">state stack</a>, as you play this spritual successor to the classic RPG <a href="https://en.wikipedia.org/wiki/Chrono_Trigger"><em>Chrono Trigger</em></a>.</p>

<!--more-->


<h2>Map and Dialog</h2>

<p>There&rsquo;s likely a catch-all map state in which characters can run around, interacting with the world by opening chests, entering doors and new areas, and talking to NPCs.</p>

<p>The gameplay starts in a snowy forest.  So, there&rsquo;s a <code>Map</code> state pushed onto the state stack that has a reference to the map for this snowy forest.</p>

<pre><code>| Map |
</code></pre>

<p>As the player wanders around the forest, the player encounters talking NPCs.  These NPCs likely have triggers that push a <code>Dialog</code> state with a reference to the NPC&rsquo;s dialog onto the stack.</p>

<pre><code>| Dialog ←PUSH |
| Map          |
</code></pre>

<p>As the player advances and completes the dialog, the player is returned to the previous state, the snowy forest <code>Map</code>.</p>

<pre><code>| Dialog →POP |

| Map |
</code></pre>

<p>The gameplay is controlled by the current state at the top of the state stack.  This provides a more convenient way to track the appropriate controls and UI elements than to sprinkle a bunch of complicated conditionals throughout some monolithic game code.</p>

<p>Next time I&rsquo;ll talk about combat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Original Diablo Pitch]]></title>
    <link href="http://zerosalife.github.io/blog/2016/04/02/the-original-diablo-pitch/"/>
    <updated>2016-04-02T09:48:33-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/04/02/the-original-diablo-pitch</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/davidbrevik/status/711420722225106945">David Brevik</a>, one of the original developers of Diablo has released the <a href="http://graybeardgames.blogspot.com/2016/03/original-diablo-pitch-document.html">original pitch document</a>.  Check it out!</p>

<!--more-->


<h2>Anatomy of Diablo&rsquo;s pitch document</h2>

<ul>
<li>Summary</li>
<li>Game Design

<ul>
<li>Overview</li>
<li>Plot and Setting</li>
<li>Gameplay</li>
</ul>
</li>
<li>Marketing</li>
<li>Development</li>
</ul>


<p>In addition to illuminating how to write these documents in general, I find interesting to see how the Diablo devs were planning on leveraging the success of <em>Magic: The Gathering</em>&rsquo;s business model to sell DLC.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Dungeonmans teaches diagonal movement]]></title>
    <link href="http://zerosalife.github.io/blog/2016/03/19/how-dungeonmans-teaches-diagonal-movement/"/>
    <updated>2016-03-19T09:25:44-05:00</updated>
    <id>http://zerosalife.github.io/blog/2016/03/19/how-dungeonmans-teaches-diagonal-movement</id>
    <content type="html"><![CDATA[<p>Listening to <a href="http://www.roguelikeradio.com/2016/01/episode-114-gameplay-orientated.html">Roguelike Radio</a>, I heard the creator of <a href="https://twitter.com/dungeonmans">Dungeonmans</a> talk about designing levels to teach gameplay concepts.</p>

<!--more-->


<p><a href="http://www.dungeonmans.com/">Dungeonmans</a> has an interesting strategy to teach players to move diagonally early in the game, without requiring a wordy tutorial.</p>

<p>The first level has caves with loot inside.  Some caves are straightforward, allowing players to reach loot without needing to perform a diagonal step.</p>

<pre><code>###
#o#
#.#
</code></pre>

<p>But other caves are different, requiring diagonal movement to get the loot.</p>

<pre><code>###
#o#
##.
</code></pre>

<p>Presenting the diagonal movement mechanic this way is easy and low risk.  If you don&rsquo;t pick it up, it&rsquo;s ok.  You won&rsquo;t die, you just miss out on some loot.</p>

<p>It&rsquo;s also low disturbance.  There&rsquo;s no dialog popping up saying, &ldquo;Hey!  Listen!&rdquo;  The players will either get a kick out of figuring out how to get that pesky loot or simply move on and play more of the game.</p>

<p>It&rsquo;s a win-win situation.</p>
]]></content>
  </entry>
  
</feed>
