<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2016-02-27T09:34:40-06:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Brainstorming a Hexcrawl application]]></title>
    <link href="http://zerosalife.github.io/blog/2016/02/06/brainstorming-a-hexcrawl-application/"/>
    <updated>2016-02-06T08:00:40-06:00</updated>
    <id>http://zerosalife.github.io/blog/2016/02/06/brainstorming-a-hexcrawl-application</id>
    <content type="html"><![CDATA[<p>Here are some notes brainstorming an application to support hexcrawl
campaigns in the spirit of the <a href="http://arsludi.lamemage.com/index.php/78/grand-experiments-west-marches/">West Marches</a>.</p>

<p>This is a snapshot of a living document.  I will continue working on
it in a <a href="https://gist.github.com/zerosalife/22ac247a275a9835c2fa">gist</a>.</p>

<!--more-->


<h2>Views</h2>

<h3>Map</h3>

<p><a href="http://4.bp.blogspot.com/-5X3gz-42PrE/TsCPATXPONI/AAAAAAAACQA/s0XggyFIGXY/s1600/HCC06+-+Troll+Hills.png">Example image</a></p>

<ol>
<li><p>Notification of Map Code and URL to share</p></li>
<li><p>Collection of tiles</p></li>
<li><p>Background image?</p></li>
<li><p>Regions?</p></li>
</ol>


<h3>Tile</h3>

<ol>
<li><p>Revealed / Generated</p>

<ol>
<li><p>Biome</p></li>
<li><p>Region</p></li>
<li><p>Data</p></li>
<li><p>Tile icon</p></li>
<li><p>Notes</p></li>
</ol>
</li>
<li><p>Hidden</p></li>
</ol>


<h3>Hierarchy</h3>

<ol>
<li><p>Map</p>

<ol>
<li>Tile</li>
</ol>
</li>
</ol>


<h2>Actions</h2>

<h3>Choose map from PIN</h3>

<h3>Drill down to tile (map)</h3>

<h3>Drill up to map (tile)</h3>

<h3>Reveal tile</h3>

<h3>Regenerate tile</h3>

<h3>Regenerate data entry</h3>

<h3>Save tile notes</h3>

<h2>Persistence</h2>

<h3>Monolithic</h3>

<h3>Per User</h3>

<h3>Per Map</h3>

<h3>Bloom Filters to prevent code collisions</h3>

<ol>
<li><p>Cache on startup</p></li>
<li><p>Append on world create</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[game-icons.net]]></title>
    <link href="http://zerosalife.github.io/blog/2016/01/30/game-icons-dot-net/"/>
    <updated>2016-01-30T12:09:34-06:00</updated>
    <id>http://zerosalife.github.io/blog/2016/01/30/game-icons-dot-net</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a handy resource that I will be sure to use in the future: <a href="//game-icons.net/">game-icons.net</a>.</p>

<p>The site has thousands of icons available under a <a href="//creativecommons.org/licenses/by/3.0/">CC by 3.0 license</a>.  I am not a lawyer, but by my read this means you can reuse, redistribute, and remix the icons provided you give appropriate credit, indicate if changes were made, and provide a link to the license.</p>

<p>Check the site out and <a href="//twitter.com/zerosalife">tweet me</a> if you use or have used the icons in your game.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking GameObjects in Unity Unit Tests]]></title>
    <link href="http://zerosalife.github.io/blog/2016/01/09/mocking-gameobjects-in-unity-unit-tests/"/>
    <updated>2016-01-09T10:52:49-06:00</updated>
    <id>http://zerosalife.github.io/blog/2016/01/09/mocking-gameobjects-in-unity-unit-tests</id>
    <content type="html"><![CDATA[<p>A while back, I wrote a post about <a href="https://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/">unit testing in Unity</a>.  In this post, I&rsquo;ll go through a useful pattern to <a href="https://en.wikipedia.org/wiki/Mock_object">mock</a> <code>GameObject</code>s in unit tests.</p>

<!--more-->


<h2>Make a GameObject</h2>

<p>We can create a <code>GameObject</code> inside a test just like we would normally inside a Unity script.</p>

<p><code>csharp
GameObject testGo = new GameObject("test");
</code></p>

<p>Passing a string to <a href="https://docs.unity3d.com/ScriptReference/GameObject-ctor.html">the <code>GameObject</code> constructor</a> gives the <code>GameObject</code> that name.</p>

<h2>We can even Instantiate prefabs</h2>

<p>Since our test is not inheriting <code>MonoBehaviour</code>, we&rsquo;ll have to call the Instantiate function directly, using the fully qualified namespace.</p>

<p>Remember that prefabs are just stored <code>GameObject</code>s, so we can use the <code>testGo</code> created above as our prefab.</p>

<p>```csharp
GameObject go = UnityEngine.Object.Instantiate(testGo,</p>

<pre><code>                                           Vector3.zero,
                                           Quaternion.identity) as GameObject;
</code></pre>

<p>```</p>

<h2>Clean up</h2>

<p>We can create <code>GameObjects</code>, but repeatedly running the test leaves our project cluttered up with old objects.  We want our tests to clean up all mocked objects after running.  We&rsquo;ll do that using by using the fully qualified <a href="https://docs.unity3d.com/ScriptReference/Object.DestroyImmediate.html"><code>DestroyImmediate</code> function</a>.</p>

<p>We need to call <code>DestroyImmediate</code> instead of <code>Destroy</code> because the unit tests are running in the editor and delayed destruction won&rsquo;t be invoked.</p>

<p><code>csharp
UnityEngine.Object.DestroyImmediate(go);
UnityEngine.Object.DestroyImmediate(testGo);
</code></p>

<h2>Mocking is easy</h2>

<p>Following this pattern will give you the ability to mock objects to your hearts' delight as you unit test your Unity code.  As, always let me know if you have questions, comments, or concerns below or on <a href="https://twitter.com/zerosalife">twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking GameObjects in Unity Unit Tests]]></title>
    <link href="http://zerosalife.github.io/blog/2015/10/31/mocking-gameobjects-in-unity-unit-tests/"/>
    <updated>2015-10-31T09:03:57-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/10/31/mocking-gameobjects-in-unity-unit-tests</id>
    <content type="html"><![CDATA[<p>A while back, I wrote a post about <a href="http://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/">unit testing in Unity</a>.  In this post, I&rsquo;ll go through a useful pattern to <a href="https://en.wikipedia.org/wiki/Mock_object">mock</a> <code>GameObject</code>s in unit tests.</p>

<!--more-->


<h2>Make a GameObject</h2>

<p>We can create a <code>GameObject</code> inside a test just like we would normally inside a Unity script.</p>

<p><code>csharp
GameObject testGo = new GameObject("test");
</code></p>

<p>Passing a string to <a href="http://docs.unity3d.com/ScriptReference/GameObject-ctor.html">the <code>GameObject</code> constructor</a> gives the <code>GameObject</code> that name.</p>

<h2>We can even Instantiate prefabs</h2>

<p>Since our test is not inheriting <code>MonoBehaviour</code>, we&rsquo;ll have to call the Instantiate function directly, using the fully qualified namespace.</p>

<p>Remember that prefabs are just stored <code>GameObject</code>s, so we can use the <code>testGo</code> created above as our prefab.</p>

<p>``` csharp
GameObject go = UnityEngine.Object.Instantiate(testGo,</p>

<pre><code>                                           Vector3.zero,
                                           Quaternion.identity) as GameObject;
</code></pre>

<p>```</p>

<h2>Clean up</h2>

<p>We can create <code>GameObject</code>s, but repeatedly running the test leaves our project cluttered up with old objects.  We want our tests to clean up all mocked objects after running.  We&rsquo;ll do that using by using the fully qualified <a href="http://docs.unity3d.com/ScriptReference/Object.DestroyImmediate.html"><code>DestroyImmediate</code> function</a>.</p>

<p>We need to call <code>DestroyImmediate</code> instead of <code>Destroy</code> because the unit tests are running in the editor and delayed destruction won&rsquo;t be invoked.</p>

<p><code>csharp
UnityEngine.Object.DestroyImmediate(go);
UnityEngine.Object.DestroyImmediate(testGo);
</code></p>

<h2>Mocking is easy</h2>

<p>Following this pattern will give you the ability to mock objects to your hearts' delight as you unit test your Unity code.  As, always let me know if you have questions, comments, or concerns below or on twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using  LINQ queries and lambda expressions in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/10/17/using-linq-queries-and-lambda-expressions-in-unity-c-sharp/"/>
    <updated>2015-10-17T11:26:32-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/10/17/using-linq-queries-and-lambda-expressions-in-unity-c-sharp</id>
    <content type="html"><![CDATA[<p>Unity&rsquo;s C# environment includes access to .NET&rsquo;s powerful <a href="https://en.wikipedia.org/wiki/Language_Integrated_Query">LINQ querying expressions</a>.  In this post I&rsquo;ll show how to use LINQ expressions to call anonymous functions.</p>

<!--more-->


<h2>Use the lambda</h2>

<p>In the following examples, I&rsquo;ll be using <a href="https://msdn.microsoft.com/en-us/library/bb397687.aspx">lambda expressions</a> to specify anonymous functions that I will pass as arguments to the LINQ expressions.</p>

<p>C# uses the <code>=&gt;</code> symbol as an operator to create lambda expressions.</p>

<p>For example,</p>

<p><code>csharp
x =&gt; x + 1;
</code></p>

<p>says, create an anonymous function taking a single argument <code>x</code> and return the value of <code>x + 1</code>.</p>

<h2>Increment an array</h2>

<p>Say I want to use my anonymous function to increment an array of counters when a tick passes in my game.</p>

<p>```csharp
int[] counters = new int[] {0, 1, 2, 3};</p>

<p>int[] tick(int[] counters) {</p>

<pre><code>int[] ret = new int[counters.Length];
for(int i = 0; i &lt; counters.Length; i++) {
    ret[i] = counters[i] + 1;
}
return ret;
</code></pre>

<p>}</p>

<p>tick(counters);
```</p>

<p>I could iterate over the array, incrementing each of the counters one at a time.</p>

<p>Or I could use LINQ expressions to map a function that increments an element over the array.</p>

<p>```csharp
int[] tick(int[] counters) {</p>

<pre><code>return counters.Select(x =&gt; x + 1).ToArray();
</code></pre>

<p>}
```</p>

<p>This approach has the benefit of avoiding an intermediate temporary variable to hold the returned array.  It also avoids potential errors in writing the <code>for</code> statement.  It will never be off by one.</p>

<p>I find the use of higher order functional style, the LINQ expression, easier to read than the imperative style, the <code>for</code> statement.</p>

<p>One final thing to point out is that <code>Select()</code> returns an <code>IEnumerable</code>, so you have to call its <code>.ToArray</code> method to return the proper integer array for the <code>tick</code> function.</p>

<h2>Conclusion</h2>

<p>Check out the <a href="https://gist.github.com/zerosalife/7abc16fb21dfb05dc771">example code on github</a>.</p>

<p>I&rsquo;ve only shown a tiny subset of the <a href="http://www.dotnetperls.com/linq">functionality that LINQ provides</a>.  Feel free to let me know if you dig in and find more useful tips.</p>
]]></content>
  </entry>
  
</feed>
