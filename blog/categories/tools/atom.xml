<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2015-10-10T13:33:56-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Symbolic Links to Share Scripts Across Unity Projects]]></title>
    <link href="http://zerosalife.github.io/blog/2015/10/10/symbolic-links-to-share-scripts-across-unity-projects/"/>
    <updated>2015-10-10T13:27:14-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/10/10/symbolic-links-to-share-scripts-across-unity-projects</id>
    <content type="html"><![CDATA[<p>I like to develop utility scripts in a common project where I can implement unit tests without cluttering up my game projects with <a href="https://www.assetstore.unity3d.com/en/#!/content/13802">UnityTestTools</a> and duplicated test scripts.  If you&rsquo;re not sure what unit tests are, check out <a href="http://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/">this post I wrote about them</a>.</p>

<p>To share code between projects I use <a href="https://en.wikipedia.org/wiki/Symbolic_link">symlinks</a> to link the files from my utility project to individual games.</p>

<!--more-->


<p>I&rsquo;m doing development on Mac OS X.  Other platforms may use different commands to create symbolic links.</p>

<pre><code>ln -s [source file] [destination file]
</code></pre>

<p>This command creates a symbolic link to the <code>[source file]</code> at the <code>[destination file]</code>.</p>

<p>That way, my I know my games will always use the up-to-date code.</p>

<h2>git Gotcha</h2>

<p>One caveat is that the symlinked files show up in git version control as a blob of the filepath text instead of the actual code of the file.  This means that the symlinked files will not be tracked in the destination project&rsquo;s version control history.</p>

<p>That&rsquo;s okay with me, because I plan on developing the symlinked files in a separate parallel test project with all of their unit tests, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing in Unity]]></title>
    <link href="http://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/"/>
    <updated>2015-10-03T09:44:58-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity</id>
    <content type="html"><![CDATA[<p>How to use UnityTestTools to create unit tests for Unity CSharp</p>

<!--more-->


<h2>Setting it up</h2>

<p>Download the <a href="https://www.assetstore.unity3d.com/en/#!/content/13802">UnityTestTools package</a> from the Unity Asset Store.</p>

<h2>Import the package</h2>

<p>We are going to need the <code>Common</code>, <code>Assertion</code>, and <code>UnitTesting</code> directories.</p>

<h2>Create a Tests directory</h2>

<p>We need a place for the tests to live.</p>

<p>One important thing to remember is that the scripts in the <code>Tests</code> directory need to be accessible by the <code>UnityTestTools</code> in the Editor so we&rsquo;ll put them in <code>./Tests/Editor/</code>.</p>

<h2>Make a namespace</h2>

<p><code>UnityTestTools</code> will organize our tests by top-level <code>namespace</code> declarations defined in each of the tests' files.  Then we follow it up with a <code>Category</code> attribute that names the category of tests that live inside the <code>internal class</code> we define in the namespace.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>./Tests/Editor/ExampleTests.cs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">ExampleTests</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;[</span><span class="n">Category</span><span class="p">(</span><span class="s">&quot;Example Tests&quot;</span><span class="p">)]</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">ExampleTests</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// tests go here</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Test attributes</h2>

<p>Use the <code>[TestFixture]</code> and <code>[Test]</code> attributes to let the Unity Test Tools Unit Test Runner know where your tests are.</p>

<p>You can also use the <code>[Category]</code> attribute to add semantic labels to your tests.</p>

<h2>Making assertions</h2>

<p>The Testing Framework uses the out of date NUnit version <code>2.2.10</code></p>

<p>For reference see: <a href="http://www.nunit.org/index.php?p=assertions&amp;r=2.2.10">http://www.nunit.org/index.php?p=assertions&amp;r=2.2.10</a></p>

<h2>An example test</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>./Tests/Editor/ExampleTests.cs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">ExampleTests</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;[</span><span class="n">Category</span><span class="p">(</span><span class="s">&quot;Example Tests&quot;</span><span class="p">)]</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">ExampleTests</span> <span class="p">{</span>
</span><span class='line'><span class="na">    [Test]</span>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Example</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="m">1</span> <span class="p">+</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Actually run the tests</h2>

<p>Open the Unit Test window from the editor:</p>

<ul>
<li>Click on the <code>Unity Test Tools</code> menu</li>
<li>Select <code>Unit Test Runner</code></li>
</ul>


<p>You can also open the Unit Test Runner window with the keyboard shortcut <code>Alt-Cmd-Shift-U</code> on a Mac.</p>

<p>Simply, click on the <code>Run All</code> button to run the tests.</p>

<h2>Going further</h2>

<p><a href="https://www.assetstore.unity3d.com/en/#!/content/13802">Unity Test Tools</a> has support for Integration tests and assertions in addition to the vanilla unit test I described above.</p>

<p>There are plenty of features that I haven&rsquo;t covered here, so dig in to the examples that come with the Unity Test Tools package and let me know what you&rsquo;ve learned in the comments below or on twitter <a href="http://twitter.com/zerosalife">@zerosalife</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Google Docs for mock-ups]]></title>
    <link href="http://zerosalife.github.io/blog/2015/09/26/using-google-docs-for-mock-ups/"/>
    <updated>2015-09-26T08:40:47-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/09/26/using-google-docs-for-mock-ups</id>
    <content type="html"><![CDATA[<p><a href="https://www.google.com/docs/about/">Google Docs</a> is great for mock-ups.  But one major drawback is that <a href="http://drawings.google.com">Google Drawings</a> doesn&rsquo;t support animation or multiple pages.  Luckily, the same suite of tools is available in Google&rsquo;s <a href="https://www.google.com/slides/about/">Slides app</a>.</p>

<!--more-->


<h2>My workflow</h2>

<p>Since I&rsquo;m not a big fan of the cluttered Slides interface, I sketch my mock-ups in Draw and copy them over to Slides.</p>

<p>Using this approach, I rapidly iterate on mock-ups in Draw while keeping a record of the good looking ones as slides in Slides.  As a bonus, I can then shuffle the order of the slides to animate dynamic designs.</p>

<p>I find that this workflow is in keeping with <a href="http://draplin.com/">Draplin Design Co.</a> owner <a href="https://vimeo.com/113751583">Aaron Draplin&rsquo;s design philosophy</a>: space is cheap, so feel free to experiment and keep everything because you never know what will influence the final design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using images in Octopress posts]]></title>
    <link href="http://zerosalife.github.io/blog/2015/08/29/using-images-in-octopress-posts/"/>
    <updated>2015-08-29T17:20:05-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/08/29/using-images-in-octopress-posts</id>
    <content type="html"><![CDATA[<h2>Storing the images</h2>

<p>I store images in <code>./images/assets/</code> in my Octopress install directory.  They get bundled up with all the other parts of my blog when I deploy.</p>

<h2>The Octopress image tag</h2>

<p>I use the <a href="http://octopress.org/docs/plugins/image-tag/">Octopress image tag</a></p>

<p>The syntax is:</p>

<pre><code>{[%] img [class names] /path/to/image [width] [height] [title text [alt text]] [%]}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# code blocks in Octopress]]></title>
    <link href="http://zerosalife.github.io/blog/2015/08/15/c-sharp-code-blocks-in-octopress/"/>
    <updated>2015-08-15T08:59:19-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/08/15/c-sharp-code-blocks-in-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">Octopress</a> supports <a href="http://octopress.org/docs/plugins/backtick-codeblock/">backtick code blocks</a> with <a href="http://pygments.org/docs/lexers/">Pygment lexers</a> handling syntax highlighting.  I always forget the syntax for using with bactick codeblocks with C#, leading to irritating failures when I build my Octopress blog.  Here&rsquo;s how you use them.</p>

<pre><code>``` csharp
[csharp code here]
```
</code></pre>
]]></content>
  </entry>
  
</feed>
