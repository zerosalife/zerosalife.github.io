<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mechanics | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/mechanics/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2015-04-04T14:12:59-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Math Team Hearts]]></title>
    <link href="http://zerosalife.github.io/blog/2015/03/14/math-team-hearts/"/>
    <updated>2015-03-14T14:14:29-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/03/14/math-team-hearts</id>
    <content type="html"><![CDATA[<p>Math Team Hearts is a speedy modification to Hearts that ironically involves less math than the vanilla game.</p>

<!--more-->


<p>From <a href="http://www.crcpress.com/product/isbn/9781482217162">Game Design Workshop</a> by <a href="https://twitter.com/kinojabber">Tracy Fullerton</a>:</p>

<blockquote><p>One good way to train yourself in the design of game mechanics is to challenge yourself with controlled design exercises in which you take an existing game system, set a new player experience goal, and make changes to the system to meet that goal.</p></blockquote>

<h2>The Goal</h2>

<p>We needed a game that played quickly, without a defined endpoint (e.g. when one player reaches 100 points in normal <em>Hearts</em>) because this game was played in free time waiting for school to start or waiting for the bus.  There was no time to spend tallying up scores, counting hearts and doing awkward math.</p>

<p>The rules also modify the risk-reward value of shooting the moon to make it more attractive.  We found the game to be more interesting when multiple parties were invested in shooting the moon with less drawback from accumulating hearts.</p>

<h2>The Rules</h2>

<p>The game plays like normal <em><a href="http://en.wikipedia.org/wiki/Hearts">Hearts</a></em>, except taking <strong>hearts</strong> no longer gives you points.</p>

<ul>
<li>Taking any number of <strong>hearts</strong> without <strong>shooting the moon</strong> gives you 0 points.</li>
<li>Taking no <strong>hearts</strong> in a round gives you 1 point.</li>
<li><strong>Shooting the moon</strong> gives you 2 points.</li>
<li>Taking the <strong>queen of spades</strong> without <strong>shooting the moon</strong> gives you -1 point.</li>
</ul>


<p>The <strong>player</strong> with the most points at the end of play wins.</p>

<p>For more variety, use <strong>dealer</strong>&rsquo;s choice drafting rules.  Each round, the <strong>dealer</strong> decides on how players will pass cards prior to play.
<strong>Players</strong> take turns dealing.</p>

<h2>Tweaks</h2>

<p>I&rsquo;m working from memory, so I&rsquo;m not sure I&rsquo;ve got the point values exactly right.  Perhaps there should be more of a penalty for taking the Queen without shooting the moon.  That would create a more exciting risk-reward trade-off.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Mind-reading Machine in Unity JavaScript]]></title>
    <link href="http://zerosalife.github.io/blog/2014/12/13/simple-mind-reading-machine-in-unity-javascript/"/>
    <updated>2014-12-13T14:38:20-06:00</updated>
    <id>http://zerosalife.github.io/blog/2014/12/13/simple-mind-reading-machine-in-unity-javascript</id>
    <content type="html"><![CDATA[<p>I ported a cool toy from <a href="http://alastaira.wordpress.com/2014/03/15/a-simple-mind-reading-machine/">Alastair Aitchison&rsquo;s blog</a> to Unity JavaScript.  The toy implements a simple &lsquo;mind-reading&rsquo; algorithm that attempts to guess whether the player will choose Left (by pressing the left arrow key) or Right (by pressing the right arrow key).</p>

<!--more-->


<h2>How does it work?</h2>

<p>Aitchison&rsquo;s blog post describes how it works:</p>

<blockquote><p>How does it work? Not by mind-reading, obviously, but by exploiting
the fact that humans do not behave as &ldquo;randomly&rdquo; as they think they
do. The computer maintains a very simple memory that records the
pattern of results of the last two rounds â€“ whether the player won or
lost, whether they switched strategy, and then whether they then won
or last the following round. The computer then uses this to choose its
own best strategy based on the way the player behaved last time the
current pattern occurred. If the computer loses twice in a row using
the current strategy, it picks a random response in the next round.</p></blockquote>

<p>The original idea came from some AI work by <a href="http://en.wikipedia.org/wiki/Claude_Shannon">Claude Shannon</a> and D. W. Hagelbarger. <a href="http://cs.stanford.edu/people/eroberts/courses/soco/projects/1999-00/information-theory/ai.html">They describe the internal memory of the toy mind-reader</a> that we will model using a multidimensional array <code>v</code>:</p>

<blockquote><p>There are 8 possible situations and two things the player can do at each one:</p>

<ol>
<li><p>player wins, plays same, wins. Then same or differently.</p></li>
<li><p>player wins, plays same, loses. Then same or differently.</p></li>
<li><p>player wins, plays differently, wins. Then same or differently.</p></li>
<li><p>player wins, plays differently, loses.Then same or differently.</p></li>
<li><p>player loses, plays same, wins.Then same or differently.</p></li>
<li><p>player loses, plays same, loses.Then same or differently.</p></li>
<li><p>player loses, plays differently, wins.Then same or differently.</p></li>
<li><p>player loses, plays differently, loses.Then same or differently.</p></li>
</ol>
</blockquote>

<h2>Why port it?</h2>

<p>Why not just take a straightforward approach, running the code myself? First, I wanted to fully understand the algorithm the hard way, by coding it line for line myself. And second, I wanted to better familiarize myself with Unity JavaScript, including its differences from C#.</p>

<p>The port was relatively simple, except for two small hiccups.  First, as far as I know, Unity JavaScript doesn&rsquo;t allow for initializing a multidimensional array.  So I looped over the cells in the array, filling them that way.  I have a hunch that the cells are initialized to the <code>int</code> <code>0</code> by default, but I wanted to be explicit.  Please let me know in the comments or <a href="https://twitter.com/zerosalife">via twitter</a> if I&rsquo;m way off base.</p>

<pre><code>var v : int[2, 2, 2];
for(var cell in v) {
    cell = 0;
}
</code></pre>

<p>I also encountered some unfamiliar syntax: the sonorously named Elvis operator, <a href="http://en.wikipedia.org/wiki/Conditional_operator">?:</a>.  It&rsquo;s also called the <a href="http://en.wikipedia.org/wiki/Ternary_operation">ternary operator</a>, when it&rsquo;s used with 3 arguments, as I&rsquo;ve used it here.  In C-like languages it allows for succinctly stating these kinds of conditional expressions. The example below illustrates how it&rsquo;s used.</p>

<pre><code>// Is the current player's choice the same as the previous player's
// choice?
//
// if (playerChoice == lastChoice)
//     sameChoice = True;
// else
//     sameChoice = False;
//
// Using ternary operator:
v[lw2, lw1, 1] = (v[lw2, lw1, 0] == playerChoice ? 1 : 0);
</code></pre>

<h2>The code</h2>

<p>The ported code for the mind-reader is reproduced below.</p>

<pre><code>#pragma strict
import System.Collections.Generic;

// Used to record play history
var v: int[,,];
var lw1: int;
var lw2: int;
var losingStreak: int;

// The prediction of the player's next turn
var prediction: int;

// Keep track of scores
var cpuScore: int;
var playerScore: int;

var outText: String;

function Start () {
    // Initialize matrix to track state of play history

    v = new int[2, 2, 2];

    for(var cell in v) {
        cell = 0;
    }

    // No prior knowledge, so set inital prediction based on random chance.
    prediction = flip();

    // Set scores to 0
    cpuScore = 0;
    playerScore = 0;

    // Initialize previous play and play before last win-lost trackers
    lw1 = 0;
    lw2 = 0;

    // Output
    outText = "";
}

function TakeTurn(playerChoice: int) {
    // Display player and computer's choices
    var outTextString: String = "You pressed " + playerChoice + ", " + "I guessed " + prediction + "\n";

    // Computer guessed correctly
    if (playerChoice == prediction) {
        cpuScore++;
        losingStreak = 0;
        outTextString += " I WIN!\n";
    }
    else {
        playerScore++;
        losingStreak++;
        outTextString += " YOU WIN!\n";
    }

    outText = outTextString;

    // Is the current player's choice the same as the previous player's
    // choice?
    //
    // if (playerChoice == lastChoice)
    //     sameChoice = True;
    // else
    //     sameChoice = False;
    //
    // Using ternary operator:
    v[lw2, lw1, 1] = (v[lw2, lw1, 0] == playerChoice ? 1 : 0);
    v[lw2, lw1, 0] = playerChoice;
    lw2 = lw1;
    lw1 = playerChoice;

    // If lost more than twice in present state, choose random
    // strategy.  Otherwise keep the same strategy.
    prediction = v[lw2, lw1, 1] == 1 &amp;&amp; losingStreak &lt; 2 ? v[lw2, lw1, 0] : flip();
}

function flip() : int {
    // Simulate a coin flip to produce 50:50 chance of [0, 1]
    return Random.Range(0, 2);
}


function Update () {
    if (Input.GetKeyDown(KeyCode.LeftArrow)) {
        TakeTurn(0);
    }
    if (Input.GetKeyDown(KeyCode.RightArrow)) {
        TakeTurn(1);
    }
}

function OnGUI() {
    var style : GUIStyle = new GUIStyle();
    style.fontSize = 36;

    GUI.Label(new Rect(0, 0, Screen.width, 100), outText, style);
    GUI.Label(new Rect(0, 100, Screen.width, 200), "Player: " + playerScore + " CPU: " + cpuScore, style);
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Procjam review]]></title>
    <link href="http://zerosalife.github.io/blog/2014/11/29/procjam-review/"/>
    <updated>2014-11-29T09:33:47-06:00</updated>
    <id>http://zerosalife.github.io/blog/2014/11/29/procjam-review</id>
    <content type="html"><![CDATA[<p>Looking through the entries, I could only spend a minute or two with each entry.  It helped if the game ran in my browser, so HTML and Unity were big.  Here are some of the games that caught my eye.</p>

<!--more-->


<h2>The top two</h2>

<h2>JET/LAG</h2>

<p>Simple instructions: &ldquo;Click to move. Kill enemies by bashing them.&rdquo;  There may be little to <em><a href="http://svblm.itch.io/jet-lag">JET/LAG</a></em>, but its excellent stylish visuals set this entry apart for me.  A CRT-like distortion bends the corners of the screen complete with scrolling scan lines, while multi-colored text oscillates above a simple square.  The simple square is your character battering your way through procedurally generated maze-like levels.</p>

<p>There&rsquo;s no fancy art in this game, all the characters are made from simple shapes.  But that doesn&rsquo;t stop the graphics from impressing.  It&rsquo;s clear that <a href="https://twitter.com/JakeCataford">@JakeCataford</a> turned the juice up to 11, and it works.  The game feels great.</p>

<p>As a &ldquo;rogue-like like like&rdquo; you may expect it to be deviously hard, and you&rsquo;d be right.  But the controls are responsive and the enemies telegraph their moves, so you feel like you are learning something with each death.  <a href="https://twitter.com/JakeCataford">@JakeCataford</a> clearly understands some fundamentals of engaging game design and I&rsquo;m excited to see what&rsquo;s coming up next.</p>

<h2>DUNGEN [star]</h2>

<p>A multi-jam entry for <a href="http://itch.io/jam/procjam">#procjam</a>, <a href="http://itch.io/jam/paper-jam-1">#paperjam</a>, and <a href="http://7dfps.com/">#7dfps</a> by <a href="https://twitter.com/JctWood">@jctwood</a>, this first person shooter uses shuffling to generate a dynamic dungeon with each play-through.  I like the simplicity of the mechanics <a href="https://twitter.com/JctWood">@jctwood</a> has designed.  Stats on a 1-10 scale can be just as interesting as stats in the thousands.  There are even multiple skin options for the protagonist&rsquo;s hand.  That&rsquo;s more advanced than all three <em><a href="http://en.wikipedia.org/wiki/Doom_%2528series%2529">DOOM</a></em>s.</p>

<p>I think I&rsquo;m most interested in the literal realization of the procedural generation algorithm.  By shuffling the cards the procedural generation of the dungeon is clear both to designer and player, and this type of randomization has been used for many years in many games with standard and nonstandard sets of cards.  I&rsquo;m interested in seeing how this shuffling mechanic, both literal and metaphorical, can be leveraged to encourage new avenues of play in the future.  I can imagine tuning some aspects of a proc gen algorithm by exposing the contents to the player as a deck of cards, both literally as is typical in CCGs and other tabletop games and as a metaphor for abstraction of systems in a video game.</p>

<h2>Favorite games</h2>

<ul>
<li><a href="http://svblm.itch.io/jet-lag">JET/LAG</a>

<ul>
<li>Bump or get bumped.  Excellent style and great graphics.  Very
juicy!</li>
</ul>
</li>
<li><a href="http://lissar.itch.io/peregrin">Peregrin</a>

<ul>
<li>Beautiful.</li>
</ul>
</li>
<li><a href="http://entropyphi.itch.io/nauticalith">Nauticalith</a>

<ul>
<li>Simple, but really conveys a sense of scale.  Adding some mechanic
like dynamic wind that affects sailing could put this over the
top.</li>
</ul>
</li>
<li><a href="http://tfurmanskigmailcom.itch.io/forska-web-version">Forska</a>

<ul>
<li>Great shader.  Generate some <em><a href="http://wikipedia.com/wiki/Myst">Myst</a></em>-like puzzles and you&rsquo;ve got a game, here.</li>
</ul>
</li>
<li><a href="http://8-bit-ape.itch.io/infinity-explorer">Infinity Explorer</a>

<ul>
<li>Reminds me of <em><a href="http://en.wikipedia.org/wiki/Magic_Carpet_%28video_game%29">Magic Carpet</a></em>.</li>
</ul>
</li>
<li><a href="http://jctwood.itch.io/dungen">DUNGEN star</a>

<ul>
<li>Print and play games are great.</li>
</ul>
</li>
</ul>


<h2>Favorite generators</h2>

<ul>
<li><a href="http://nihilocrat.itch.io/nodemancer">http://nihilocrat.itch.io/nodemancer</a>

<ul>
<li>Interesting.  Will have to look more into it.  Now that I think
about it, this one deserves an honorable mention for favorite tool
of the jam.  I will revisit it in depth in a later post because the
generation algorithm looks like an idea I&rsquo;ve batted around in my
head.</li>
</ul>
</li>
<li><a href="http://diaspora-colonies.herokuapp.com/">http://diaspora-colonies.herokuapp.com/</a>

<ul>
<li>Useful and cool!  Check out <a href="http://ptychomancer.itch.io/diaspora">http://ptychomancer.itch.io/diaspora</a>
for some more background on this space colony generator.</li>
</ul>
</li>
<li><a href="http://eduardo.itch.io/procedural-fabrics">http://eduardo.itch.io/procedural-fabrics</a>

<ul>
<li>Clever tiling textures using diagonal lines that really break up
the patterns to make it more pleasing to the eye.</li>
</ul>
</li>
<li><a href="http://ibol17.itch.io/procedural-pixel-monsters">http://ibol17.itch.io/procedural-pixel-monsters</a>

<ul>
<li>Artistic style.  Simple color palette still allow for a variety of
expressive monsters. Interested in following up on the
procedural tree generationâ€“looks great!</li>
</ul>
</li>
<li><a href="https://github.com/cutgarnetgames/gaia">https://github.com/cutgarnetgames/gaia</a>

<ul>
<li>Beautiful world generator with some source code worth digging
into.</li>
</ul>
</li>
<li><a href="http://gillianms.itch.io/hoopla">http://gillianms.itch.io/hoopla</a>

<ul>
<li>Really think there&rsquo;s something to explore in pixels-as-stitches
graphics.</li>
</ul>
</li>
<li><a href="http://aerique.itch.io/rocks-bitch">http://aerique.itch.io/rocks-bitch</a>

<ul>
<li>The pet rock generator I always wanted!</li>
</ul>
</li>
<li><a href="http://playcrafts.itch.io/palette-generator">http://playcrafts.itch.io/palette-generator</a>

<ul>
<li>Useful.</li>
</ul>
</li>
<li><a href="http://tccoxon.itch.io/dreamer">http://tccoxon.itch.io/dreamer</a>

<ul>
<li>Weird hybrid between an AI and a text adventure, but very
  creative and very cool.</li>
</ul>
</li>
<li><a href="http://itch.io/jam/procjam/rate/14026">http://itch.io/jam/procjam/rate/14026</a>

<ul>
<li>Great concept, but I need remedial lessons or a tutorial.  One to
revisit when I can really dig into it.</li>
</ul>
</li>
</ul>


<h2>Cool looking Windows games I couldn&rsquo;t play</h2>

<ul>
<li><a href="http://crabowitz.itch.io/key-geist">http://crabowitz.itch.io/key-geist</a>

<ul>
<li>Reminds me of <em><a href="http://en.wikipedia.org/wiki/The_Wonderful_101">Wonderful 101</a></em>â€“a game I haven&rsquo;t played, but probably should.  Something about the aesthetic of dozens of little flocking characters appeals to me.</li>
</ul>
</li>
<li><a href="http://caseportman.itch.io/riser">http://caseportman.itch.io/riser</a>

<ul>
<li>Looks like it controls well</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[procjam comedown]]></title>
    <link href="http://zerosalife.github.io/blog/2014/11/22/procjam-comedown/"/>
    <updated>2014-11-22T13:26:16-06:00</updated>
    <id>http://zerosalife.github.io/blog/2014/11/22/procjam-comedown</id>
    <content type="html"><![CDATA[<p>Now that two weeks have passed (a geologic era in internet time), I&rsquo;m ready begin to look back on the <a href="https://twitter.com/hashtag/procjam">#procjam</a> talks and the entries to the jam that caught my eye.  I&rsquo;ve been very busy lately working on my own submissions <a href="http://zerosalife.github.io/blog/2014/11/08/insceptahdeckwu/">INSceptahdeckwu</a> and <a href="http://zerosalife.github.io/blog/2014/11/15/patchwerk/">Patchwerk</a>, among other commitments, so this is by no means an exhaustive look at everything in #procjam.</p>

<!--more-->


<p>Since I actually have no time at all to write a full retrospective, I&rsquo;ll have to be brief.  This post will have to serve as a collection of links and notes until I get a chance to look back in detail.  It&rsquo;s by no means complete, as I&rsquo;m still looking over all of the great entries to #procjam.  I enjoyed the interactions with the speakers and participants.  Unfortunately other commitments may occupy my time through the end of the year, so don&rsquo;t worry if the blogging is intermittent.  I&rsquo;ll revisit the #procjam talks and the submissions when I find time.</p>

<h2>Great ideas</h2>

<p><a href="https://twitter.com/PNJeffries/status/531592288733261824">https://twitter.com/PNJeffries/status/531592288733261824</a></p>

<p><a href="https://twitter.com/redblobgames/status/527485845616340992">https://twitter.com/redblobgames/status/527485845616340992</a></p>

<p><a href="https://twitter.com/mtthwcmpbll/status/527881936178778113">https://twitter.com/mtthwcmpbll/status/527881936178778113</a></p>

<p><a href="https://twitter.com/DragonXVI/status/531078933161476096/photo/1">https://twitter.com/DragonXVI/status/531078933161476096/photo/1</a></p>

<p><a href="https://twitter.com/TomNullpointer/status/531108417096916992">https://twitter.com/TomNullpointer/status/531108417096916992</a></p>

<p><a href="http://chrismwaite.github.io/procjam/">http://chrismwaite.github.io/procjam/</a></p>

<p><a href="https://github.com/chrismwaite/procjam/blob/gh-pages/app.js">https://github.com/chrismwaite/procjam/blob/gh-pages/app.js</a></p>

<p><a href="http://renderingpipeline.com/2013/01/adding-analog-inputs-to-your-graphics-app/">http://renderingpipeline.com/2013/01/adding-analog-inputs-to-your-graphics-app/</a></p>

<p><a href="https://github.com/keijiro/unity-midi-input">https://github.com/keijiro/unity-midi-input</a></p>

<p><a href="http://cgaudino.itch.io/tailgunner">http://cgaudino.itch.io/tailgunner</a></p>

<p><a href="https://github.com/civilframe/node-spacegame-ship-gen">https://github.com/civilframe/node-spacegame-ship-gen</a></p>

<p><a href="http://jctwood.itch.io/dungen">http://jctwood.itch.io/dungen</a></p>

<h2>Good tutorials</h2>

<p>Some tutorials I came across during the jam:</p>

<p><a href="http://procjam.tumblr.com/post/99689402659/procedural-generation-tutorials-getting-started">http://procjam.tumblr.com/post/99689402659/procedural-generation-tutorials-getting-started</a></p>

<p><a href="https://twitter.com/alexjc/status/531077005815869440">https://twitter.com/alexjc/status/531077005815869440</a></p>

<p><a href="http://samatkins.co.uk/blog/2014/11/08/procjam-procedural-building-generation/">http://samatkins.co.uk/blog/2014/11/08/procjam-procedural-building-generation/</a></p>

<h2>Talks</h2>

<p>Here are my notes on the talks that I had a chance to see.  In lieu of writing anything up, I&rsquo;ll post them here for now.</p>

<h3>Overall themes</h3>

<ul>
<li>Meaning over randomness</li>
<li>Scale and direction

<ul>
<li>Layering</li>
<li>Deck metaphor really nice for prototyping.</li>
<li>Great question, how do you make sure the player is not lost in
this huge history.  Player only aware of history of own house,
data is gathered by reading books etc.; there&rsquo;s some context for
the entrance of new bits of history.  Books are populated in
places where it makes sense for them to turn up.</li>
<li>Top-down (designer first) is easier than bottom-up (player first;
shout out to <a href="https://twitter.com/gillianmsmith">@gillianmsmith</a> for this formulation).  Callbacks?
How to percolate up from lower elements on tree?</li>
</ul>
</li>
<li>Storytelling as divination</li>
<li><a href="https://github.com/dariusk/NaNoGenMo">NaNoGenMo</a></li>
<li>Flow in procedural generation

<ul>
<li>Meaning, codifying design principlse</li>
<li><a href="http://artofgamedesign.com/">Art of Game Design by Jesse Schell</a></li>
<li>a feeling of complete and energized focus in an activity, with a
high level of enjoyment and fulfillment

<ul>
<li>clear goals</li>
<li>no distractions

<ul>
<li>How does this figure into open world distraction fests like
triple a sandbox games?</li>
</ul>
</li>
<li>feedback</li>
<li>continuously challenging</li>
</ul>
</li>
<li>Frustration vs. boredom, find a balance</li>
<li>Dynamic

<ul>
<li>Scale enemy level to meet player&rsquo;s level</li>
<li>AI director, see when the player is overwhelmed, drop difficulty;
boredom spawn more enemies.  Requires some kind of metric</li>
</ul>
</li>
<li>Static

<ul>
<li>Lock and key</li>
<li><a href="https://github.com/tcoxon/metazelda">Metazelda</a> calculates difficulty number for each room from desired flow curve.</li>
<li>Love <a href="https://github.com/tcoxon">@tcoxon</a> &rsquo;s thoughts on less backtracking.  Algorithmically respecting players' time.</li>
</ul>
</li>
<li><a href="http://www.gamasutra.com/blogs/ToniSala/20131208/206535/Game_Design_Theory_Applied_The_Flow_Channel.php">Gamasutra Toni Sala</a></li>
</ul>
</li>
<li>Emotion and interactivity &#x2013; expressivity

<ul>
<li>Workflow, ease of adjustment can be good for designer and exposing
the same tools to the player can be fun</li>
</ul>
</li>
</ul>


<h2>itch.io</h2>

<p>It looks like most of the entries are gathered on a <a href="http://itch.io/jam/procjam">#procjam itch.io page</a>.  I have no experience with <a href="http://itch.io/">itch.io</a>, but I think setting up an account and exploring what itch.io has to offer couldn&rsquo;t hurt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play balance for party vs in-depth fighting games]]></title>
    <link href="http://zerosalife.github.io/blog/2014/10/18/play-balance-for-party-vs-in-depth-fighting-games/"/>
    <updated>2014-10-18T10:33:31-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/10/18/play-balance-for-party-vs-in-depth-fighting-games</id>
    <content type="html"><![CDATA[<p>Here I&rsquo;m drawing a comparison between games that are subjectively perceived as party games and games that are more in-depth.  I&rsquo;m avoiding using loaded terms like casual and hardcore, but I think the distinction is likely the same.  Both types of games can be complex, but subtle balancing issues can affect the subjective sense of fun when playing these games.</p>

<p>For discussion I&rsquo;m going to focus on relatively advanced moves in <em><a href="http://www.smashbros.com">Super Smash Bros.</a></em> and <em><a href="http://www.towerfall-game.com/">TowerFall</a></em>: L-canceling and dodge canceling, respectively.  I was inspired to examine this balance issue by a recent tweet by <em>TowerFall</em> creator, and, in the interest of full disclosure, my close personal 3DS friend, <a href="https://twitter.com/MattThorson">@MattThorson</a>.</p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<!--more-->


<p>Thorson previously pointed out an interesting <a href="https://twitter.com/DamianSommer/status/519537228582633473">discussion</a> on the mechanic of L-canceling by <a href="https://twitter.com/DamianSommer/status/519537228582633473">@DamianSommer</a> among others. Sommer wants to focus on how the L-canceling mechanic reflects the design intent of the creators of <em>Super Smash Bros.</em></p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p><a href="https://twitter.com/Sonic9jct">@Sonic9jct</a> highlights the dichotomy that I am exploring here.</p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p><a href="http://supersmashbros.wikia.com/wiki/L-canceling">L-canceling</a> requires extremely precise timing of inputs when the character is in a particular state.  You must press L within 6 frames of landing on the ground while performing an <a href="http://supersmashbros.wikia.com/wiki/Aerial_attack">aerial attack</a>.  Since <em>Super Smash Bros.</em> runs at 60 frames per second, this requires you to press the button within 100 milliseconds of hitting the ground.  To put this in perspective, the average human reaction time is about 250 milliseconds.</p>

<p><a href="https://twitter.com/whatisian">@whatisian</a> brilliantly captures the distinction in design that makes this a more difficult, in-depth, technically demanding mechanic.  If there is no drawback, then the execution of the L-cancel is practically mandatory at high levels of play.</p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p>Let&rsquo;s look at how this differs from <a href="http://steamcommunity.com/sharedfiles/filedetails/?id%3D250779585">dodge canceling</a> in <em>TowerFall</em> a game that Thorson intentionally designed to be welcoming to new players, while still keeping them competitive with skilled players.</p>

<p>Dodge canceling requires similarly herculean inputs to pull off, to perform a dodge cancel you must press the dodge button a second time after initiating a dodge maneuver.  The dodge lasts 367 milliseconds or 22 frames at 60 fps.  This seems like a lot of time to perform the dodge cancel compared to the scant 6 frames for an L-cancel, but there&rsquo;s a catch.  In order to get the most momentum, to carry the most speed through the dodge cancel, you must perform the move on exactly the right frame.</p>

<p>Sounds pretty tough, right?  If you think this would require some impressive technical skills to pull it off, you&rsquo;re right.  But there&rsquo;s a catch, turning or firing from the dodge cancel reduces the character&rsquo;s speed, making the character an easier target.</p>

<p>Thorson&rsquo;s mechanic provides a similar advantage to L-canceling with the addition of the risk of failure.  Dodge cancels could allow the player to zing around the level at will, firing arrows every which way, but Thorson decided to introduce drawbacks for imprecise play that create risks for more advanced players to put them closer to parity with less skilled players.</p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p>These are just my thoughts on this interesting discussion.  I&rsquo;m not a high-level player of either of these games, so I may have missed some of the subtleties to which Thorson or others refer.  If you think I&rsquo;m off the mark, or you just want to weigh in on the merits of designing for &ldquo;party&rdquo; vs. &ldquo;fighting&rdquo; games, drop me a line in the comments or on <a href="https://twitter.com/zerosalife">twitter</a>.</p>
]]></content>
  </entry>
  
</feed>
