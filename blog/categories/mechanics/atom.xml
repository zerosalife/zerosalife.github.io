<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mechanics | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/mechanics/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2017-02-18T10:27:28-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Every Week a Dev]]></title>
    <link href="http://zerosalife.github.io/blog/2017/01/28/every-week-a-dev/"/>
    <updated>2017-01-28T11:21:35-05:00</updated>
    <id>http://zerosalife.github.io/blog/2017/01/28/every-week-a-dev</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/everyweekadev">Every Week a Dev</a> is a twitter bot created by <a href="https://twitter.com/tha_rami">Rami Ismail</a> that spotlights a new person involved in game development every week.  Check out the archives and follow it if you haven&rsquo;t already.  The bot&rsquo;s a great aggregator for gamedev wisdom.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016 Year in Review]]></title>
    <link href="http://zerosalife.github.io/blog/2017/01/07/2016-year-in-review/"/>
    <updated>2017-01-07T10:22:54-05:00</updated>
    <id>http://zerosalife.github.io/blog/2017/01/07/2016-year-in-review</id>
    <content type="html"><![CDATA[<p>Here are some highlights from the previous year:</p>

<ul>
<li><a href="http://zerosalife.github.io/blog/2016/03/19/how-dungeonmans-teaches-diagonal-movement/">How Dungeonmans Teaches Diagonal Movement</a></li>
<li><a href="http://zerosalife.github.io/blog/2016/03/05/proportion-types/">Proportion Types</a></li>
<li><a href="http://zerosalife.github.io/blog/2016/04/23/improvisation-vs-preparation/">Improv vs Preparation</a>

<ul>
<li>This could be a conference talk!</li>
</ul>
</li>
<li><a href="http://zerosalife.github.io/blog/2016/06/18/mobile-frame-football-association/">Mobile Frame Football Association</a>

<ul>
<li>Needs playtesting</li>
</ul>
</li>
<li><a href="http://zerosalife.github.io/blog/2016/08/27/why-does-pokemon-go-use-passive-voice/">Why Does Pokemon GO Use Passive Voice?</a></li>
<li><a href="http://zerosalife.github.io/blog/2016/11/12/arcana-procedurally-generated-tarot-decks/">Arcana: Procedurally Generated Tarot Decks</a></li>
<li><a href="http://zerosalife.github.io/blog/2016/12/03/procedural-generation-of-social-networks/">Procedural Generation of Social Networks</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improvisation vs Preparation]]></title>
    <link href="http://zerosalife.github.io/blog/2016/04/23/improvisation-vs-preparation/"/>
    <updated>2016-04-23T10:44:50-04:00</updated>
    <id>http://zerosalife.github.io/blog/2016/04/23/improvisation-vs-preparation</id>
    <content type="html"><![CDATA[<p><em>Or preparation as play.</em></p>

<p>This post was inspired by long set-up times eating into time-crunched
play time for busy adults.</p>

<p>As a young adult with minimal time commitment I had no problem
spending hours preparing for a gaming session among friends.  And
there was little concern for an hour or two spent setting up a
wargaming afternoon.  But in adulthood these time commitments quickly
eat-in to or completely consume any time that would otherwise be spent
having fun, gaming with your friends.</p>

<p>Certain games are suited more to the <em>preparation</em> side of things than
the <em>improvisation</em> side.</p>

<!--more-->


<p>Consider the examples I mentioned above, a gamemaster driven
roleplaying game and a tabletop war game.  Certainly these are fun
pastimes but they require preparation on the part of the individual or
all parties involved.</p>

<p>Roleplaying games require, at least initially, the generation of
player characters for all involved, potentially consuming the entire
first play session.  The gamemaster is, at least ostensibly, required
to plot out a scenario for each play session, necessitating an
substantial noninteractive time investment outside of the normal play
session.</p>

<p>For war games, players must spend time constructing armies, generally
away from the interaction at the table.</p>

<p>How does this differ from say playing stickball or baseball with your
friends in an alley or a field with just a stick and a ball?  The game
starts when the minimally necessary instruments arrive, and continues
even as players come and go.  Interrupting these improvised games is
an almost heinous offense, hence the saying &ldquo;taking the ball and going
home.&rdquo;</p>

<p>To stretch this metaphor beyond the breaking point: in this syllogism,
the polar opposite of pickup baseball or basketball would be ice
hockey, something requiring potentially hours of preparation by a
Zambonist to prepare the playing surface so the players can play for a
relatively short time.</p>

<p>There are a few games that get preparation as play mechanics right,
but I think there is still room for improvement.</p>

<ul>
<li><p><a href="http://glyphpress.com/talk/shock-pdf">Shock</a></p></li>
<li><p><a href="http://www.evilhat.com/home/fate-core/">Fate</a></p></li>
<li><p><a href="http://www.dog-eared-designs.com/primetime-adventures/">Primetime Adventures</a></p></li>
<li><p><a href="http://www.lamemage.com/microscope/">Microscope</a></p></li>
<li><p><a href="http://planet-thirteen.com/Dungeon.aspx">How to Host a Dungeon</a></p></li>
<li><p><a href="http://bullypulpitgames.com/games/fiasco/">Fiasco</a></p></li>
</ul>


<p>These games all turn the world gen and character background into an
gameplay activity, typically performed during the first group play
session.  Shock and Fiasco even do away with the necessity of a GM,
allowing players to take turns serving as protagonists, antagonists,
or third parties.  These examples go a long way toward what I mean by
preparation as play, but I don&rsquo;t think the games have captured the
concept entirely.</p>

<p>What I would be interested in seeing is a separate <em>asynchronous</em> type
of game, where the preparation has mechanics that boil down to a solo
game.  The results of the each player&rsquo;s solo game(s) are then somehow
incorporated and allowed to influence the collaborative group play
session.  If you know of such a game, drop me a line in the comments
or on <a href="https://twitter.com/zerosalife">twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Skytorn Raycast Lighting Algorithm Details]]></title>
    <link href="http://zerosalife.github.io/blog/2015/05/16/more-skytorn-raycast-lighting-algorithm-details/"/>
    <updated>2015-05-16T12:10:29-04:00</updated>
    <id>http://zerosalife.github.io/blog/2015/05/16/more-skytorn-raycast-lighting-algorithm-details</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/blog/2015/05/09/raycast-lighting-in-skytorn/">Last week</a> I covered the lighting algorithm <a href="https://twitter.com/NoelFB">@NoelFB</a> is implementing for <a href="http://skytorngame.com/">Skytorn</a>.  Noel was nice enough to correct my mistaken assumptions about the inner workings of the lighting algorithm.</p>

<p>Looks like I kind of inverted the polarity of the raycasting with regard to the player and the level geometry.</p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<!--more-->


<h2>The algorithm</h2>

<p>The algorithm doesn&rsquo;t raycast in the full 360° circle around player&#x2013;that would be too costly.  Instead, it takes advantage of the fact that the level&rsquo;s ground collision geometry is stored in a grid.</p>

<ol>
<li><p>Given the player&rsquo;s location, there is a small list of collision geometry in the 8 or so grid cells surrounding the player.</p></li>
<li><p>The lighting algorithm raycasts from the corners of the level geometry to the player, instead of from the player out to the geometry.</p></li>
<li><p>Then, to prevent the lighting from looking too triangular, the algorithm adds a few more raycasts out from the player to the geometry in between the other raycasts.</p></li>
</ol>


<h2>That&rsquo;s actually all there is to it</h2>

<p>The algorithm I originally envisioned was naive and costly.  But, it&rsquo;s nice to hear that I wasn&rsquo;t far off&#x2013;I simply inverted the solution.  It was also nice to learn about a benefit of storing level geometry in a grid that I previously failed to appreciate.</p>

<p>Heaping thanks to <a href="https://twitter.com/NoelFB/">@NoelFB</a> for helping explain the algorithm, instead of getting bent out of shape about my lame attempt to reverse engineer the inner workings of <a href="http://skytorn-game.com/">Skytorn</a> from a screenshot.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raycast Lighting in Skytorn]]></title>
    <link href="http://zerosalife.github.io/blog/2015/05/09/raycast-lighting-in-skytorn/"/>
    <updated>2015-05-09T10:21:03-04:00</updated>
    <id>http://zerosalife.github.io/blog/2015/05/09/raycast-lighting-in-skytorn</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/NoelFB/">@NoelFB</a> posted a <a href="https://twitter.com/NoelFB/status/543586120731074561/photo/1">screenshot</a> showing how dynamic lighting works in <a href="http://skytorn-game.com/">Skytorn</a>.</p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<!--more-->


<h2>The algorithm</h2>

<p>From what I can tell, the algorithm looks something like this:</p>

<ol>
<li><p>Raycast out for 360° around the light source, starting in a clockwise direction.  If the rays encounter a collidable object, add it to the list of pink lines defining the polygonal shape of the lit area.  If the ray exceeds the distance of the light gradient, clamp the triangle edge defining the pink line at that distance.</p></li>
<li><p>For each of the collidable objects encountered, extend a ray past their vertices until it hits another collidable to create the obscured lighting effect visible to down and to the right of the light source.</p></li>
<li><p>Finally construct a set of triangles by starting from the closest edge in the list defining the pink lines to form the polygon.</p></li>
</ol>


<h2>That&rsquo;s all</h2>

<p>That&rsquo;s it for this week.  Let me know if you have any insight into this or other lighting algorithms in the comments or on the tweets.</p>

<h2>Update</h2>

<p>After some feedback from @NoelFB, I&rsquo;ve updated the algorithm in the <a href="http://zerosalife.github.io/blog/2015/05/16/more-skytorn-raycast-lighting-algorithm-details/">following post</a>.</p>
]]></content>
  </entry>
  
</feed>
