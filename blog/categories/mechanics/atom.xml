<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mechanics | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/mechanics/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2016-11-12T11:15:40-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Improvisation vs Preparation]]></title>
    <link href="http://zerosalife.github.io/blog/2016/04/23/improvisation-vs-preparation/"/>
    <updated>2016-04-23T10:44:50-04:00</updated>
    <id>http://zerosalife.github.io/blog/2016/04/23/improvisation-vs-preparation</id>
    <content type="html"><![CDATA[<p><em>Or preparation as play.</em></p>

<p>This post was inspired by long set-up times eating into time-crunched
play time for busy adults.</p>

<p>As a young adult with minimal time commitment I had no problem
spending hours preparing for a gaming session among friends.  And
there was little concern for an hour or two spent setting up a
wargaming afternoon.  But in adulthood these time commitments quickly
eat-in to or completely consume any time that would otherwise be spent
having fun, gaming with your friends.</p>

<p>Certain games are suited more to the <em>preparation</em> side of things than
the <em>improvisation</em> side.</p>

<!--more-->


<p>Consider the examples I mentioned above, a gamemaster driven
roleplaying game and a tabletop war game.  Certainly these are fun
pastimes but they require preparation on the part of the individual or
all parties involved.</p>

<p>Roleplaying games require, at least initially, the generation of
player characters for all involved, potentially consuming the entire
first play session.  The gamemaster is, at least ostensibly, required
to plot out a scenario for each play session, necessitating an
substantial noninteractive time investment outside of the normal play
session.</p>

<p>For war games, players must spend time constructing armies, generally
away from the interaction at the table.</p>

<p>How does this differ from say playing stickball or baseball with your
friends in an alley or a field with just a stick and a ball?  The game
starts when the minimally necessary instruments arrive, and continues
even as players come and go.  Interrupting these improvised games is
an almost heinous offense, hence the saying &ldquo;taking the ball and going
home.&rdquo;</p>

<p>To stretch this metaphor beyond the breaking point: in this syllogism,
the polar opposite of pickup baseball or basketball would be ice
hockey, something requiring potentially hours of preparation by a
Zambonist to prepare the playing surface so the players can play for a
relatively short time.</p>

<p>There are a few games that get preparation as play mechanics right,
but I think there is still room for improvement.</p>

<ul>
<li><p><a href="http://glyphpress.com/talk/shock-pdf">Shock</a></p></li>
<li><p><a href="http://www.evilhat.com/home/fate-core/">Fate</a></p></li>
<li><p><a href="http://www.dog-eared-designs.com/primetime-adventures/">Primetime Adventures</a></p></li>
<li><p><a href="http://www.lamemage.com/microscope/">Microscope</a></p></li>
<li><p><a href="http://planet-thirteen.com/Dungeon.aspx">How to Host a Dungeon</a></p></li>
<li><p><a href="http://bullypulpitgames.com/games/fiasco/">Fiasco</a></p></li>
</ul>


<p>These games all turn the world gen and character background into an
gameplay activity, typically performed during the first group play
session.  Shock and Fiasco even do away with the necessity of a GM,
allowing players to take turns serving as protagonists, antagonists,
or third parties.  These examples go a long way toward what I mean by
preparation as play, but I don&rsquo;t think the games have captured the
concept entirely.</p>

<p>What I would be interested in seeing is a separate <em>asynchronous</em> type
of game, where the preparation has mechanics that boil down to a solo
game.  The results of the each player&rsquo;s solo game(s) are then somehow
incorporated and allowed to influence the collaborative group play
session.  If you know of such a game, drop me a line in the comments
or on <a href="https://twitter.com/zerosalife">twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Skytorn Raycast Lighting Algorithm Details]]></title>
    <link href="http://zerosalife.github.io/blog/2015/05/16/more-skytorn-raycast-lighting-algorithm-details/"/>
    <updated>2015-05-16T12:10:29-04:00</updated>
    <id>http://zerosalife.github.io/blog/2015/05/16/more-skytorn-raycast-lighting-algorithm-details</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/blog/2015/05/09/raycast-lighting-in-skytorn/">Last week</a> I covered the lighting algorithm <a href="https://twitter.com/NoelFB">@NoelFB</a> is implementing for <a href="http://skytorngame.com/">Skytorn</a>.  Noel was nice enough to correct my mistaken assumptions about the inner workings of the lighting algorithm.</p>

<p>Looks like I kind of inverted the polarity of the raycasting with regard to the player and the level geometry.</p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<!--more-->


<h2>The algorithm</h2>

<p>The algorithm doesn&rsquo;t raycast in the full 360° circle around player&#x2013;that would be too costly.  Instead, it takes advantage of the fact that the level&rsquo;s ground collision geometry is stored in a grid.</p>

<ol>
<li><p>Given the player&rsquo;s location, there is a small list of collision geometry in the 8 or so grid cells surrounding the player.</p></li>
<li><p>The lighting algorithm raycasts from the corners of the level geometry to the player, instead of from the player out to the geometry.</p></li>
<li><p>Then, to prevent the lighting from looking too triangular, the algorithm adds a few more raycasts out from the player to the geometry in between the other raycasts.</p></li>
</ol>


<h2>That&rsquo;s actually all there is to it</h2>

<p>The algorithm I originally envisioned was naive and costly.  But, it&rsquo;s nice to hear that I wasn&rsquo;t far off&#x2013;I simply inverted the solution.  It was also nice to learn about a benefit of storing level geometry in a grid that I previously failed to appreciate.</p>

<p>Heaping thanks to <a href="https://twitter.com/NoelFB/">@NoelFB</a> for helping explain the algorithm, instead of getting bent out of shape about my lame attempt to reverse engineer the inner workings of <a href="http://skytorn-game.com/">Skytorn</a> from a screenshot.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raycast Lighting in Skytorn]]></title>
    <link href="http://zerosalife.github.io/blog/2015/05/09/raycast-lighting-in-skytorn/"/>
    <updated>2015-05-09T10:21:03-04:00</updated>
    <id>http://zerosalife.github.io/blog/2015/05/09/raycast-lighting-in-skytorn</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/NoelFB/">@NoelFB</a> posted a <a href="https://twitter.com/NoelFB/status/543586120731074561/photo/1">screenshot</a> showing how dynamic lighting works in <a href="http://skytorn-game.com/">Skytorn</a>.</p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<!--more-->


<h2>The algorithm</h2>

<p>From what I can tell, the algorithm looks something like this:</p>

<ol>
<li><p>Raycast out for 360° around the light source, starting in a clockwise direction.  If the rays encounter a collidable object, add it to the list of pink lines defining the polygonal shape of the lit area.  If the ray exceeds the distance of the light gradient, clamp the triangle edge defining the pink line at that distance.</p></li>
<li><p>For each of the collidable objects encountered, extend a ray past their vertices until it hits another collidable to create the obscured lighting effect visible to down and to the right of the light source.</p></li>
<li><p>Finally construct a set of triangles by starting from the closest edge in the list defining the pink lines to form the polygon.</p></li>
</ol>


<h2>That&rsquo;s all</h2>

<p>That&rsquo;s it for this week.  Let me know if you have any insight into this or other lighting algorithms in the comments or on the tweets.</p>

<h2>Update</h2>

<p>After some feedback from @NoelFB, I&rsquo;ve updated the algorithm in the <a href="http://zerosalife.github.io/blog/2015/05/16/more-skytorn-raycast-lighting-algorithm-details/">following post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Math Team Hearts]]></title>
    <link href="http://zerosalife.github.io/blog/2015/03/14/math-team-hearts/"/>
    <updated>2015-03-14T15:14:29-04:00</updated>
    <id>http://zerosalife.github.io/blog/2015/03/14/math-team-hearts</id>
    <content type="html"><![CDATA[<p>Math Team Hearts is a speedy modification to Hearts that ironically involves less math than the vanilla game.</p>

<!--more-->


<p>From <a href="http://www.crcpress.com/product/isbn/9781482217162">Game Design Workshop</a> by <a href="https://twitter.com/kinojabber">Tracy Fullerton</a>:</p>

<blockquote><p>One good way to train yourself in the design of game mechanics is to challenge yourself with controlled design exercises in which you take an existing game system, set a new player experience goal, and make changes to the system to meet that goal.</p></blockquote>

<h2>The Goal</h2>

<p>We needed a game that played quickly, without a defined endpoint (e.g. when one player reaches 100 points in normal <em>Hearts</em>) because this game was played in free time waiting for school to start or waiting for the bus.  There was no time to spend tallying up scores, counting hearts and doing awkward math.</p>

<p>The rules also modify the risk-reward value of shooting the moon to make it more attractive.  We found the game to be more interesting when multiple parties were invested in shooting the moon with less drawback from accumulating hearts.</p>

<h2>The Rules</h2>

<p>The game plays like normal <em><a href="http://en.wikipedia.org/wiki/Hearts">Hearts</a></em>, except taking <strong>hearts</strong> no longer gives you points.</p>

<ul>
<li>Taking any number of <strong>hearts</strong> without <strong>shooting the moon</strong> gives you 0 points.</li>
<li>Taking no <strong>hearts</strong> in a round gives you 1 point.</li>
<li><strong>Shooting the moon</strong> gives you 2 points.</li>
<li>Taking the <strong>queen of spades</strong> without <strong>shooting the moon</strong> gives you -1 point.</li>
</ul>


<p>The <strong>player</strong> with the most points at the end of play wins.</p>

<p>For more variety, use <strong>dealer</strong>&rsquo;s choice drafting rules.  Each round, the <strong>dealer</strong> decides on how players will pass cards prior to play.
<strong>Players</strong> take turns dealing.</p>

<h2>Tweaks</h2>

<p>I&rsquo;m working from memory, so I&rsquo;m not sure I&rsquo;ve got the point values exactly right.  Perhaps there should be more of a penalty for taking the Queen without shooting the moon.  That would create a more exciting risk-reward trade-off.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Mind-reading Machine in Unity JavaScript]]></title>
    <link href="http://zerosalife.github.io/blog/2014/12/13/simple-mind-reading-machine-in-unity-javascript/"/>
    <updated>2014-12-13T15:38:20-05:00</updated>
    <id>http://zerosalife.github.io/blog/2014/12/13/simple-mind-reading-machine-in-unity-javascript</id>
    <content type="html"><![CDATA[<p>I ported a cool toy from <a href="http://alastaira.wordpress.com/2014/03/15/a-simple-mind-reading-machine/">Alastair Aitchison&rsquo;s blog</a> to Unity JavaScript.  The toy implements a simple &lsquo;mind-reading&rsquo; algorithm that attempts to guess whether the player will choose Left (by pressing the left arrow key) or Right (by pressing the right arrow key).</p>

<!--more-->


<h2>How does it work?</h2>

<p>Aitchison&rsquo;s blog post describes how it works:</p>

<blockquote><p>How does it work? Not by mind-reading, obviously, but by exploiting
the fact that humans do not behave as &ldquo;randomly&rdquo; as they think they
do. The computer maintains a very simple memory that records the
pattern of results of the last two rounds – whether the player won or
lost, whether they switched strategy, and then whether they then won
or last the following round. The computer then uses this to choose its
own best strategy based on the way the player behaved last time the
current pattern occurred. If the computer loses twice in a row using
the current strategy, it picks a random response in the next round.</p></blockquote>

<p>The original idea came from some AI work by <a href="http://en.wikipedia.org/wiki/Claude_Shannon">Claude Shannon</a> and D. W. Hagelbarger. <a href="http://cs.stanford.edu/people/eroberts/courses/soco/projects/1999-00/information-theory/ai.html">They describe the internal memory of the toy mind-reader</a> that we will model using a multidimensional array <code>v</code>:</p>

<blockquote><p>There are 8 possible situations and two things the player can do at each one:</p>

<ol>
<li><p>player wins, plays same, wins. Then same or differently.</p></li>
<li><p>player wins, plays same, loses. Then same or differently.</p></li>
<li><p>player wins, plays differently, wins. Then same or differently.</p></li>
<li><p>player wins, plays differently, loses.Then same or differently.</p></li>
<li><p>player loses, plays same, wins.Then same or differently.</p></li>
<li><p>player loses, plays same, loses.Then same or differently.</p></li>
<li><p>player loses, plays differently, wins.Then same or differently.</p></li>
<li><p>player loses, plays differently, loses.Then same or differently.</p></li>
</ol>
</blockquote>

<h2>Why port it?</h2>

<p>Why not just take a straightforward approach, running the code myself? First, I wanted to fully understand the algorithm the hard way, by coding it line for line myself. And second, I wanted to better familiarize myself with Unity JavaScript, including its differences from C#.</p>

<p>The port was relatively simple, except for two small hiccups.  First, as far as I know, Unity JavaScript doesn&rsquo;t allow for initializing a multidimensional array.  So I looped over the cells in the array, filling them that way.  I have a hunch that the cells are initialized to the <code>int</code> <code>0</code> by default, but I wanted to be explicit.  Please let me know in the comments or <a href="https://twitter.com/zerosalife">via twitter</a> if I&rsquo;m way off base.</p>

<pre><code>var v : int[2, 2, 2];
for(var cell in v) {
    cell = 0;
}
</code></pre>

<p>I also encountered some unfamiliar syntax: the sonorously named Elvis operator, <a href="http://en.wikipedia.org/wiki/Conditional_operator">?:</a>.  It&rsquo;s also called the <a href="http://en.wikipedia.org/wiki/Ternary_operation">ternary operator</a>, when it&rsquo;s used with 3 arguments, as I&rsquo;ve used it here.  In C-like languages it allows for succinctly stating these kinds of conditional expressions. The example below illustrates how it&rsquo;s used.</p>

<pre><code>// Is the current player's choice the same as the previous player's
// choice?
//
// if (playerChoice == lastChoice)
//     sameChoice = True;
// else
//     sameChoice = False;
//
// Using ternary operator:
v[lw2, lw1, 1] = (v[lw2, lw1, 0] == playerChoice ? 1 : 0);
</code></pre>

<h2>The code</h2>

<p>The ported code for the mind-reader is reproduced below.</p>

<pre><code>#pragma strict
import System.Collections.Generic;

// Used to record play history
var v: int[,,];
var lw1: int;
var lw2: int;
var losingStreak: int;

// The prediction of the player's next turn
var prediction: int;

// Keep track of scores
var cpuScore: int;
var playerScore: int;

var outText: String;

function Start () {
    // Initialize matrix to track state of play history

    v = new int[2, 2, 2];

    for(var cell in v) {
        cell = 0;
    }

    // No prior knowledge, so set inital prediction based on random chance.
    prediction = flip();

    // Set scores to 0
    cpuScore = 0;
    playerScore = 0;

    // Initialize previous play and play before last win-lost trackers
    lw1 = 0;
    lw2 = 0;

    // Output
    outText = "";
}

function TakeTurn(playerChoice: int) {
    // Display player and computer's choices
    var outTextString: String = "You pressed " + playerChoice + ", " + "I guessed " + prediction + "\n";

    // Computer guessed correctly
    if (playerChoice == prediction) {
        cpuScore++;
        losingStreak = 0;
        outTextString += " I WIN!\n";
    }
    else {
        playerScore++;
        losingStreak++;
        outTextString += " YOU WIN!\n";
    }

    outText = outTextString;

    // Is the current player's choice the same as the previous player's
    // choice?
    //
    // if (playerChoice == lastChoice)
    //     sameChoice = True;
    // else
    //     sameChoice = False;
    //
    // Using ternary operator:
    v[lw2, lw1, 1] = (v[lw2, lw1, 0] == playerChoice ? 1 : 0);
    v[lw2, lw1, 0] = playerChoice;
    lw2 = lw1;
    lw1 = playerChoice;

    // If lost more than twice in present state, choose random
    // strategy.  Otherwise keep the same strategy.
    prediction = v[lw2, lw1, 1] == 1 &amp;&amp; losingStreak &lt; 2 ? v[lw2, lw1, 0] : flip();
}

function flip() : int {
    // Simulate a coin flip to produce 50:50 chance of [0, 1]
    return Random.Range(0, 2);
}


function Update () {
    if (Input.GetKeyDown(KeyCode.LeftArrow)) {
        TakeTurn(0);
    }
    if (Input.GetKeyDown(KeyCode.RightArrow)) {
        TakeTurn(1);
    }
}

function OnGUI() {
    var style : GUIStyle = new GUIStyle();
    style.fontSize = 36;

    GUI.Label(new Rect(0, 0, Screen.width, 100), outText, style);
    GUI.Label(new Rect(0, 100, Screen.width, 200), "Player: " + playerScore + " CPU: " + cpuScore, style);
}
</code></pre>
]]></content>
  </entry>
  
</feed>
