<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Unity | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/unity/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2016-02-06T08:14:11-06:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mocking GameObjects in Unity Unit Tests]]></title>
    <link href="http://zerosalife.github.io/blog/2016/01/09/mocking-gameobjects-in-unity-unit-tests/"/>
    <updated>2016-01-09T10:52:49-06:00</updated>
    <id>http://zerosalife.github.io/blog/2016/01/09/mocking-gameobjects-in-unity-unit-tests</id>
    <content type="html"><![CDATA[<p>A while back, I wrote a post about <a href="https://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/">unit testing in Unity</a>.  In this post, I&rsquo;ll go through a useful pattern to <a href="https://en.wikipedia.org/wiki/Mock_object">mock</a> <code>GameObject</code>s in unit tests.</p>

<!--more-->


<h2>Make a GameObject</h2>

<p>We can create a <code>GameObject</code> inside a test just like we would normally inside a Unity script.</p>

<p><code>csharp
GameObject testGo = new GameObject("test");
</code></p>

<p>Passing a string to <a href="https://docs.unity3d.com/ScriptReference/GameObject-ctor.html">the <code>GameObject</code> constructor</a> gives the <code>GameObject</code> that name.</p>

<h2>We can even Instantiate prefabs</h2>

<p>Since our test is not inheriting <code>MonoBehaviour</code>, we&rsquo;ll have to call the Instantiate function directly, using the fully qualified namespace.</p>

<p>Remember that prefabs are just stored <code>GameObject</code>s, so we can use the <code>testGo</code> created above as our prefab.</p>

<p>```csharp
GameObject go = UnityEngine.Object.Instantiate(testGo,</p>

<pre><code>                                           Vector3.zero,
                                           Quaternion.identity) as GameObject;
</code></pre>

<p>```</p>

<h2>Clean up</h2>

<p>We can create <code>GameObjects</code>, but repeatedly running the test leaves our project cluttered up with old objects.  We want our tests to clean up all mocked objects after running.  We&rsquo;ll do that using by using the fully qualified <a href="https://docs.unity3d.com/ScriptReference/Object.DestroyImmediate.html"><code>DestroyImmediate</code> function</a>.</p>

<p>We need to call <code>DestroyImmediate</code> instead of <code>Destroy</code> because the unit tests are running in the editor and delayed destruction won&rsquo;t be invoked.</p>

<p><code>csharp
UnityEngine.Object.DestroyImmediate(go);
UnityEngine.Object.DestroyImmediate(testGo);
</code></p>

<h2>Mocking is easy</h2>

<p>Following this pattern will give you the ability to mock objects to your hearts' delight as you unit test your Unity code.  As, always let me know if you have questions, comments, or concerns below or on <a href="https://twitter.com/zerosalife">twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking GameObjects in Unity Unit Tests]]></title>
    <link href="http://zerosalife.github.io/blog/2015/10/31/mocking-gameobjects-in-unity-unit-tests/"/>
    <updated>2015-10-31T09:03:57-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/10/31/mocking-gameobjects-in-unity-unit-tests</id>
    <content type="html"><![CDATA[<p>A while back, I wrote a post about <a href="http://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/">unit testing in Unity</a>.  In this post, I&rsquo;ll go through a useful pattern to <a href="https://en.wikipedia.org/wiki/Mock_object">mock</a> <code>GameObject</code>s in unit tests.</p>

<!--more-->


<h2>Make a GameObject</h2>

<p>We can create a <code>GameObject</code> inside a test just like we would normally inside a Unity script.</p>

<p><code>csharp
GameObject testGo = new GameObject("test");
</code></p>

<p>Passing a string to <a href="http://docs.unity3d.com/ScriptReference/GameObject-ctor.html">the <code>GameObject</code> constructor</a> gives the <code>GameObject</code> that name.</p>

<h2>We can even Instantiate prefabs</h2>

<p>Since our test is not inheriting <code>MonoBehaviour</code>, we&rsquo;ll have to call the Instantiate function directly, using the fully qualified namespace.</p>

<p>Remember that prefabs are just stored <code>GameObject</code>s, so we can use the <code>testGo</code> created above as our prefab.</p>

<p>``` csharp
GameObject go = UnityEngine.Object.Instantiate(testGo,</p>

<pre><code>                                           Vector3.zero,
                                           Quaternion.identity) as GameObject;
</code></pre>

<p>```</p>

<h2>Clean up</h2>

<p>We can create <code>GameObject</code>s, but repeatedly running the test leaves our project cluttered up with old objects.  We want our tests to clean up all mocked objects after running.  We&rsquo;ll do that using by using the fully qualified <a href="http://docs.unity3d.com/ScriptReference/Object.DestroyImmediate.html"><code>DestroyImmediate</code> function</a>.</p>

<p>We need to call <code>DestroyImmediate</code> instead of <code>Destroy</code> because the unit tests are running in the editor and delayed destruction won&rsquo;t be invoked.</p>

<p><code>csharp
UnityEngine.Object.DestroyImmediate(go);
UnityEngine.Object.DestroyImmediate(testGo);
</code></p>

<h2>Mocking is easy</h2>

<p>Following this pattern will give you the ability to mock objects to your hearts' delight as you unit test your Unity code.  As, always let me know if you have questions, comments, or concerns below or on twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using  LINQ queries and lambda expressions in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/10/17/using-linq-queries-and-lambda-expressions-in-unity-c-sharp/"/>
    <updated>2015-10-17T11:26:32-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/10/17/using-linq-queries-and-lambda-expressions-in-unity-c-sharp</id>
    <content type="html"><![CDATA[<p>Unity&rsquo;s C# environment includes access to .NET&rsquo;s powerful <a href="https://en.wikipedia.org/wiki/Language_Integrated_Query">LINQ querying expressions</a>.  In this post I&rsquo;ll show how to use LINQ expressions to call anonymous functions.</p>

<!--more-->


<h2>Use the lambda</h2>

<p>In the following examples, I&rsquo;ll be using <a href="https://msdn.microsoft.com/en-us/library/bb397687.aspx">lambda expressions</a> to specify anonymous functions that I will pass as arguments to the LINQ expressions.</p>

<p>C# uses the <code>=&gt;</code> symbol as an operator to create lambda expressions.</p>

<p>For example,</p>

<p><code>csharp
x =&gt; x + 1;
</code></p>

<p>says, create an anonymous function taking a single argument <code>x</code> and return the value of <code>x + 1</code>.</p>

<h2>Increment an array</h2>

<p>Say I want to use my anonymous function to increment an array of counters when a tick passes in my game.</p>

<p>```csharp
int[] counters = new int[] {0, 1, 2, 3};</p>

<p>int[] tick(int[] counters) {</p>

<pre><code>int[] ret = new int[counters.Length];
for(int i = 0; i &lt; counters.Length; i++) {
    ret[i] = counters[i] + 1;
}
return ret;
</code></pre>

<p>}</p>

<p>tick(counters);
```</p>

<p>I could iterate over the array, incrementing each of the counters one at a time.</p>

<p>Or I could use LINQ expressions to map a function that increments an element over the array.</p>

<p>```csharp
int[] tick(int[] counters) {</p>

<pre><code>return counters.Select(x =&gt; x + 1).ToArray();
</code></pre>

<p>}
```</p>

<p>This approach has the benefit of avoiding an intermediate temporary variable to hold the returned array.  It also avoids potential errors in writing the <code>for</code> statement.  It will never be off by one.</p>

<p>I find the use of higher order functional style, the LINQ expression, easier to read than the imperative style, the <code>for</code> statement.</p>

<p>One final thing to point out is that <code>Select()</code> returns an <code>IEnumerable</code>, so you have to call its <code>.ToArray</code> method to return the proper integer array for the <code>tick</code> function.</p>

<h2>Conclusion</h2>

<p>Check out the <a href="https://gist.github.com/zerosalife/7abc16fb21dfb05dc771">example code on github</a>.</p>

<p>I&rsquo;ve only shown a tiny subset of the <a href="http://www.dotnetperls.com/linq">functionality that LINQ provides</a>.  Feel free to let me know if you dig in and find more useful tips.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symbolic Links to Share Scripts Across Unity Projects]]></title>
    <link href="http://zerosalife.github.io/blog/2015/10/10/symbolic-links-to-share-scripts-across-unity-projects/"/>
    <updated>2015-10-10T13:27:14-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/10/10/symbolic-links-to-share-scripts-across-unity-projects</id>
    <content type="html"><![CDATA[<p>I like to develop utility scripts in a common project where I can implement unit tests without cluttering up my game projects with <a href="https://www.assetstore.unity3d.com/en/#!/content/13802">UnityTestTools</a> and duplicated test scripts.  If you&rsquo;re not sure what unit tests are, check out <a href="http://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/">this post I wrote about them</a>.</p>

<p>To share code between projects I use <a href="https://en.wikipedia.org/wiki/Symbolic_link">symlinks</a> to link the files from my utility project to individual games.</p>

<!--more-->


<p>I&rsquo;m doing development on Mac OS X.  Other platforms may use different commands to create symbolic links.</p>

<pre><code>ln -s [source file] [destination file]
</code></pre>

<p>This command creates a symbolic link to the <code>[source file]</code> at the <code>[destination file]</code>.</p>

<p>That way, my I know my games will always use the up-to-date code.</p>

<h2>git Gotcha</h2>

<p>One caveat is that the symlinked files show up in git version control as a blob of the filepath text instead of the actual code of the file.  This means that the symlinked files will not be tracked in the destination project&rsquo;s version control history.</p>

<p>That&rsquo;s okay with me, because I plan on developing the symlinked files in a separate parallel test project with all of their unit tests, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing in Unity]]></title>
    <link href="http://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/"/>
    <updated>2015-10-03T09:44:58-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity</id>
    <content type="html"><![CDATA[<p>How to use UnityTestTools to create unit tests for Unity CSharp</p>

<!--more-->


<h2>Setting it up</h2>

<p>Download the <a href="https://www.assetstore.unity3d.com/en/#!/content/13802">UnityTestTools package</a> from the Unity Asset Store.</p>

<h2>Import the package</h2>

<p>We are going to need the <code>Common</code>, <code>Assertion</code>, and <code>UnitTesting</code> directories.</p>

<h2>Create a Tests directory</h2>

<p>We need a place for the tests to live.</p>

<p>One important thing to remember is that the scripts in the <code>Tests</code> directory need to be accessible by the <code>UnityTestTools</code> in the Editor so we&rsquo;ll put them in <code>./Tests/Editor/</code>.</p>

<h2>Make a namespace</h2>

<p><code>UnityTestTools</code> will organize our tests by top-level <code>namespace</code> declarations defined in each of the tests' files.  Then we follow it up with a <code>Category</code> attribute that names the category of tests that live inside the <code>internal class</code> we define in the namespace.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>./Tests/Editor/ExampleTests.cs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">ExampleTests</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;[</span><span class="n">Category</span><span class="p">(</span><span class="s">&quot;Example Tests&quot;</span><span class="p">)]</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">ExampleTests</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// tests go here</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Test attributes</h2>

<p>Use the <code>[TestFixture]</code> and <code>[Test]</code> attributes to let the Unity Test Tools Unit Test Runner know where your tests are.</p>

<p>You can also use the <code>[Category]</code> attribute to add semantic labels to your tests.</p>

<h2>Making assertions</h2>

<p>The Testing Framework uses the out of date NUnit version <code>2.2.10</code></p>

<p>For reference see: <a href="http://www.nunit.org/index.php?p=assertions&amp;r=2.2.10">http://www.nunit.org/index.php?p=assertions&amp;r=2.2.10</a></p>

<h2>An example test</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>./Tests/Editor/ExampleTests.cs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">ExampleTests</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;[</span><span class="n">Category</span><span class="p">(</span><span class="s">&quot;Example Tests&quot;</span><span class="p">)]</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">ExampleTests</span> <span class="p">{</span>
</span><span class='line'><span class="na">    [Test]</span>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Example</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="m">1</span> <span class="p">+</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Actually run the tests</h2>

<p>Open the Unit Test window from the editor:</p>

<ul>
<li>Click on the <code>Unity Test Tools</code> menu</li>
<li>Select <code>Unit Test Runner</code></li>
</ul>


<p>You can also open the Unit Test Runner window with the keyboard shortcut <code>Alt-Cmd-Shift-U</code> on a Mac.</p>

<p>Simply, click on the <code>Run All</code> button to run the tests.</p>

<h2>Going further</h2>

<p><a href="https://www.assetstore.unity3d.com/en/#!/content/13802">Unity Test Tools</a> has support for Integration tests and assertions in addition to the vanilla unit test I described above.</p>

<p>There are plenty of features that I haven&rsquo;t covered here, so dig in to the examples that come with the Unity Test Tools package and let me know what you&rsquo;ve learned in the comments below or on twitter <a href="http://twitter.com/zerosalife">@zerosalife</a>.</p>
]]></content>
  </entry>
  
</feed>
