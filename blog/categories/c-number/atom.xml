<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C# | zero's a life]]></title>
  <link href="http://zerosalife.github.io/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://zerosalife.github.io/"/>
  <updated>2015-10-10T13:33:56-05:00</updated>
  <id>http://zerosalife.github.io/</id>
  <author>
    <name><![CDATA[zerosalife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unit Testing in Unity]]></title>
    <link href="http://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity/"/>
    <updated>2015-10-03T09:44:58-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/10/03/unit-testing-in-unity</id>
    <content type="html"><![CDATA[<p>How to use UnityTestTools to create unit tests for Unity CSharp</p>

<!--more-->


<h2>Setting it up</h2>

<p>Download the <a href="https://www.assetstore.unity3d.com/en/#!/content/13802">UnityTestTools package</a> from the Unity Asset Store.</p>

<h2>Import the package</h2>

<p>We are going to need the <code>Common</code>, <code>Assertion</code>, and <code>UnitTesting</code> directories.</p>

<h2>Create a Tests directory</h2>

<p>We need a place for the tests to live.</p>

<p>One important thing to remember is that the scripts in the <code>Tests</code> directory need to be accessible by the <code>UnityTestTools</code> in the Editor so we&rsquo;ll put them in <code>./Tests/Editor/</code>.</p>

<h2>Make a namespace</h2>

<p><code>UnityTestTools</code> will organize our tests by top-level <code>namespace</code> declarations defined in each of the tests' files.  Then we follow it up with a <code>Category</code> attribute that names the category of tests that live inside the <code>internal class</code> we define in the namespace.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>./Tests/Editor/ExampleTests.cs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">ExampleTests</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;[</span><span class="n">Category</span><span class="p">(</span><span class="s">&quot;Example Tests&quot;</span><span class="p">)]</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">ExampleTests</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// tests go here</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Test attributes</h2>

<p>Use the <code>[TestFixture]</code> and <code>[Test]</code> attributes to let the Unity Test Tools Unit Test Runner know where your tests are.</p>

<p>You can also use the <code>[Category]</code> attribute to add semantic labels to your tests.</p>

<h2>Making assertions</h2>

<p>The Testing Framework uses the out of date NUnit version <code>2.2.10</code></p>

<p>For reference see: <a href="http://www.nunit.org/index.php?p=assertions&amp;r=2.2.10">http://www.nunit.org/index.php?p=assertions&amp;r=2.2.10</a></p>

<h2>An example test</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>./Tests/Editor/ExampleTests.cs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">ExampleTests</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;[</span><span class="n">Category</span><span class="p">(</span><span class="s">&quot;Example Tests&quot;</span><span class="p">)]</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">ExampleTests</span> <span class="p">{</span>
</span><span class='line'><span class="na">    [Test]</span>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Example</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="m">1</span> <span class="p">+</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Actually run the tests</h2>

<p>Open the Unit Test window from the editor:</p>

<ul>
<li>Click on the <code>Unity Test Tools</code> menu</li>
<li>Select <code>Unit Test Runner</code></li>
</ul>


<p>You can also open the Unit Test Runner window with the keyboard shortcut <code>Alt-Cmd-Shift-U</code> on a Mac.</p>

<p>Simply, click on the <code>Run All</code> button to run the tests.</p>

<h2>Going further</h2>

<p><a href="https://www.assetstore.unity3d.com/en/#!/content/13802">Unity Test Tools</a> has support for Integration tests and assertions in addition to the vanilla unit test I described above.</p>

<p>There are plenty of features that I haven&rsquo;t covered here, so dig in to the examples that come with the Unity Test Tools package and let me know what you&rsquo;ve learned in the comments below or on twitter <a href="http://twitter.com/zerosalife">@zerosalife</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# code blocks in Octopress]]></title>
    <link href="http://zerosalife.github.io/blog/2015/08/15/c-sharp-code-blocks-in-octopress/"/>
    <updated>2015-08-15T08:59:19-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/08/15/c-sharp-code-blocks-in-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">Octopress</a> supports <a href="http://octopress.org/docs/plugins/backtick-codeblock/">backtick code blocks</a> with <a href="http://pygments.org/docs/lexers/">Pygment lexers</a> handling syntax highlighting.  I always forget the syntax for using with bactick codeblocks with C#, leading to irritating failures when I build my Octopress blog.  Here&rsquo;s how you use them.</p>

<pre><code>``` csharp
[csharp code here]
```
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trace function for debugging in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/07/25/trace-function-for-debugging-in-unity-c-sharp/"/>
    <updated>2015-07-25T09:00:31-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/07/25/trace-function-for-debugging-in-unity-c-sharp</id>
    <content type="html"><![CDATA[<p>Inspired by <a href="https://www.youtube.com/watch?v=btN095elmh4&amp;feature=youtu.be&amp;t=1985">a video from the excellent Double Fine Documentary interviews with Massive Chalice artists and developers</a>, I wanted to come up with a way of conditionally including debug statements in development code, but not in production.  Luckily I wasn&rsquo;t the first person to think of this.</p>

<p><a href="https://twitter.com/danpuzey">Dan Puzey</a> <a href="http://blog.puzey.net/simple-better-unity-logging/">wrote an abstraction layer</a> over Unity&rsquo;s built-in <code>Debug</code> library.  The library contains several functions for various types of logging.  The most important piece for me is <code>VerboseFormat</code>, which combines string formatting with conditional attributes.  I&rsquo;ll explain a bit more about how these pieces work below.</p>

<!--more-->


<h2>String Formatting</h2>

<p>To my surprise, Unity&rsquo;s C# implementation, Mono, doesn&rsquo;t use standard <code>printf</code>-like string formatting syntax.  Instead of <code>%s</code> or other commonly used formatting variables, C# uses curly braces around numbers to interpolate variables passed in to the <code>String.Format</code> call as arguments.</p>

<p>Dan&rsquo;s <code>VerboseFormat</code> function wraps <code>String.Format</code>, so you can call <code>VerboseFormat</code> with C# formatting strings.</p>

<p>``` csharp
using Assets.Phunk.Core</p>

<p>&hellip;</p>

<p>Log.VerboseFormat(&ldquo;var1: {0}, var2: {1}&rdquo;, var1, var2);
// => [VERBOSE] var1: [var1], var2: [var2]
```</p>

<h2>Conditional Attributes</h2>

<p>Above some of the functions in Dan&rsquo;s code you&rsquo;ll see the following <a href="https://msdn.microsoft.com/en-us/library/system.diagnostics.conditionalattribute%28v=vs.110%29.aspx">conditional attributes</a>:</p>

<p>``` csharp</p>

<pre><code>[System.Diagnostics.Conditional("DEBUG"), System.Diagnostics.Conditional("UNITY_EDITOR")]
</code></pre>

<p>```</p>

<p>These two settings tell the C# compiler to only compile the code, in this case the <code>Verbose</code> logging functions, when compiling during development, i.e. <code>DEBUG</code> or <code>UNITY_EDITOR</code>.  That means all of the <code>Verbose</code> logging statements in your code will not be compiled in the production builds of your code.</p>

<p>Cool, huh?  Good thinking, Dan.</p>

<h2>That&rsquo;s it!</h2>

<p>It&rsquo;s always great when you think that a tool would be useful and someone else has already implemented it for you.  Go on over and give <a href="http://puzey.net/">Dan&rsquo;s blog</a> a gander.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Probabilistic entity spawning in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/07/11/probabilistic-entity-spawning-in-unity-c-sharp/"/>
    <updated>2015-07-11T17:03:55-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/07/11/probabilistic-entity-spawning-in-unity-c-sharp</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript/">Last week</a> I showed how to do probabilistic entity spawning in Unity JS.  This week I&rsquo;ll port that code over to C#.  You can find examples of both the C# and JavaScript versions of the code in a <a href="https://github.com/zerosalife/ProbEntitySpawnExample">repository on github</a>.  Since I&rsquo;ve already explained the Algorithm I will focus mainly on the differences in the code.</p>

<p>There isn&rsquo;t syntactic sugar for Dictionary assignment in C# :( This required moving the assignment for the <code>areas</code> Dictionary into the <code>Start</code> function.  It&rsquo;s a move that enforces best practices, strictly speaking, but risks confusion about the content of the <code>areas</code> Dictionary at runtime.  If you&rsquo;d like to read up on Dictionaries in C#, I found <a href="https://msdn.microsoft.com/en-us/library/fkbw11z0.aspx">this resource</a> helpful.</p>

<p>The <code>foreach</code> command requires a type. This is a case where a stricter language will save confusion in the long run.</p>

<p>Lists can be created from specific arrays of the List&rsquo;s type, but not from some arbitrary array, as in JavaScript.  Again, this is a feature of a stricter language that causes some extra work up-front, but will make things more clear in the long run.</p>

<p>For an in-depth tour of the algorithm for spawning entities, check out <a href="http://zerosalife.github.io/blog/2015/07/04/probabilistic-entity-spawning-in-unity-javascript/">last week&rsquo;s post</a> and the <a href="https://github.com/zerosalife/ProbEntitySpawnExample">example repository on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Dictionary of Lists in Unity C#]]></title>
    <link href="http://zerosalife.github.io/blog/2015/06/20/create-a-dictionary-of-lists-in-unity-c-sharp/"/>
    <updated>2015-06-20T11:16:28-05:00</updated>
    <id>http://zerosalife.github.io/blog/2015/06/20/create-a-dictionary-of-lists-in-unity-c-sharp</id>
    <content type="html"><![CDATA[<p><a href="http://zerosalife.github.io/blog/2015/06/13/creating-a-dictionary-of-lists-in-unity-javascript/">Last week</a>, I published an article about creating a Dictionary of Lists in Unity using Unity&rsquo;s JavaScript.  Some of the syntax is changed in C#, but the overall algorithm is exactly the same.  I&rsquo;ve already mentioned the underlying motive, so I&rsquo;ll dive right in.</p>

<!--more-->


<p>Here&rsquo;s how to create a Dictionary of Lists in C# for Unity.</p>

<p>```csharp
Dictionary&lt;string, List<int>> table = new Dictionary&lt;string, List<int>>();</p>

<p>void Start() {</p>

<pre><code>// Fill our table with Lists containing ints using Arrays to intialize
// the Lists.
table["a"] = new List&lt;int&gt;(){1};
table["b"] = new List&lt;int&gt;(){2};
table["c"] = new List&lt;int&gt;(){3};

foreach(string str in table.Keys) {
    // Get the value for our Key.
    List&lt;int&gt; value = table[str];

    // If the Key is the desired Key, append to its list.
    if(str == "c") {
        value.Add(4);
    }

    // print the first item in each of the Lists.
    Debug.Log(value[0]);
}

// Print the appended item to see that it worked.
Debug.Log(table["c"][1]);
</code></pre>

<p>}
```</p>

<p>These are the main differences between the Unity JavaScript and C# code.  Take a look at the full file in a <a href="https://gist.github.com/zerosalife/e3882aa5ffd5dd614c9a">gist on github</a>.</p>
]]></content>
  </entry>
  
</feed>
